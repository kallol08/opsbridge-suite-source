{{ if .Values.global.services.obm.deploy }}
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    deployment.microfocus.com/runlevel: UP
  name: itom-omi-di-integration-{{ randAlphaNum 5 | lower }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Name }}
    app.kubernetes.io/name: itom-omi-di-integration
    app.kubernetes.io/version: {{.Values.internalIntegrationImages.itomOmiDiIntegration.imageTag }}
    itom.microfocus.com/capability: opsbridge-suite
    itom.microfocus.com/randomid: {{ uuidv4 }}
    tier.itom.microfocus.com/backend: backend
spec:
  template:
    metadata:
      labels:
        app: itom-omi-di-integration
        itom.microfocus.com/capability: internal-integration
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
    spec:
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount }}
      securityContext:
        runAsUser: {{ .Values.global.securityContext.user }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      restartPolicy: OnFailure
      initContainers:
      {{- include "helm-lib.containers.vaultInit" (dict "certNames" (printf "Common_Name:%s,Additional_SAN:%s" .Values.global.externalAccessHost .Values.global.externalAccessHost) "Values" .Values) | nindent 6 }}

      - name: cacert-bundler
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.internalIntegrationImages.cacertBundler.image }}:{{ .Values.internalIntegrationImages.cacertBundler.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "5m"
            memory: "5Mi"
        securityContext:
          runAsUser: {{ .Values.global.securityContext.user }}
          runAsGroup: {{ .Values.global.securityContext.fsGroup }}          
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        env:
          - name: "OUTPUT_PATH"
            value: "{{ .Values.cacerts.folder }}/{{ .Values.cacerts.file }}"
          - name: "CACERTS"
            value: "/var/run/secrets/boostport.com/issue_ca.crt
      {{- if (hasKey .Values.global "tlsTruststore") }}:{{ .Values.externalCerts.path }}"{{ end }}
        volumeMounts:
          - name: "vault-token"
            mountPath: /var/run/secrets/boostport.com
      {{- if (hasKey .Values.global "tlsTruststore") }}
          - name: {{ .Values.externalCerts.volumeName }}
            mountPath: {{ .Values.externalCerts.path }}
      {{- end }}
          - name: {{ .Values.cacerts.volumeName }}
            mountPath: {{ .Values.cacerts.folder }}
      containers:
      - name: event-forwarding-configurator
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.internalIntegrationImages.itomOmiDiIntegration.image }}:{{ .Values.internalIntegrationImages.itomOmiDiIntegration.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        resources:
          requests:
            memory: "512Mi"
            cpu: "0.1"
          limits:
            memory: "512Mi"
            cpu: "1"
        securityContext:
          runAsUser: {{ .Values.global.securityContext.user }}
          runAsGroup: {{ .Values.global.securityContext.fsGroup }}          
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        env:
          - name: "EXTERNAL_HOSTNAME"
            value: {{ .Values.global.externalAccessHost }}
          - name: "GODEBUG"
            value: "x509ignoreCN=0"
          - name: "DI_ADMIN_HOST"
            value: {{ include "helm-lib.getDiAdminHost" . | default "itom-di-administration-svc" | quote }}
          - name: "DI_ADMIN_PORT"
            value: {{ include "helm-lib.getDiAdminPort" . | default "18443" | quote }} # should this be 18443?
          - name: "DI_RECEIVER_HOST"
            value: {{ include "helm-lib.getDiReceiverHost" . | default "itom-di-receiver-svc" | quote }}
          - name: "DI_RECEIVER_PORT"
            value: {{ include "helm-lib.getDiReceiverPort" . | default "5050" | quote }}
          - name: DES_URL
            value: "https://itom-opsbridge-des-svc:40009/"
          - name: "ISSUE_CACERT_PATH"
            value: {{ .Values.cacerts.folder }}/{{ .Values.cacerts.file }}
          - name: "OPR_EVENT_FLEX"
            value: "{{ .Values.global.oprEventFlex }}"        
          {{ if eq (((.Values.global.services.opticDataLake).deploy) | toString) "false" }}
          - name: IDM_SERVICE_URL               
            value: "https://{{ include "helm-lib.getExternalIdmHost" . | default .Values.global.idm.serviceName }}:{{ include "helm-lib.getExternalIdmPort" . | default .Values.global.idm.internalPort }}/idm-service" 
          {{ if ((((.Values.global.services).opticDataLake).externalOpticDataLake).integrationUser) }}
          - name: IDM_USER
            value: {{ .Values.global.services.opticDataLake.externalOpticDataLake.integrationUser | default "integration_admin" | quote }}
          - name: IDM_USER_PASSWORD_KEY
            value: {{ .Values.global.services.opticDataLake.externalOpticDataLake.integrationPasswordKey | default "idm_integration_admin_password" | quote }}
          {{ end }}
          {{ else }}  
          - name: IDM_SERVICE_URL
            value: "https://{{ include "helm-lib.getInternalIdmHost" . | default "itom-idm-svc" }}:{{ include "helm-lib.getInternalIdmPort" . | default "18443" }}/idm-service"     
          - name: IDM_USER
            value: {{ .Values.global.idm.integrationUser | default "integration_admin" | quote }}
          - name: IDM_USER_PASSWORD_KEY
            value: {{ .Values.global.idm.integrationUserKey | default "idm_integration_admin_password" | quote }}
          {{ end }}
          - name: "TENANT_ID"
            value: {{ if hasKey .Values.global.di "tenant" }} {{ .Values.global.di.tenant }} {{ else }} "provider" {{ end }}
          - name: "OBM_HTTP_CLIENT_TIMEOUT"
            value: "{{ .Values.global.internalIntegration.obmHttpClientTimeout }}"
        volumeMounts:
          - name: podinfo
            mountPath: /etc/podinfo
          - name: vault-token
            mountPath: /var/run/secrets/boostport.com
          - name: {{ .Values.cacerts.volumeName }}
            mountPath: {{ .Values.cacerts.folder }}
          - name: tmp-storage
            mountPath: /tmp
      {{- with ( coalesce .Values.nodeSelector .Values.global.nodeSelector ) }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      {{ if (hasKey .Values.global "tlsTruststore") }}
        - name: {{ .Values.externalCerts.volumeName }}
          configMap:
            name: {{ .Values.global.tlsTruststore }}
            optional: true
      {{ end }}
        - name: {{ .Values.cacerts.volumeName }}
          emptyDir: {}
        - name: vault-token
          emptyDir: {}
        - name: tmp-storage
          emptyDir: {}
        - name: podinfo
          downwardAPI:
            items:
              - path: "namespace"
                fieldRef:
                  fieldPath: metadata.namespace
{{ end }}
