# Default values for nginx-ingress-controller.
global:
  # Prefer
  k8sProvider: ""
  # Compatible with the existing legacy suite config
  cluster:
    k8sProvider: ""
    tolerations: []

  services:
    suiteDeploymentManagement: false

  # Vault generates certificate based on this host
  externalAccessHost: ""
  # Compatible with the existing legacy config
  externalAccessPort:

  expose:
    type: "" # NodePort, ClusterIP, LoadBalancer
    internalLoadBalancer:
      annotations: {}
      ip:
      sourceRanges: []
      externalIPs: []
    externalLoadBalancer:
      annotations: {}
      ip:
      sourceRanges: []
      externalIPs: []

  docker:
    # set the global.docker.registry and orgName to your internal Docker registry/org
    registry: localhost:5000
    orgName: hpeswitom
    imagePullSecret: ""
    imagePullPolicy: IfNotPresent
  vaultInit:
    image: kubernetes-vault-init
    imageTag: 0.21.0-0046
  vaultRenew:
    image: kubernetes-vault-renew
    imageTag: 0.21.0-0046
  toolsBase:
    image: itom-tools-base
    imageTag: 1.6.0-0029
  stunnel:
    image: itom-stunnel
    imageTag: 11.14.0-0029

  securityContext:
    user: 1999
    fsGroup: 1999

  # persistence.enabled=true means that the PVCs are expected to be dynamically created by the composition chart
  # Otherwise, persistence.logVolumeClaim is a persistent volume claim for storing data files.
  # If all of the above are undefined, then temporary ephemeral storage will be created (only if isDemo=true).
  persistence:
    enabled: false
    logVolumeClaim:
  # if isDemo is true, this will allow use of ephemeral storage and other POC concepts
  isDemo: false

  setFqdnInIngress: true

  ## If you're providing your own original certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or -----BEGIN RSA PRIVATE KEY-----
  tls:
    cert: ""
    key: ""

  vaultAppRole: ""

  rbac:
    # Specifies whether a ServiceAccount should be created
    serviceAccountCreate: true
    # Specifies whether RBAC resources should be created
    roleCreate: true
    clusterRoleCreate: true

  nginx:
    # Annotation prefix configurable Prefix of the Ingress annotations specific to the NGINX controller. This ingress resources' annotations prefix must match the value you specify here.
    annotationPrefix: ingress.kubernetes.io
    # Compatible with the existing legacy parameter settings
    httpsPort:
    defaultBackendService: ""

  # Some cloud providers allow you to specify the loadBalancerIP.
  loadBalancer:
    ip:
    annotations: {}
    sourceRanges: []
  # Enable the monitor for ingress controller metrics.
  prometheus:
    deployPrometheusConfig: true  #true = deploy scraping rules (ServiceMonitor, PodMonitor) and alerts (PrometheusRule).
    deployGrafanaConfig: true  #true = deploy configmaps defining the Grafana dashboards
    prometheusSelector: #define the label(s) that Prometheus looks for when discovering rules.
      prometheus_config: "1"
    grafanaSelector: #define the label(s) that Grafana looks for when discovering dashboards.
      grafana_dashboard: "1"

deployment:
  rbac:
    # Specifies the serviceAccountName to be used
    serviceAccountName:
  # default for 2
  replicas: 2
  tolerations: []
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: node
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
      nodeAffinityPolicy:
      nodeTaintsPolicy:

# Any Capability using tcp services can specify the cm name here and it will be provided as argument to ingress Controller in deployment
tcpServiceConfigmap:

nginx:
  image: itom-nginx-ingress
  imageTag: 0.27.0-0060
  ingressClass: "nginx"
  defaultBackendService: ""
  secretName: nginx-default-secret

  tls:
    cert: ""
    key: ""

  certificate:
    # If not set, take from global.externalAccessHost
    cn: ""
    # Indicate if secret define by nginx.secretName should be filled when secret tls.cert/tls.key are empty
    updateSecret: false
    # File name without suffix for receiving generted secret cert/key. default: tls. cert/key will be placed into /var/run/secrets/boostport.com/tls.{crt,key}
    fileName: tls
    # SubjectAlternativeNames for certificate, separated by comma. Example: example.com,example.org
    subjectAlternativeNames: ""


  # nginx default configuration
  configuration:
    enable-vts-status: "true"
    body-size: 4096m
    map-hash-bucket-size: "32"
    server-name-hash-bucket-size: "128"
    server-name-hash-max-size: "512"
    proxy-read-timeout: "720"
    proxy-send-timeout: "720"
    server-tokens: "false"
    worker-processes: "4"
    proxy-buffer-size: 256k
    proxy-body-size: 20m
    force-ssl-redirect: "true"

  deploymentAnnotations:
    deployment.microfocus.com/default-replica-count: "2"
    deployment.microfocus.com/runlevel: STANDBY
    deployment.microfocus.com/simple-update: ignore

  service:
    # Non-mutual authentication https port. If not specified, same as `global.externalAccessPort`. One of the two must have value.
    httpsPort:
    httpsNodePort:
    external:
      # Whether create service for external traffic service. Default true.
      enable: true
      type:
      annotations: {}
      sourceRanges: []
      externalIPs: []
      nodePortAutoAssign: false

      # Mutual authentication related config
      # mutual authentication https port, which is target port for nginx to listen.
      clientCertAuthPort:
      # NodePort for service. If not specified, same as clientCertAuthPort above.
      clientCertAuthNodePort:
      # If clientCertAuthPort is specified, required. Configmap which contains client CA certificate needs create by yourself in advance.
      # Multiple certificates are supported.
      sslClientCertCAsCM: ""
      # Verification depth in the client certificates chain. Default 2.
      sslVerifyDepth: 2
      # Https header name for certificate generated by nginx presented to backend service. Default X509_CERTIFICATE
      clientCertHeader: X509_CERTIFICATE
      clientCertAuthIngressHost: ""

    internal:
      # Whether create service for internal traffic service. Default false.
      enable: false
      type: LoadBalancer
      # if not specified, same as `nginx.service.httpsPort` or `.Values.global.nginx.httpsPort` or `global.externalAccessPort`. One of the four must have value.
      httpsPort:
      annotations: {}
      sourceRanges: []
      externalIPs: []

  ingress:
    enabled: false
    certificateArn: ""
    additionalAnnotations: {}

  # Set as false in case creating duplicate dashboard, rules for frontend and portal.
  metrics:
    dashboardEnable: false
    ruleEnable: false

accessLog:
  size: "10M"
  rotate: "5"

errorLog:
  size: "10M"
  rotate: "5"

# Following are the general configuration

nodeSelector:

labels: {}

# Consuming charts can declare a namePrefix which will cause all names (service names, deployment names, etc.)
# to be prefixed with the specified value, instead of default "itom" prefix.  This enables multiple
# instances of the chart in a single namespace.
namePrefix:

# Consuming charts can declare they want backwards-compatible service name, i.e. prefixed with
# Default prefixed with Helm "Release.Name".
backwardsCompatServiceName: true

# When Set to false,Default backend service will no longer be a required parameter and won't be provided as an argument in deployment.
defaultBackendRequired: true

resources:
  requests:
    cpu: 10m
    memory: 100Mi
  limits:
    cpu: 1500m
    memory: 500Mi

