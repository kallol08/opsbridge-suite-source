{{/*# Copyright 2023 Open Text.*/}}
apiVersion: v1
kind: Service
metadata:
  name: itom-pg-backup
  labels:
    name: itom-pg-backup
spec:
  ports:
    - port: 8443
      protocol: TCP
      name: itom-pg-backup-port-https
      targetPort: 8443
    - port: 8080
      protocol: TCP
      name: itom-pg-backup-port-http
      targetPort: 8080
  selector:
    name: itom-pg-backup
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: itom-pg-backup
  labels:
    name: itom-pg-backup
    {{- if .Values.labels }}
    {{- toYaml .Values.labels | nindent 4 }}
    {{- end }}
  annotations:
    {{- if .Values.global.tlsTruststore }}
    configmap.reloader.stakater.com/reload: {{.Values.global.tlsTruststore | quote }}
    {{- end}}
    deployment.microfocus.com/default-replica-count: "1"
    deployment.microfocus.com/runlevel: DB

spec:
  selector:
    matchLabels:
      name: itom-pg-backup
  replicas: {{ .Values.deployment.replicas }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: itom-pg-backup
        {{- if .Values.labels }}
        {{- toYaml .Values.labels | nindent 8 }}
        {{- end }}
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
    spec:
      serviceAccountName: {{ template "pgbackup.serviceAccountName" . }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.global.securityContext.user }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 30
      initContainers:
      {{- include "helm-lib.waitForVault" . | nindent 6 }}
      {{- include "helm-lib.containers.vaultInit" (dict "certNames" "Common_Name:itom-pg-backup,Additional_SAN:itom-pg-backup" "Values" .Values) | nindent 6 }}
      containers:
      - name: itom-pg-backup
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.pgBackup.image }}:{{ .Values.pgBackup.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        ports:
        - containerPort: 8443
        - containerPort: 8080
        startupProbe:
          httpGet:
            scheme: HTTPS
            path: /health/
            port: 8443
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 90
        livenessProbe:
          httpGet:
            scheme: HTTPS
            path: /health/
            port: 8443
          timeoutSeconds: 10
          periodSeconds: 60
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            scheme: HTTPS
            path: /health/
            port: 8443
          initialDelaySeconds: 60
          timeoutSeconds: 15
          periodSeconds: 30
          failureThreshold: 20
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        securityContext:
          runAsNonRoot: true
          runAsUser: {{ .Values.global.securityContext.user }}
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        env:
          - name: NMS_DATA
            value: /data/pg-data
          - name: NMS_LOG
            value: /log/itom-backup/log
          - name: ITOM_CDF_EXTERNAL_SSL_CERTS_DIR
            value: /pg-data/shared/certs

          {{- include "helm-lib.getTlsEnvVars" . | nindent 10 }} 
        envFrom:
          - configMapRef:
              name: itom-pg-backup-config
        volumeMounts:
        - name: backup-data-vol
          mountPath: /data
        - name: backup-log-vol
          mountPath: /log
        - name: vault-token
          mountPath: /var/run/secrets/boostport.com
        - name: temp
          mountPath: /tmp
        - name: certs-volume
          mountPath: /pg-data/shared/certs
      {{- include "helm-lib.containers.vaultRenew" (dict "Values" .Values) | nindent 6 }}
      restartPolicy: Always
      volumes:
      - name: backup-data-vol
        {{- include "helm-lib.pvcStorage" (dict "claim" "dataVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      - name: backup-log-vol
        {{- include "helm-lib.pvcStorage" (dict "claim" "logVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      - name: vault-token
        emptyDir: {}
      - name: temp
        emptyDir: {}
      {{- if .Values.global.tlsTruststore }}
      - name: certs-volume
        configMap:
          name: {{ .Values.global.tlsTruststore }}
      {{- end }}
---
{{- if .Capabilities.APIVersions.Has "networking.k8s.io/v1/Ingress" }}
apiVersion: networking.k8s.io/v1
{{ else if .Capabilities.APIVersions.Has "networking.k8s.io/v1beta1/Ingress" }}
apiVersion: networking.k8s.io/v1beta1
{{ else }}
apiVersion: extensions/v1beta1
{{ end -}}
kind: Ingress
metadata:
  name: itom-ingress-backup
  annotations:
    {{ default "ingress.kubernetes.io" .Values.global.nginx.annotationPrefix }}/backend-protocol: HTTPS
    {{ default "ingress.kubernetes.io" .Values.global.nginx.annotationPrefix }}/secure-backends: "true"
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - http:
      paths:
      - path: /backupd
        {{- if .Capabilities.APIVersions.Has "networking.k8s.io/v1/Ingress" }}
        pathType: Prefix
        backend:
          service:
            name: itom-pg-backup
            port:
              number: 8443
        {{- else }}
        backend:
          serviceName: itom-pg-backup
          servicePort: 8443
        {{- end -}}
    {{- if .Values.global.setFqdnInIngress }}
    host: {{.Values.global.externalAccessHost}}
    {{- end }}
