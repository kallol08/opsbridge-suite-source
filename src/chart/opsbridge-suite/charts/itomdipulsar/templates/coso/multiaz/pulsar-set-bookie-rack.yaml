{{/* # */}}
{{/* # Licensed to the Apache Software Foundation (ASF) under one */}}
{{/* # or more contributor license agreements.  See the NOTICE file */}}
{{/* # distributed with this work for additional information */}}
{{/* # regarding copyright ownership.  The ASF licenses this file */}}
{{/* # to you under the Apache License, Version 2.0 (the */}}
{{/* # "License"); you may not use this file except in compliance */}}
{{/* # with the License.  You may obtain a copy of the License at */}}
{{/* # */}}
{{/* #   http://www.apache.org/licenses/LICENSE-2.0 */}}
{{/* # */}}
{{/* # Unless required by applicable law or agreed to in writing, */}}
{{/* # software distributed under the License is distributed on an */}}
{{/* # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY */}}
{{/* # KIND, either express or implied.  See the License for the */}}
{{/* # specific language governing permissions and limitations */}}
{{/* # under the License. */}}
{{/* # */}}
{{ include "pulsar.setCurrentComponentFull" (set . "currentComponent" "pulsar-set-bookie-rack") -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ template "pulsar.fullname" . }}-pulsarsetbookierack-configmap"
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
data:
  pulsar-set-bookie-rack.sh: |
{{/*    #!/bin/bash*/}}

    K8S_HOST=${KUBERNETES_SERVICE_HOST}
    K8S_PORT=${KUBERNETES_SERVICE_PORT_HTTPS}
    K8S_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    K8S_NS=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
    K8S_CERT_PATH=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    BOOKIE_INFO="-1"
    NODE_INFO="-1"
    BOOKIE_ZONE_INFO_COMPLETE=""
    BOOKIE_ZONE_INFO=""
    REGION_NAME="-1"
    BOOKIE_HOST_INFO="-1"
    max_trial_count=30;
    trial_count=0;
    list_bookie_trial_count=0;
    current_bookie_rack="-1"
    current_bookie_affinity="-1"
    function logger() {
        log=$1
        level=${log,,}
        res=${@:2}
        if [[ "$level" == "warn" ]]; then
            echo -e "[$(date)] - #WARN: $res" 2>&1
        elif [[ "$level" == "info" ]]; then
            echo -e "[$(date)] - #INFO: $res" 2>&1
        elif [[ "$level" == "error" ]]; then
            echo -e "[$(date)] - #ERROR: $res" 2>&1
        elif [[ "$level" == "debug" ]]; then
            echo -e "[$(date)] - #DEBUG: $res" 2>&1
        else
            echo -e "[$(date)] - INFO:$res" 2>&1
        fi
    }
    
    function get_bookie_rack_by_bookie_id() {
        bookie_id=$1
        current_bookie_rack="-1"
        get_bookie_max_trial=5
        {{/* #Setting the trial and max trial explicitly as on date we have issue with get-bookie-rack when rack is not set: https://github.com/apache/pulsar/issues/20871 */}}
        logger "info" "Executing /pulsar/bin/pulsar-admin bookies get-bookie-rack -b \"${bookie_id}\" | tr -d '\r'| tr -d '\n'"
        get_bookie_output=$(/pulsar/bin/pulsar-admin bookies get-bookie-rack -b "${bookie_id}" | tr -d '\r'| tr -d '\n')
        get_bookie_rc=$(echo $?)
        if [[ "$get_bookie_rc" -ne 0 ]]; then
                logger "warn" "Get bookie rack returned non-zero return code: \"${get_bookie_rc}\" in trial no: \"${trial_count}\""
                if [[ $trial_count -lt $get_bookie_max_trial ]]; then
                  logger "info" "Next trial for getting bookie rack will be after 10 seconds."
                  sleep 10;
                  ((trial_count++));
                  get_bookie_rack_by_bookie_id "${bookie_id}";
                else
                   logger "error" "All trials for getting bookie rack for \"${bookie_id}\" were exhausted!"
                fi
        else
                trial_count=0;
                logger "info" "Get bookie rack output for \"${bookie_id}\" is \"${get_bookie_output}\""
                current_bookie_rack=$(echo "${get_bookie_output}"| jq -r 'if has("rack") then .rack else "-1" end')
                if [[ "$current_bookie_rack" == "-1" ]]; then 
                    logger "info" "Bookie Rack for \"${bookie_id}\" is not set"
                else
                    logger "info" "Bookie Rack for \"${bookie_id}\" is \"${current_bookie_rack}\""
                fi
        fi

    }

    function get_pulsar_namespace_affinity() {
        current_ns=$1
        current_bookie_affinity="-1"
        {{/* #Setting the trial and max trial explicitly as on date we have issue with get-bookie-rack when rack is not set: https://github.com/apache/pulsar/issues/20871 */}}
        logger "info" "Executing /pulsar/bin/pulsar-admin namespaces get-bookie-affinity-group \"$current_ns\" | tr -d '\r'| tr -d '\n'"
        get_ns_affinity=$(/pulsar/bin/pulsar-admin namespaces get-bookie-affinity-group "${current_ns}" | tr -d '\r'| tr -d '\n')
        get_ns_rc=$(echo $?)
        if [[ "$get_ns_rc" -ne 0 ]]; then
                logger "warn" "Get namespace affinity returned non-zero return code: \"${get_ns_rc}\" in trial no: ${trial_count}."
                if [[ $trial_count -lt $max_trial ]]; then
                  logger "info" "Next trial for getting  affinity  of \"${current_ns}\" namespace will be after 10 seconds."
                  sleep 10;
                  ((trial_count++));
                  get_pulsar_namespace_affinity "${current_ns}";
                else
                   logger "error" "All trials for getting affinity  of \"${current_ns}\" namespace were exhausted! "
                fi
        else
                trial_count=0;
                logger "info" "Get affinity output for \"${current_ns}\" is \"${get_ns_affinity}\""
                current_bookie_affinity=$(echo "${get_ns_affinity}"| jq -r 'if has("bookkeeperAffinityGroupPrimary") then .bookkeeperAffinityGroupPrimary else "-1" end')
                if [[ "$current_bookie_affinity" == "-1" ]]; then 
                    logger "info" "Bookie Affinity for \"${current_ns}\" is not set"
                else
                    logger "info" "Bookie Affinity for \"${current_ns}\" is \"${current_bookie_affinity}\""
                fi
        fi

    }

    
    function get_bookie_hostnames(){
        logger "info" "Extracting bookie names"
        bookie_list=$(/pulsar/bin/pulsar-admin bookies list-bookies | tr -d '\r'| tr -d '\n')
        bookie_rc=$(echo $?)        
        bookeeperReplicaCount=0
        logger "info" "Bookie information listed by pulsar admin: ${bookie_list}"
        logger "info" "Extracting the bookkeeper statefulset information."
        get_bookie_sts_details=$(curl -X GET --cacert $K8S_CERT_PATH -H "Authorization: Bearer $K8S_TOKEN" -H 'Accept: application/json' -H 'Content-Type: application/json'  https://${K8S_HOST}:${K8S_PORT}/apis/apps/v1/namespaces/$K8S_NS/statefulsets/itomdipulsar-bookkeeper)
        get_bookie_sts_details_rc=$(echo $?)
        if [[ "$get_bookie_sts_details_rc" -ne 0 ]]; then
           logger "info" "Extracting Bookkeeper statefulset information returned non-zero return code: ${get_bookie_sts_details_rc}."
           exit 1
        else
           statuscode=$(echo "$get_bookie_sts_details" | jq -r '.code')
           logger "info" "Bookkeeper statefulset information extracted and statuscode is: ${statuscode}."
           if [[ "$statuscode" != "null" ]]; then
               logger "info" "Error while extracting bookkeeper statefulset information : ${get_bookie_sts_details}."
               exit 1
            else
               bookeeperReplicaCount=$(echo "$get_bookie_sts_details" | jq -r '.spec.replicas')           
               logger "info" "Deployed bookeeper replica: ${bookeeperReplicaCount}."
            fi
        fi
        if [[ ("$bookie_rc" -ne 0) || ($(echo $bookie_list| wc -c) -le ${bookeeperReplicaCount}) ]]; then
                logger "warn" "Listing of Bookies returned non-zero return code: ${bookie_rc} in trial no: ${list_bookie_trial_count}."
                if [[ $list_bookie_trial_count -lt $max_trial_count ]]; then
                  logger "info" "Next trial for listing bookies will be after 10 seconds."
                  sleep 10;
                  ((list_bookie_trial_count++));
                  get_bookie_hostnames;
                else
                   logger "error" "All trials for listing bookies are exhausted! Listing bookies was unsuccessful."
                   exit 1
                fi
        else
                list_bookie_trial_count=0;
                logger "info" "Bookie information listed successfully by pulsar admin."
        fi
 
        if [[ "$bookie_rc" -eq 0 ]]; then
            logger "info" "Bookie information listed by pulsar admin: ${bookie_list}"
            bookies=$(for i in $(echo "$bookie_list" |jq -c .bookies[].bookieId| jq -s . | jq -r '.[]'); do     echo \"$(echo $i| cut -d "." -f1)\":\"$(echo $i| cut -d ":" -f1)\",; done)
            bookie_hostname_map=$(echo "{"$(echo $bookies| sed 's/\(.*\),/\1/')"}" | jq .)
            BOOKIE_HOST_INFO=$(echo ${bookie_hostname_map} | jq -s '.')
            logger "info" "Bookie HostName Information: ${BOOKIE_HOST_INFO}"
        else
            logger "error" "Listing bookies was unsuccessful. Pulsar admin list bookies output: \"${bookie_list}\""
            exit 1
        fi
        
    }

    function get_bookkeeper_nodes() {
        logger "info" "Extracting the node for bookkeeper pods"
        pod_curl_command='curl -G -X GET --insecure --data-urlencode "labelSelector=component=bookkeeper"  https://${K8S_HOST}:${K8S_PORT}/api/v1/namespaces/${K8S_NS}/pods --cacert ${K8S_CERT_PATH} --header "Authorization: Bearer ${K8S_TOKEN}"'
        pod_details=$(curl -G -X GET --insecure --data-urlencode "labelSelector=component=bookkeeper" https://${K8S_HOST}:${K8S_PORT}/api/v1/namespaces/${K8S_NS}/pods --cacert ${K8S_CERT_PATH} --header "Authorization: Bearer ${K8S_TOKEN}")
        pod_info_rc=$(echo $?)
        if [[ "$pod_info_rc" -ne 0 ]]; then
                logger "error" "Extracting Bookkeeper information returned non-zero return code: ${pod_info_rc}."
                exit 1
        else
               logger "info" "Bookkeeper information extracted"
               bookie_node_info=$(echo ${pod_details} | jq -c '.items[] |{bookeeperName:.spec.hostname, nodeName:.spec.nodeName, bookkeeperHostname:.spec.hostname, bookkeeperPort: .spec.containers[]|.env |select( . != null )| .[]|select(.name=="BOOKIE_PORT")|.value}')
               BOOKIE_INFO=$(echo ${bookie_node_info} | jq -s '.')
               logger "info" "Bookie Node information : ${BOOKIE_INFO}"
        fi


    }

    function get_node_zone_info() {
        logger "info" "Extracting the zone for nodes"
        node_curl_command="curl  -X  GET --insecure   -w \"%{http_code}\" --url https://${K8S_HOST}:${K8S_PORT}/api/v1/nodes --cacert ${K8S_CERT_PATH} -H \"Authorization: Bearer ${K8S_TOKEN}\""
        logger "info" "Executing ${node_curl_command}"
        node_status_code=$(curl -X GET --insecure  -w "%{http_code}" --url https://${K8S_HOST}:${K8S_PORT}/api/v1/nodes --cacert ${K8S_CERT_PATH} -H "Authorization: Bearer ${K8S_TOKEN}" -o /tmp/node_info.txt)
        node_info_rc=$(echo $?)
        node_details=$(cat /tmp/node_info.txt)
        echo "Node Status Code: $node_status_code"
        rm -rf /tmp/node_info.txt
        
        if [[ "$node_info_rc" -ne 0 ]]; then
                logger "error" "Extracting Node information returned non-zero return code: ${node_info_rc}."
                exit 1
        else
                if [[ "$node_status_code" == "200" ]]; then
                    logger "info" "Node information extracted"
                    zone_node_info=$(echo ${node_details} | jq '.items[] | .metadata| {nodeName:.name, regionName:.labels."topology.kubernetes.io/region", zoneName:.labels."topology.kubernetes.io/zone"}')
                    zone_node_info_rc=$(echo $?)
                    if [[ "$zone_node_info_rc" -ne 0 ]]; then
                        logger "warn" "Could not extract zone label information : ${zone_node_info}.Cannot configure data placement policy."
                        exit 0
                    else
                        if [[ ! -z "$zone_node_info" || "$zone_node_info" != null || "$zone_node_info" != "null" ]]; then
                            NODE_INFO=$(echo ${zone_node_info} | jq -s '.')
                            logger "info" "Node Zone information : ${NODE_INFO}"
                        else
                            logger "warn" "Zone information is null : ${zone_node_info}. Cannot configure data placement policy."
                            exit 0
                        fi
                    fi
                else
                    logger "warn" "Could not extract the node information - Status Code: ${node_status_code}.\nResponse: {$node_details}"
                    exit 1
                fi
        fi

    }

    function get_bookie_region_zone_map() {
        if [[ ("$BOOKIE_INFO"!="-1") && ("$NODE_INFO"!="-1") ]]; then
            for bookie_host in $(echo "${BOOKIE_HOST_INFO}" | jq -c '.[]'); do
                bookie_names=$(echo "${bookie_host}"| jq -r 'keys')
            for bookie_name in $(echo "${bookie_names}" | jq -r -c '.[]'); do
                bookie_hostname=$(echo ${bookie_host}|jq | jq -r .\"$bookie_name\")
                bookie_node=$(echo "$BOOKIE_INFO"| jq -c '.[]'| jq -r "select(.bookeeperName==\"$bookie_name\")| if has(\"nodeName\") then .nodeName else \"default\" end")
                bookie_port=$(echo "$BOOKIE_INFO"| jq -c '.[]'| jq -r "select(.bookeeperName==\"$bookie_name\")| if has(\"bookkeeperPort\") then .bookkeeperPort else \"default\" end")
                node_region=$(echo "$NODE_INFO"| jq -c '.[]'| jq  -r "select(.nodeName==\"$bookie_node\")|if has(\"regionName\") then .regionName else \"defaultRegion\" end")
                node_zone=$(echo "$NODE_INFO"| jq -c '.[]'| jq -r "select(.nodeName==\"$bookie_node\")|if has(\"zoneName\") then .zoneName else \"defaultZone\" end")
                logger "info" "Bookie Information: bookie_name: ${bookie_name}, bookie_hostname: ${bookie_hostname}, bookie_node: ${bookie_node}, bookie_port: ${bookie_port}, bookie_zone: ${node_zone}, bookie_region: ${node_region}"
                if [[ -z "$node_zone" || "$node_zone" == null || "$node_zone" == "null" || "$node_zone" == "defaultZone"  ]]; then
                    logger "warn" "Zone information (${node_zone}) is not available for the node ${bookie_node}. Skipping the execution of Set Bookie Rack script"
                    exit 0
                fi
                if [[ -z "$node_region" || "$node_region" == null || "$node_region" == "null" || "$node_region" == "defaultRegion" ]]; then
                    logger "warn" "Region information(${node_region}) is not available for the node ${bookie_node}. Setting to default."
                    node_region="default"
                fi
                bookie_id="${bookie_hostname}:${bookie_port}"
                get_bookie_rack_by_bookie_id "${bookie_id}"
                bookie_rack_name="${current_bookie_rack}"
                current_zone_info="{\"bookieName\":\"$bookie_name\",\"nodeName\":\"$bookie_node\",\"regionName\":\"$node_region\", \"zoneName\":\"$node_zone\", \"bookieHostname\":\"$bookie_hostname\", \"bookiePort\":$bookie_port}"
                if [[ "$bookie_rack_name" == "$node_zone" ]]; then
                    logger "info" "Rack policy for ${bookie_name} bookie already set as ${bookie_rack_name}"
                    BOOKIE_ZONE_INFO_COMPLETE="$BOOKIE_ZONE_INFO_COMPLETE""$current_zone_info"
                else
                    BOOKIE_ZONE_INFO="$BOOKIE_ZONE_INFO""$current_zone_info"
                    BOOKIE_ZONE_INFO_COMPLETE="$BOOKIE_ZONE_INFO_COMPLETE""$current_zone_info"
                fi
            done
        done
        echo "BOOKIE_ZONE_INFO: \"$BOOKIE_ZONE_INFO\""
        BOOKIE_ZONE_INFO=$(echo "$BOOKIE_ZONE_INFO" | jq -s '.')
        BOOKIE_ZONE_INFO_COMPLETE=$(echo "$BOOKIE_ZONE_INFO_COMPLETE" | jq -s '.' )
        logger "info" "Bookie Zone: $BOOKIE_ZONE_INFO"
    else
        logger "error" "One of BOOKIE_INFO/ZONE_INFO is not set"
        exit 1
    fi
    }

    function get_unique_region_name() {
        region_names=$(echo "$BOOKIE_ZONE_INFO_COMPLETE" | jq '[.[].regionName] | unique')
        logger "info" "Region Names: $region_names"
        if [[ -z "$region_names" || "$region_names" == null || "$region_names" == "null" ]]; then
            logger "warn" "Region information (${region_names}) is not available. Setting it to default."
            REGION_NAME="default"
        else
            no_of_region=$(echo "$region_names" | jq length)
            if [[ no_of_region -eq 1 ]]; then
                REGION_NAME=$(echo "$region_names" | jq .[0])
                REGION_NAME=$(sed -e 's/^"//' -e 's/"$//' <<<"$REGION_NAME")
            else
                logger "warn" "ZERO OR MULTIPLE REGIONS [$region_names]($no_of_region) FOUND. SETTING REGION_NAME to default."
                REGION_NAME="default"
            fi
        fi
        echo "REGION_NAME is $REGION_NAME"
    }


    function set_bookie_rack() {
        for bookie_info in $(echo "${BOOKIE_ZONE_INFO}" | jq -c '.[]'); do
            logger "info" "Bookie Information: $bookie_info"
            bookeeper_hostname=$(echo "$bookie_info" | jq -r ' .bookieHostname')
            bookkeeper_port=$(echo "$bookie_info" | jq -r ' .bookiePort')
            bookkeeper_region=${REGION_NAME:-default}
            bookkeeper_zone=$(echo "$bookie_info" | jq -r ' .zoneName')
            logger "info" "Executing /pulsar/bin/pulsar-admin bookies set-bookie-rack -b \"${bookeeper_hostname}:${bookkeeper_port}\" --hostname \"${bookeeper_hostname}:${bookkeeper_port}\" -g \"$bookkeeper_region\" -r \"$bookkeeper_zone\""
            set_bookie_output=$(/pulsar/bin/pulsar-admin bookies set-bookie-rack -b "${bookeeper_hostname}:${bookkeeper_port}" --hostname "${bookeeper_hostname}:${bookkeeper_port}" -g "$bookkeeper_region" -r "$bookkeeper_zone")
            rack_rc=$(echo $?)
            if [[ "$rack_rc" -ne 0 ]]; then
                logger "warn" "Setting of bookie rack returned non-zero return code: \"${rack_rc}\" in trial no: \"${trial_count}\""
                if [[ $trial_count -lt $max_trial_count ]]; then
                  logger "info" "Next trial for setting bookie rack will be after 10 seconds."
                  sleep 10;
                  ((trial_count++));
                  set_bookie_rack;
                else
                    logger "error" "All trials for setting bookie rack for  \"${bookeeper_hostname}:${bookkeeper_port}\" were exhausted! Setting bookie rack was unsuccessful."
                    trial_count=0
                    exit 1
                fi
            else
                trial_count=0;
                logger "info" "Bookie Rack set successfully for \"${bookeeper_hostname}:${bookkeeper_port}\""
            fi
        done
    }

    function set_bookie_affinity() {
    
        logger "info" "Executing /pulsar/bin/pulsar-admin tenants list"
        tenants_list=""
        for i in {1..5}; do
           tenants_list=$(/pulsar/bin/pulsar-admin tenants list| tr -d '\r')
           tenants_list_rc=$(echo $?)
           if [[ "$tenants_list_rc" -ne 0 ]]; then
                logger "warn" "Getting tenants list returned non-zero return code: \"${tenants_list_rc}\" in trial no: \"${i}\".Trying again."  
            else
                    IFS=$'\r\n' read -r -d '' -a tenants_list_array <<< "$tenants_list"
                    logger "info" "Extracted tenants list successfully.Found \"${#tenants_list_array[@]}\" tenants."
                    break
           fi
        done
        if [[ "$tenants_list_rc" -ne 0 ]]; then	
            logger "error" "Could not extract the tenants. Not setting the bookie affinity"
            exit 1
        fi
        for tnt_name in "${tenants_list_array[@]}"; do
            logger "info" "Executing /pulsar/bin/pulsar-admin namespaces list \"${tnt_name}\" to list the namespaces"
            namespace_list=""
            for i in {1..5}; do
                namespace_list=$(/pulsar/bin/pulsar-admin namespaces list "${tnt_name}")
                namespace_list_rc=$(echo $?)
                if [[ "$namespace_list_rc" -ne 0 ]]; then
                    logger "warn" "Getting namespaces list for tenant \"${tnt_name}\" returned non-zero return code: \"${namespace_list_rc}\" in trial no: \"${i}\".Trying again."
                else
                    IFS=$'\r\n' read -r -d '' -a namespace_list_array <<< "$namespace_list"
                    logger "info" "Got namespace list successfully for tenant \"${tnt_name}\".Found \"${#namespace_list_array[@]}\" namespaces in \"${tnt_name}\" tenant."
                    break
                fi
            done
            if [[ "$namespace_list_rc" -ne 0 ]]; then	
                logger "error" "Could not extract the namespaces for \"${tnt_name}\". Not setting the bookie affinity for \"${tnt_name}\""
                continue
            fi
            for ns_name in "${namespace_list_array[@]}"; do  
                get_pulsar_namespace_affinity "$ns_name"
                logger "info" "Bookie affinity for \"$ns_name\" is \"$current_bookie_affinity\"."
                if [[ "$current_bookie_affinity" == "-1" || "$current_bookie_affinity" != "$REGION_NAME" ]]; then 
                    logger "info" "Executing \"/pulsar/bin/pulsar-admin namespaces set-bookie-affinity-group \"$ns_name\" --primary-group \"$REGION_NAME\"\""
                    for i in {1..5}; do
                        set_affinity=$(/pulsar/bin/pulsar-admin namespaces set-bookie-affinity-group "$ns_name" --primary-group "$REGION_NAME")
                        affinity_rc=$(echo $?)
                        if [[ "$affinity_rc" -ne 0 ]]; then
                            logger "warn" "Setting of bookie affinity returned non-zero return code: \"${affinity_rc}\" for namespace \"$ns_name\". Trying again."
                        else
                            logger "info" "Bookie Affinity set successfully for namespace: \"$ns_name\"."
                            break
                        fi
                    done
                else
                    logger "info" "Bookie affinity for \"$ns_name\" is already set to \"$current_bookie_affinity\". Not resetting it."
                fi
            done       
        done
    }
    
    function validate_zone_names() {
        zoneNames=$(echo "$NODE_INFO" | jq '[.[].zoneName] | unique')
        logger "info" "Available unique zone Names: $zoneNames"
  
        no_of_zones=$(echo "$zoneNames" | jq length)
        logger "info" "Number of available zones: $no_of_zones"
        if [[ no_of_zones -le 1 ]]; then
            AVAILABLE_ZONE_NAME=$(echo "$zoneNames" | jq .[0])
            logger "warn" "All nodes are in same zone(${AVAILABLE_ZONE_NAME}). Skipping the execution of Set Bookie Rack script."
            exit 0
        fi
    }

    function main() {
        logger "info" "************************Starting Set Bookie Rack Script*****************"
        logger "info" "Extracting Bookeeper and Node Information"
        get_bookkeeper_nodes
        logger "info" "Extracting Node and Zone information"
        get_node_zone_info
        logger "info" "Validating Zone information"
        validate_zone_names
        logger "info" "Extracting bookie HostNames"
        get_bookie_hostnames
        logger "info" "Mapping Bookkeeper and Zone information"
        get_bookie_region_zone_map
        logger "info" "Extracting number of regions"
        get_unique_region_name
        logger "info" "Setting Bookie Rack"
        set_bookie_rack
        logger "info" "Setting Bookie Affinity"
        set_bookie_affinity
        logger "info" "*****************Set Bookie Script Completed************************"
    }

    main
