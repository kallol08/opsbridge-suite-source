{{/* # */}}
{{/* # Licensed to the Apache Software Foundation (ASF) under one */}}
{{/* # or more contributor license agreements.  See the NOTICE file */}}
{{/* # distributed with this work for additional information */}}
{{/* # regarding copyright ownership.  The ASF licenses this file */}}
{{/* # to you under the Apache License, Version 2.0 (the */}}
{{/* # "License"); you may not use this file except in compliance */}}
{{/* # with the License.  You may obtain a copy of the License at */}}
{{/* # */}}
{{/* #   http://www.apache.org/licenses/LICENSE-2.0 */}}
{{/* # */}}
{{/* # Unless required by applicable law or agreed to in writing, */}}
{{/* # software distributed under the License is distributed on an */}}
{{/* # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY */}}
{{/* # KIND, either express or implied.  See the License for the */}}
{{/* # specific language governing permissions and limitations */}}
{{/* # under the License. */}}
{{/* # */}}

{{ include "pulsar.setCurrentComponentFull" (set . "currentComponent" "cosoinit") -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .currentComponentFull }}-configmap"
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
data:
  coso-init.sh: |
{{/*    #!/bin/bash*/}}

    isClient=${2:-true}

    function logger(){
        x=$?; res=${*};
        if [[ "$x" -eq 0 ]]; then
            if [[ ! -z "$res" ]]; then
                echo -e "[`date`] - #INFO: $res" 2>&1 ;
            fi
        else
            echo -e "[`date`] - ERROR:$res" 2>&1 ;
            exit 1;
        fi;
    }

    function logger_warn(){
        x=$?; res=${*};
        if [[ "$x" -eq 0 ]]; then
            if [[ ! -z "$res" ]]; then
                echo -e "[`date`] - #INFO: $res" 2>&1 ;
            fi
        else
            echo -e "[`date`] - #WARNING: $res" 2>&1 ;
        fi;
    }

    if [ -z "${HOME}" -a -z "${RANDFILE}" ]
    then
        export RANDFILE=/pulsar/data/.rnd
    fi

    export PULSAR_HOME=/pulsar
    export PULSAR_SSLHOME=$PULSAR_HOME/ssl
    export VERTX_CACHE_DIR=/pulsar/tmp/vertx-cache
    export OPTS=-Dvertx.cacheDirBase=${VERTX_CACHE_DIR}
    export PULSAR_SSLCUSTOM_HOME=$PULSAR_SSLHOME/custom
    export LOG_DIR=/pulsar/logs/${POD_NAMESPACE}/${POD_NAMESPACE}__${POD_NAME}__${CONTAINER_NAME}__${NODE_NAME}
    mkdir -p ${VERTX_CACHE_DIR}
    mkdir -p $LOG_DIR
    chmod 700 $LOG_DIR

    {{/* # Clean ssl directory in case of restart */}}
    rm -rf /pulsar/ssl/vault/* /pulsar/ssl/store/*

    {{/* # Move staged configs into the mutable mounted conf directory */}}
    cd /pulsar/stage-conf
    if [ -f /pulsar/conf/log4j2.yaml ]; then
        cp -R `ls /pulsar/stage-conf | grep -v log4j2.yaml` /pulsar/conf/.
    else
        cp -R /pulsar/stage-conf/. /pulsar/conf/.
    fi
    cd /pulsar
    echo 'pulsar application logs set to ' $LOG_DIR
    id


    logger "$(mkdir -p /pulsar/ssl/vault/ 2>&1)"

    logger "$(cp -R /var/run/secrets/boostport.com/* /pulsar/ssl/vault 2>&1)"

    randompass="pulsar$RANDOM"
    export kopSslKeystorePassword=$randompass
    export kopSslKeyPassword=$randompass
    export kopSslTruststorePassword=$randompass
    export PULSAR_PREFIX_clientTrustStorePassword=$randompass
    export PULSAR_PREFIX_tlsKeystorePassword=$randompass
    export PULSAR_PREFIX_tlsTrustStorePassword=$randompass
    export PULSAR_PREFIX_zookeeper_ssl_keyStore_password=$randompass
    export PULSAR_PREFIX_zookeeper_ssl_trustStore_password=$randompass



    export PULSAR_PREFIX_tlsKeyStorePasswordPath=/pulsar/ssl/store/bookie.keystore.passwd
    export PULSAR_PREFIX_tlsTrustStorePasswordPath=/pulsar/ssl/store/bookie.truststore.passwd
    export PULSAR_PREFIX_clientTrustStorePasswordPath=/pulsar/ssl/store/client.truststore.passwd




    {{/* # SSL Configuration */}}
    logger "$(echo "SSL configuration" 2>&1)"

    export PULSAR_SSL_CLIENT_AUTH=$PULSAR_SSL_CLIENT_AUTH
    export KEYSTORE_TYPE=pkcs12
    export TRUSTSTORE_TYPE=$TRUSTSTORE_TYPE

    logger "$(mkdir -p $PULSAR_SSLHOME/store 2>&1)"

    logger "$(chmod 700 $PULSAR_SSLHOME/store/ 2>&1)"
    logger "$(chmod 700 $PULSAR_SSLHOME/vault/ 2>&1)"

    echo $randompass >> /pulsar/ssl/store/bookie.keystore.passwd
    echo $randompass >> /pulsar/ssl/store/bookie.truststore.passwd
    echo $randompass >> /pulsar/ssl/store/client.truststore.passwd

    logger "$(echo "SSL client authentication is $PULSAR_SSL_CLIENT_AUTH" 2>&1)"

    logger "$(echo "Creating KeyStore" 2>&1)"

    export KEYSTORE_CERTS_PATH=$PULSAR_SSLHOME/vault


    if [ -f $PULSAR_SSLCUSTOM_HOME/server.crt ] && [ -f $PULSAR_SSLCUSTOM_HOME/server.key ]; then
        $KEYSTORE_CERTS_PATH=$PULSAR_SSLCUSTOM_HOME
    elif [ -f $PULSAR_SSLHOME/vault/RE/server.crt ] && [ -f $PULSAR_SSLHOME/vault/RE/server.key ]; then
        export KEYSTORE_CERTS_PATH=$PULSAR_SSLHOME/vault/RE
    fi

    logger "$(openssl pkcs12 -export -in $KEYSTORE_CERTS_PATH/server.crt -inkey $KEYSTORE_CERTS_PATH/server.key -certfile $KEYSTORE_CERTS_PATH/server.crt -out $PULSAR_SSLHOME/vault/sourcekeystore.p12 -password pass:$randompass 2>&1)"
    keytool -importkeystore -srckeystore $PULSAR_SSLHOME/vault/sourcekeystore.p12 -srcstoretype pkcs12 -destkeystore $PULSAR_SSLHOME/store/keystore.p12 -deststoretype pkcs12 -srcstorepass $randompass -deststorepass $randompass -noprompt
    if [ $? -ne 0 ]
    then
        echo "[`date`] - ERROR:Error importing Keystore"
        exit 1
    fi




    {{/* # combine provided CA cert with Vault CA cert for Proxy */}}
    if [ -d $PULSAR_SSLCUSTOM_HOME/ca ]; then
        logger "$(echo "Combining CA certs for proxy ..." 2>&1)"
        {{/* # Concatenate all the certs onto one */}}
        awk '{print}' $PULSAR_SSLHOME/vault/trustedCAs/* $PULSAR_SSLCUSTOM_HOME/ca/* > $PULSAR_SSLHOME/combined_ca.crt
        if [ $? -ne 0 ]
        then
            echo "[`date`] - #WARNING: Error combining proxy certs."
        fi
    fi

    {{/* # modify env vars if external CA signed certs exist */}}
    logger "$(echo "Assigning external CA signed certs for Proxy..." 2>&1)"
    crtFilePath=""
    keyFilePath=""
    for file in $PULSAR_SSLHOME/external-ca-signed-cert/*
        do
            if [ -f $file ] && [[ $file =~ .+\.(crt|pem|cer|p12|pfx|p7b|p7c) ]]
            then
                if [ "$crtFilePath" ]
                then
                    echo "[`date`] - ERROR: more than one cert file in external CA signed certs"
                    exit 1
                fi
                crtFilePath=$file
            elif [ -f $file ] && [[ $file =~ .+\.(key|pri|p8|p8e|bin) ]]
            then
                if [ "$keyFilePath" ]
                then
                    echo "[`date`] - ERROR: more than one key file in external CA signed certs"
                    exit 1
                fi
                keyFilePath=$file
            fi
        done
    if [ "$crtFilePath" -a "$keyFilePath" ]
    then
        export tlsCertificateFilePath=$crtFilePath
        export tlsKeyFilePath=$keyFilePath
    fi

    {{/* # Create client cert to trust for Broker */}}
    logger "$(echo "Combining CA certs for broker..." 2>&1)" 
    {{/* # Concatenate RE and RID certs onto one */}}
    awk '{print}' $PULSAR_SSLHOME/vault/trustedCAs/* > $PULSAR_SSLHOME/broker_client_ca.crt
    if [ $? -ne 0 ]
    then
        echo "[`date`] - #WARNING: Error combining broker certs."
    fi

    for file in $PULSAR_SSLHOME/vault/trustedCAs/*.crt
        do
           if [[ -f ${file} ]]; then
               i=$((i+1))
               echo "Importing CA certificate $file."
               keytool -import -file $file -alias vaultca$i -keystore $PULSAR_SSLHOME/store/truststore.p12 -storepass $randompass -noprompt -storetype pkcs12
           fi
        done

    if [ $? -ne 0 ]
    then
        echo "[`date`] - ERROR:Error generating Keystore"
        exit 1
    fi

    {{/* # octane issue 1180984 - Do not Split and add certs in issue_ca.crt */}}
    {{/* # Instead, Add specific certs in trustedCAs, which are the original certs merged into issue_ca.crt */}}
    {{/* # The issue here is that csplit on "BEGIN CERTIFICATE" might cause any leading metadata at the */}}
    {{/* # start of the certificate, such as Bag Attributes, to get split out into its own (invalid) cert */}}
    {{/* # and an attempt to add that would cause keytool import to fail */}}

    for file in $PULSAR_SSLHOME/vault/trustedCAs/*.crt
      do
        if [[ -f ${file} ]]; then
           i=$((i+1))
           echo "Importing CA certificate $file."
           keytool -importcert -alias ca$i -trustcacerts -file $file -keystore ${PULSAR_SSLHOME}/store/truststore.p12 -storepass $randompass -noprompt -storetype pkcs12
        fi
      done

    if [ -f "$PULSAR_SSLHOME/vault/trustedCAs/CUS_ca.crt" ]; then
      keytool -importcert -alias CUS_ca -trustcacerts -file $PULSAR_SSLHOME/vault/trustedCAs/CUS_ca.crt -keystore ${PULSAR_SSLHOME}/store/truststore.p12 -storepass $randompass -noprompt -storetype pkcs12
    fi

{{- if .Values.zookeeper.configData.sslQuorum }}
    echo $'\n' >> conf/pulsar_env.sh
    echo "PULSAR_EXTRA_OPTS=\"\${PULSAR_EXTRA_OPTS} -Dzookeeper.ssl.quorum.keyStore.location=${PULSAR_SSLHOME}/store/keystore.p12 -Dzookeeper.ssl.quorum.keyStore.password=${randompass} -Dzookeeper.ssl.quorum.trustStore.location=${PULSAR_SSLHOME}/store/truststore.p12 -Dzookeeper.ssl.quorum.trustStore.password=${randompass} -Dzookeeper.ssl.quorum.hostnameVerification=false \"" >> conf/pulsar_env.sh
    echo $'\n' >> conf/pulsar_env.sh

    echo $'\n' >> conf/pulsar_env.sh
    echo "BOOKIE_EXTRA_OPTS=\"\${BOOKIE_EXTRA_OPTS} -Dzookeeper.ssl.quorum.keyStore.location=${PULSAR_SSLHOME}/store/keystore.p12 -Dzookeeper.ssl.quorum.keyStore.password=${randompass} -Dzookeeper.ssl.quorum.trustStore.location=${PULSAR_SSLHOME}/store/truststore.p12 -Dzookeeper.ssl.quorum.trustStore.password=${randompass} -Dzookeeper.ssl.quorum.hostnameVerification=false \"" >> conf/pulsar_env.sh
    echo $'\n' >> conf/pulsar_env.sh
{{- end }}

    if [[ "x${isClient}" == "xtrue" ]]; then
        echo "update tls client settings ..."
{{- if and .Values.tls.enabled .Values.tls.zookeeper.enabled }}
        echo $'\n' >> conf/pulsar_env.sh
        echo "PULSAR_EXTRA_OPTS=\"\${PULSAR_EXTRA_OPTS} -Dzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty -Dzookeeper.client.secure=true -Dzookeeper.ssl.keyStore.location=${PULSAR_SSLHOME}/store/keystore.p12 -Dzookeeper.ssl.keyStore.password=${randompass} -Dzookeeper.ssl.trustStore.location=${PULSAR_SSLHOME}/store/truststore.p12 -Dzookeeper.ssl.trustStore.password=${randompass}\"" >> conf/pulsar_env.sh
        echo $'\n' >> conf/pulsar_env.sh
        echo $'\n' >> conf/bkenv.sh
        echo "BOOKIE_EXTRA_OPTS=\"\${BOOKIE_EXTRA_OPTS} -Dzookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty -Dzookeeper.client.secure=true -Dzookeeper.ssl.keyStore.location=${PULSAR_SSLHOME}/store/keystore.p12 -Dzookeeper.ssl.keyStore.password=${randompass} -Dzookeeper.ssl.trustStore.location=${PULSAR_SSLHOME}/store/truststore.p12 -Dzookeeper.ssl.trustStore.password=${randompass}\"" >> conf/bkenv.sh
        echo $'\n' >> conf/bkenv.sh
{{- end }}
{{- if and .Values.tls.broker.enabled .Values.components.kop }}
        echo $'\n' >> conf/broker.conf
        echo "kopSslKeystorePassword=${randompass}" >> conf/broker.conf
        echo $'\n' >> conf/broker.conf
        echo "kopSslKeyPassword=${randompass}" >> conf/broker.conf
        echo $'\n' >> conf/broker.conf
        echo "kopSslTruststorePassword=${randompass}" >> conf/broker.conf
{{- end }}
    else
        echo "update tls client settings ..."
{{- if and .Values.tls.enabled .Values.tls.zookeeper.enabled }}
        echo $'\n' >> conf/pulsar_env.sh
        echo "PULSAR_EXTRA_OPTS=\"\${PULSAR_EXTRA_OPTS} -Dzookeeper.ssl.keyStore.location=${PULSAR_SSLHOME}/store/keystore.p12 -Dzookeeper.ssl.keyStore.password=${randompass} -Dzookeeper.ssl.trustStore.location=${PULSAR_SSLHOME}/store/truststore.p12 -Dzookeeper.ssl.trustStore.password=${randompass}\"" >> conf/pulsar_env.sh
        echo $'\n' >> conf/pulsar_env.sh
{{- end }}
    fi
    echo ${randompass} > conf/password
