{{/* # */}}
{{/* # Licensed to the Apache Software Foundation (ASF) under one */}}
{{/* # or more contributor license agreements.  See the NOTICE file */}}
{{/* # distributed with this work for additional information */}}
{{/* # regarding copyright ownership.  The ASF licenses this file */}}
{{/* # to you under the Apache License, Version 2.0 (the */}}
{{/* # "License"); you may not use this file except in compliance */}}
{{/* # with the License.  You may obtain a copy of the License at */}}
{{/* # */}}
{{/* #   http://www.apache.org/licenses/LICENSE-2.0 */}}
{{/* # */}}
{{/* # Unless required by applicable law or agreed to in writing, */}}
{{/* # software distributed under the License is distributed on an */}}
{{/* # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY */}}
{{/* # KIND, either express or implied.  See the License for the */}}
{{/* # specific language governing permissions and limitations */}}
{{/* # under the License. */}}
{{/* # */}}
{{/* # supportExpressLoad parameter is present and the value is true, then run this job */}}
{{- if (eq (.Values.global.di.supportExpressLoad | toString) "true") }}
{{ include "pulsar.setCurrentComponentFull" (set . "currentComponent" .Values.sources_upgrade.component) -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ template "pulsar.fullname" . }}-minio-connector-post-upgrade-job-{{ randAlphaNum 7 | lower }}"
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
spec:
  template:
    metadata:
      annotations:
        pod.boostport.com/vault-init-container: install
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.global.securityContext.user | int64 }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}
        fsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}        
        seccompProfile:
          type: RuntimeDefault
      {{/* # The init containers will follow the queue from the zookeeper for the node to run on. */}}
      {{- with ( coalesce .Values.nodeSelector .Values.global.nodeSelector ) }}
      nodeSelector:
        {{ toYaml . }}
      {{- end }}
      serviceAccount: {{ .Values.deployment.rbac.brokerServiceAccount | default "itomdipulsar-broker-sa" }}
      serviceAccountName: {{ .Values.deployment.rbac.brokerServiceAccount | default "itomdipulsar-broker-sa" }}
      initContainers:
      {{- include "helm-lib.waitForVault" . | nindent 6 }}
      {{- $pulsarfullname := (include "pulsar.fullname" .) }}
      {{- $zkcompname := .Values.zookeeper.component -}}
      {{- $certNames := printf "%s-%s" $pulsarfullname $zkcompname -}}
      {{- include "helm-lib.containers.vaultInit" (dict "certNames" $certNames "Values" .Values) | nindent 6 }}      

      {{/* # This initContainer will wait for bookkeeper initnewcluster to complete */}}
      {{/* # before initializing pulsar metadata */}}
      - name: pulsar-bookkeeper-verify-clusterid
        securityContext:
          runAsNonRoot: true
          runAsUser: {{ .Values.global.securityContext.user | int64 }}
          runAsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}                
          seccompProfile:
            type: RuntimeDefault            
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.pulsar.image }}:{{ .Values.pulsar.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        resources:
          {{ toYaml .Values.initContainers.pulsar_bookkeeper_verify_clusterid.resources | nindent 10 }}
        command: ["sh", "-c"]
        args:
        - |
          source bin/coso-init.sh
          bin/apply-config-from-env.py conf/bookkeeper.conf
          until bin/bookkeeper shell whatisinstanceid
          do
            sleep 3
          done
        envFrom:
        - configMapRef:
            name: "{{ template "pulsar.fullname" . }}-{{ .Values.bookkeeper.component }}"
        volumeMounts:
        {{- include "pulsar.coso.init.volumeMounts" . | nindent 8 }}
        {{- include "pulsar.broker.certs.volumeMounts" . | nindent 8 }}
        - name: tmp
          mountPath: /pulsar/tmp
        - name: conf
          mountPath: /pulsar/conf
        - name: logs
          mountPath: /pulsar/logs
        - name: ssl
          mountPath: /pulsar/ssl
        - name: vault-token
          mountPath: /var/run/secrets/boostport.com
      containers:
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.sources_upgrade.component }}"
        securityContext:       
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.pulsar.image }}:{{ .Values.pulsar.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
      {{- if .Values.pulsar_metadata.resources }}
        resources:
          {{ toYaml .Values.minioHook.resources | nindent 10 }}
      {{- end }}
        command: ["sh", "-c"]
        args:
          - |
            source bin/coso-init.sh
            bin/apply-config-from-env.py conf/client.conf
            bin/apply-config-from-env.py conf/bookkeeper.conf
            TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
            di_tenant="{{ .Values.global.di.tenant }}"
            di_deployment="{{ .Values.global.di.deployment }}"
            pulsar_tenant=public
            updatedReplicas=0
            availableReplicas=0
            replicas={{ .Values.broker.replicaCount }}
            echo "number of replicas $replicas"
            namespace={{ .Release.Namespace }}
            echo "namespace is $namespace"
            {{/* # Avoid startup race condition with broker upgrade */}}
            sleep 5
            until [[  $updatedReplicas  ==  $replicas  && $availableReplicas == $replicas ]]
            do
              curl -X GET --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
                   -H "Authorization: Bearer $TOKEN"  -H 'Accept: application/json' \
                   https://kubernetes.default.svc.cluster.local/apis/apps/v1/namespaces/$namespace/deployments/itomdipulsar-broker > /tmp/broker_stats.json 2>/dev/null

              updatedReplicas=$(cat /tmp/broker_stats.json| jq .status.updatedReplicas)
              if [ "$updatedReplicas" == "null" ]
              then
                updatedReplicas=0
              fi
              availableReplicas=$(cat /tmp/broker_stats.json| jq .status.availableReplicas)
              if [ "$availableReplicas" == "null" ]
              then
                availableReplicas=0
              fi

              if [[ $updatedReplicas == $replicas  &&  $availableReplicas == $replicas ]]
              then
                echo " broker deployment upgraded"
              else
                echo " Waiting for Broker deployment to be  upgraded: ${updatedReplicas}/${replicas} available: ${availableReplicas}/${replicas}"
                sleep 30
              fi
            done
            if [[ $updatedReplicas ==  $replicas  &&  $availableReplicas == $replicas ]]
            then
              bin/pulsar-admin sources get  --name ${di_tenant} --tenant ${pulsar_tenant} >/tmp/sources.json
              if [ $? == 0 ]
              then
                replicas=1
                until [ "$replicas" -eq 0 ]
                do
                    bin/pulsar-admin sources stop --name ${di_tenant} --tenant ${pulsar_tenant} --namespace ${di_deployment}
                    echo "Waiting for statefulset(pf-${pulsar_tenant}-${di_deployment}-${di_tenant}) to be removed. replicas: $replicas"
                    sleep 30
                    curl -X GET --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\
                         -H "Authorization: Bearer $TOKEN"  -H 'Accept: application/json' \
                         https://kubernetes.default.svc.cluster.local/apis/apps/v1/namespaces/$namespace/statefulsets/pf-${pulsar_tenant}-${di_deployment}-${di_tenant} > /tmp/sts.json 2>/dev/null
                    notFound=$(cat /tmp/sts.json|jq .code)
                    echo "statefulset statuscode $notFound"
                    if [ $notFound != "404" ] 
                    then
                        replicas=$(cat /tmp/sts.json|jq .status.replicas)
                        echo "statefulset replica $replicas"
                       if [ "${replicas}" == "[]" ] 
                       then
                         replicas=0
                       fi
                    else
                       replicas=0
                   fi
                   {{/* # because of inconsistent behavior in pulsar client , below condition has been placed.For the very first time pulsar admin sources stop command is not working. */}}
                   if [ $replicas != "0" ]
                   then
                     echo "Waiting for statefulset(pf-${pulsar_tenant}-${di_deployment}-${di_tenant}) to be removed and trying to start again. replicas: $replicas"
                     bin/pulsar-admin sources start --name ${di_tenant} --tenant ${pulsar_tenant} --namespace ${di_deployment}
                   fi  
                done
                bin/pulsar-admin sources start --name ${di_tenant} --tenant ${pulsar_tenant} --namespace ${di_deployment} 
              else
                echo "No sources found with name ${di_tenant}"
              fi
            fi
        envFrom:
        - configMapRef:
            name: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}-post-upgrade"
        volumeMounts:
        {{- include "pulsar.coso.init.volumeMounts" . | nindent 8 }}
        - name: tmp
          mountPath: /pulsar/tmp
        - name: conf
          mountPath: /pulsar/conf
        - name: logs
          mountPath: /pulsar/logs
        - name: ssl
          mountPath: /pulsar/ssl
        - name: vault-token
          mountPath: /var/run/secrets/boostport.com
        {{- include "pulsar.broker.certs.volumeMounts" . | nindent 8 }}
      volumes:
      {{- include "pulsar.coso.init.volumes" . | nindent 6 }}
      - name: tmp
        emptyDir: {}
      - name: conf
        emptyDir: {}
      - name: ssl
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: vault-token
        emptyDir: {}
      {{- include "pulsar.broker.certs.volumes" . | nindent 6 }}
      restartPolicy: OnFailure
{{- end }}