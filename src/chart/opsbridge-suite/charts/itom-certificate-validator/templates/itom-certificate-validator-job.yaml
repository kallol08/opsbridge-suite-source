{{- if .Values.global.validateCertificate }}
apiVersion: batch/v1
kind: Job
metadata:
  name: itom-certificate-validator-job
  namespace: {{ .Release.Namespace }}
  labels:
    app: itom-certificate-validator-job
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook-weight": "-500"     {{/* This needs to be the first pre-hook job running on install/upgrade */}}
spec:
  template:
    metadata:
      labels:
        name: itom-certificate-validator-job
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
    spec:
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount }}
      restartPolicy: Never
      securityContext:
        runAsUser: {{ .Values.global.securityContext.user }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault

{{/* Default Kubernetes behavior creates symbolic links of the files being mounted through configmaps, init container added to copy only these files without the symbolic links to another empty directory. */}}
      containers:
        - name: itom-certificate-validator-job
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{.Values.certValidator.image }}:{{.Values.certValidator.imageTag }}
          imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            privileged: false
            capabilities:
              drop:
              - ALL
          volumeMounts:
            - name: database-cm
              mountPath: /var/run/secrets/db-certificates
          
            - name: apiclient-cm
              mountPath: /var/run/secrets/client-certificates

            - name: odl-secret
              mountPath: /var/run/secrets/odl-certificates

            - name: nginx-secret
              mountPath: /var/run/secrets/nginx-certificates

          resources:
          {{ toYaml .Values.resources | nindent 12 }}
          env:
            - name: externalAccessHost
              value: {{.Values.global.externalAccessHost | quote}}
            - name: keyType
              value: {{coalesce .Values.keyType "RSA,ECDSA" | quote}}
            - name: rsakeyLength
              value: {{coalesce .Values.rsaKeyLength "2048" | quote}}
            - name: dsakeyLength
              value: {{coalesce .Values.dsaKeyLength "256" | quote}}
            - name: keyUsage
              value: {{coalesce .Values.keyUsage "Digital_Signature" | quote}}
            - name: extendedKeyUsage
              value: {{coalesce .Values.extendedKeyUsage "TLS_Web_Server_auth" | quote}}
            - name: signatureHashAlgorithm
              value: {{coalesce .Values.signatureHashAlgorithm "SHA1,SHA256,SHA384,SHA512" | quote}} 
            - name: VALIDATION_JOB_ENABLED
              value: {{coalesce .Values.global.validateCertificate "true" | quote}}
            {{- if eq .Values.global.secretStorageName "opsbridge-suite-secret" }}
            - name: caCertificates
              valueFrom:
                configMapKeyRef:
                  name: opsb-{{ .Values.commonConfigmap }}
                  key: isCaCertPresent
            - name: authorizedClientCAs
              valueFrom:
                configMapKeyRef:
                  name: opsb-{{ .Values.commonConfigmap }}
                  key: isAuthClientCertPresent
            - name: useExternalCASignedCerts
              valueFrom:
                configMapKeyRef:
                  name: opsb-{{ .Values.commonConfigmap }}
                  key: isODLExternalCertPresent
            - name: ingressCertAndKey
              valueFrom:
                configMapKeyRef:
                  name: opsb-{{ .Values.commonConfigmap }}
                  key: isIngressCertAndKeyPresent
            {{- else if eq .Values.global.secretStorageName "nom-secret" }}
            - name: caCertificates
              valueFrom:
                configMapKeyRef:
                  name: nom-{{ .Values.commonConfigmap }}
                  key: isCaCertPresent
            - name: authorizedClientCAs
              valueFrom:
                configMapKeyRef:
                  name: nom-{{ .Values.commonConfigmap }}
                  key: isAuthClientCertPresent
            - name: useExternalCASignedCerts
              valueFrom:
                configMapKeyRef:
                  name: nom-{{ .Values.commonConfigmap }}
                  key: isODLExternalCertPresent
            - name: ingressCertAndKey
              valueFrom:
                configMapKeyRef:
                  name: nom-{{ .Values.commonConfigmap }}
                  key: isIngressCertAndKeyPresent
            {{- else }}
            - name: caCertificates
              valueFrom:
                configMapKeyRef:
                  name: opticone-{{ .Values.commonConfigmap }}
                  key: isCaCertPresent
            - name: authorizedClientCAs
              valueFrom:
                configMapKeyRef:
                  name: opticone-{{ .Values.commonConfigmap }}
                  key: isAuthClientCertPresent
            - name: useExternalCASignedCerts
              valueFrom:
                configMapKeyRef:
                  name: opticone-{{ .Values.commonConfigmap }}
                  key: isODLExternalCertPresent
            - name: ingressCertAndKey
              valueFrom:
                configMapKeyRef:
                  name: opticone-{{ .Values.commonConfigmap }}
                  key: isIngressCertAndKeyPresent
            {{- end }}

      nodeSelector: {}
      volumes:
        {{/* Mounting the configmap for the database certificates */}}
        - name: database-cm
          configMap:
            {{- if eq .Values.global.secretStorageName "opsbridge-suite-secret" }}
            name: {{ .Values.opsbDbCertConfigmap }}
            {{- else if eq .Values.global.secretStorageName "nom-secret" }}
            name: {{ .Values.nomDbCertConfigmap }}
            {{- else }}
            name: {{ .Values.opticoneDbCertConfigmap }}
            {{- end }}

        {{/* Mounting the configmap for API Client CA certificates */}}
        - name: apiclient-cm
          configMap:
            name: {{ .Values.apiClientCertConfigmap }}
            
        {{/* Mounting the secret for ODL Message Bus Custom certificates */}}
        - name: odl-secret
          secret: 
            {{- if eq .Values.global.secretStorageName "opsbridge-suite-secret" }}
            secretName: opsb-{{ .Values.odlSecret }}
            {{- else if eq .Values.global.secretStorageName "nom-secret" }}
            secretName: nom-{{ .Values.odlSecret }}
            {{- else }}
            secretName: opticone-{{ .Values.odlSecret }}
            {{- end }}

        {{/* Mounting the configmap for Ingress Controller certificates */}}
        - name: nginx-secret
          secret: 
            secretName: {{ .Values.nginxSecret }}

  backoffLimit: 0

{{- end}}
