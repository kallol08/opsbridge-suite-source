{{/* # */}}
{{/* # Copyright 2023 Open Text. */}}
{{/* # */}}
{{/* # The only warranties for products and services of Open Text and its affiliates and  */}}
{{/* # licensors (“Open Text”) are as may be set forth in the express warranty statements  */}}
{{/* # accompanying such products and services. Nothing herein should be construed as */}}
{{/* # constituting an additional warranty. Open Text shall not be liable for technical or */}}
{{/* # editorial errors or omissions contained herein. The information contained herein is  */}}
{{/* # subject to change without notice. */}}
{{/* # */}}
{{/* # Except as specifically indicated otherwise, this document contains confidential  */}}
{{/* # information and a valid license is required for possession, use or copying. If this work  */}}
{{/* # is provided to the U.S. Government, consistent with FAR 12.211 and 12.212, Commercial Computer  */}}
{{/* # Software, Computer Software Documentation, and Technical Data for Commercial Items are licensed to */}}
{{/* # the U.S. Government under vendor’s standard commercial license. */}}
{{/* # */}}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: itom-di-data-access
    app.kubernetes.io/managed-by: {{.Release.Name}}
    app.kubernetes.io/version: {{.Values.dataAccess.imageTag}}
    itom.microfocus.com/capability: itom-data-ingestion
    tier.itom.microfocus.com/backend: backend
  name: itom-di-data-access-dpl
  annotations:
    deployment.microfocus.com/default-replica-count: "1"
    deployment.microfocus.com/runlevel: UP
    {{- if and .Values.global.apiClient.authorizedClientCAs .Values.global.tlsTruststore }}
    configmap.reloader.stakater.com/reload: "{{ .Values.global.apiClient.authorizedClientCAs }},{{ .Values.global.tlsTruststore }}"
    {{- else if .Values.global.apiClient.authorizedClientCAs }}
    configmap.reloader.stakater.com/reload: "{{ .Values.global.apiClient.authorizedClientCAs }}"
    {{- else if .Values.global.tlsTruststore }}
    configmap.reloader.stakater.com/reload: "{{ .Values.global.tlsTruststore }}"
    {{- end }}
spec:
  replicas: {{ .Values.didataaccess.config.replicaCount }}
  selector:
    matchLabels:
      app: itom-di-data-access
  template:
    metadata:
      labels:
        app.kubernetes.io/name: itom-di-data-access
        app.kubernetes.io/managed-by: {{.Release.Name}}
        app.kubernetes.io/version: {{.Values.dataAccess.imageTag}}
        itom.microfocus.com/capability: itom-data-ingestion
        tier.itom.microfocus.com/backend: backend
        app: itom-di-data-access
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
        checksum/config: {{ include (print $.Template.BasePath "/data-access-configmap.yaml") . | sha256sum }}
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.global.securityContext.user }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }} 
        seccompProfile:
          type: RuntimeDefault        
      serviceAccount: {{ .Values.deployment.rbac.serviceAccount | default "itom-di-data-access-sa" }}
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount | default "itom-di-data-access-sa" }}
      {{- $labelValue := printf "app: itom-di-data-access" -}}
      {{- include "helm-lib.network.topologySpreadConstraints" (dict "labelValue" $labelValue "Values" .Values "Capabilities" .Capabilities) | nindent 6 }}
      {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: 30
      containers:
        - name: itom-di-data-access-cnt
          securityContext:     
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.dataAccess.image }}:{{ .Values.dataAccess.imageTag }}
          {{- if .Values.didataaccess.probe.startup.enabled }}
          startupProbe:
            exec:
              command:
              - "/dataaccess/bin/startup.sh"
            initialDelaySeconds: {{ .Values.didataaccess.probe.startup.initialDelaySeconds }}
            periodSeconds: {{ .Values.didataaccess.probe.startup.periodSeconds }}
            timeoutSeconds: {{ .Values.didataaccess.probe.startup.timeoutSeconds }}
            failureThreshold: {{ .Values.didataaccess.probe.startup.failureThreshold }}
            successThreshold: {{ .Values.didataaccess.probe.startup.successThreshold }}
          {{- end }}
          {{- if .Values.didataaccess.probe.liveness.enabled }}
          livenessProbe:
            exec:
              command:
              - "/dataaccess/bin/liveness.sh"
            initialDelaySeconds: {{ .Values.didataaccess.probe.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.didataaccess.probe.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.didataaccess.probe.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.didataaccess.probe.liveness.failureThreshold }}
            successThreshold: {{ .Values.didataaccess.probe.liveness.successThreshold }}
          {{- end }}
          {{- if .Values.didataaccess.probe.readiness.enabled }}
          readinessProbe:
            exec:
              command:
              - "/dataaccess/bin/readiness.sh"
            initialDelaySeconds: {{ .Values.didataaccess.probe.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.didataaccess.probe.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.didataaccess.probe.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.didataaccess.probe.readiness.failureThreshold }}
            successThreshold: {{ .Values.didataaccess.probe.readiness.successThreshold }}
          {{- end }}
          imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
          env:
          - name: gid
            value: {{ .Values.global.securityContext.fsGroup | quote }}
          - name: uid
            value: {{ .Values.global.securityContext.user | quote }}
          - name: EXTERNAL_ACCESS_HOST
            value: {{ .Values.global.externalAccessHost | quote }}
          - name: EXTERNAL_ACCESS_PORT
            value: {{ template "externalaccess.port" .}}
          - name: DATAACCESS_JVM_ARGS
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: dataaccess.jvm.args
          - name: DATAACCESS_VERTICA_INGESTION_SERVICE_NAME
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.ingestion.service.name
          - name: DATAACCESS_VERTICA_INGESTION_SERVICE_PORT
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.ingestion.service.port
          - name: DATAACCESS_VERTICA_DRIVER_CLASS_NAME
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.datasource.driver-class-name
          - name: DATAACCESS_VERTICA_USERNAME
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.datasource.username
          - name: DATAACCESS_VERTICA_CONNECTION_TIMEOUT
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.datasource.connection-timeout
          - name: DATAACCESS_RESOURCE_POOL
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: dataaccess.resource-pool
          - name: DATAACCESS_VERTICA_CONNECTION_MAX_RECONNECT_ATTEMPT_ON_FAILURE_DURING_STARTUP
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.connection.max-reconnect-attempt-on-failure-during-startup
          - name: DATAACCESS_VERTICA_CONNECTION_TIME_DELAY_BETWEEN_RETRIES_DURING_STARTUP
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.connection.time-delay-between-retries-during-startup
          - name: DATAACCESS_VERTICA_HOSTNAME
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.datasource.hostname
          - name: DATAACCESS_VERTICA_PORT
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.datasource.port
          - name: DATAACCESS_VERTICA_DATABASENAME
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.datasource.databasename
          - name: DATAACCESS_VERTICA_DATABASE_PASSWORD_KEY
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: vertica.datasource.password.key
          - name: DATAACCESS_CLIENT_AUTH_ENABLE
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: dataaccess.client.auth.enable
          - name: EXTERNAL_CA_SIGNED_CERTS_ENABLE
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: dataaccess.use.external.ca.signed.certs
          - name: SECURITY_AUTHORIZED_ROLES
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: dataaccess.security.authorizedRoles
          - name: TOKEN_CACHE_EXPIRY_TIME_IN_SECS
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: dataaccess.security.tokenCache.expiryTimeSeconds
          {{- if .Values.global.idm.idmServiceUrl }}
          - name: IDM_SERVICE_URL
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: dataaccess.security.idm.service.url
          {{- end }}
          - name: VERTICA_SSL_ENABLE
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: dataaccess.vertica.ssl.enable
          - name: DATAACCESS_VERTICA_INGESTION_TLS_ENABLE
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: dataaccess.vertica.ingestion.tls.enable
          - name: HIKARICP_CONNECTION_MAXIMUM_LIFETIME
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: hikaricp.connection.maximum.lifetime
          - name: HIKARICP_MINIMUM_IDLE_CONNECTIONS
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: hikaricp.minimum.idle.connections
          - name: HIKARICP_IDLE_SESSION_TIMEOUT
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: hikaricp.idle.session.timeout
          - name: HIKARICP_MAXIMUM_POOL_SIZE
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: hikaricp.maximum.pool.size
          - name: HIKARICP_CONNECTION_POOL_NAME
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: hikaricp.connection.pool.name
          - name: TIMEZONE
            valueFrom:
                configMapKeyRef:
                  name: itom-di-data-access-cm
                  key: timezone
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: CONTAINER_NAME
            value: data-access
          - name: LOGCONFIG_FROM_CONFIGMAP
            valueFrom:
              configMapKeyRef:
                name: itom-di-data-access-cm
                key: dataaccess.logconfig.from.configmap
          - name: DATAACCESS_SYSTEM_LEVEL_THROTTLE
            valueFrom:
               configMapKeyRef:
                 name: itom-di-data-access-cm
                 key: dataaccess.system.level.throttle
          - name: DATAACCESS_PERMISSIBLE_REQUEST_LIMIT
            valueFrom:
              configMapKeyRef:
                name: itom-di-data-access-cm
                key: dataaccess.permissible.request.limit
          - name: DATAACCESS_REQUEST_THROTTLE_TIME
            valueFrom:
              configMapKeyRef:
                name: itom-di-data-access-cm
                key: dataaccess.request.throttle.time
          - name: DATAACCESS_THROTTLE_MAX_CACHE_SIZE
            valueFrom:
              configMapKeyRef:
                name: itom-di-data-access-cm
                key: dataaccess.throttle.cache.size
          - name: DATAACCESS_EXPIRE_AFTER_ACCESS_TIME
            valueFrom:
              configMapKeyRef:
                name: itom-di-data-access-cm
                key: dataaccess.throttle.expire.afteraccess.time
          - name: JAVA_TLS_CIPHER_RECOMMENDED
            valueFrom:
              configMapKeyRef:
                name: itom-di-data-access-cm
                key: dataaccess.java.tls.ciphers.recommended
          - name: JAVA_TLS_CIPHER_OPTIONAL
            valueFrom:
              configMapKeyRef:
                name: itom-di-data-access-cm
                key: dataaccess.java.tls.ciphers.optional
          - name: JAVA_TLS_DEFAULT_JDK_CIPHER
            valueFrom:
              configMapKeyRef:
                name: itom-di-data-access-cm
                key:  dataaccess.java.tls.ciphers.useJDKDefault
          - name: DATAACCESS_SERVER_TLS_ENABLED_PROTOCOLS
            valueFrom:
              configMapKeyRef:
                name: itom-di-data-access-cm
                key: dataaccess.server.tls.enabled.protocols
          {{- if .Values.didataaccess.config.dataaccess.enableSecurityAudit }}
          - name: DATAACCESS_AUDIT_LOGS_ENABLED
            valueFrom:
              configMapKeyRef:
                name: itom-di-data-access-cm
                key: dataaccess.enable.security.audit
          {{- if .Values.didataaccess.config.dataaccess.securityAuditVolumeClaim }}
          - name: DATAACCESS_AUDIT_LOGS_PATH_PROVIDED
            value: "false"
          {{- else}}
          - name: DATAACCESS_AUDIT_LOGS_PATH_PROVIDED
            value: "true"
          {{- end }}
          {{- end }}

          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          ports:
          - containerPort: 8443
          volumeMounts:
          - name: di-data-access-log-volume
            mountPath: /dataaccess/log
          - name: vault-token
            mountPath: /var/run/secrets/boostport.com
          - name: cm-client-certs-volume
            mountPath: /dataaccess/ssl/api-client-cas
          - name: cm-server-certs-volume
            mountPath: /dataaccess/ssl/server-cas
          - name: servercert-secret-volume
            mountPath: /dataaccess/ssl/external-ca-signed-cert
          - name: cm-logback
            mountPath: /dataaccess/app-conf/
          {{- if (eq (.Values.didataaccess.config.dataaccess.enableSecurityAudit | toString) "true") }}
          {{- if .Values.didataaccess.config.dataaccess.securityAuditVolumeClaim }}
          - name: di-data-access-audit-log-volume
            mountPath: /dataaccess/audit-log
          {{- end }}
          {{- end }}
        {{- include "helm-lib.containers.vaultRenew" (dict "Values" .Values) | nindent 8 }}        
      initContainers:
      {{- include "helm-lib.waitForVault" . | nindent 6 }}
      - name: waitfor-vertica-service
        {{- if (eq (.Values.global.vertica.embedded | toString) "true") }}
        {{- $vh := "itom-di-vertica-svc" }}
        {{- $vp := "5444" -}}
        {{- $fvnode := "itom-di-vertica-svc" }}
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.toolsBase.image }}:{{ .Values.global.toolsBase.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        command: [ "sh", "-c", "until nc -z {{$fvnode}} {{$vp}} -w 5 ; do echo waiting for {{$fvnode}}:{{$vp}}...; sleep 5; done; exit 0"]
        resources:
          {{- include "dataaccess.initContainers.resources" . | nindent 10 }}
        securityContext:
          runAsNonRoot: true
          runAsUser: {{ .Values.global.securityContext.user }}
          runAsGroup: {{ .Values.global.securityContext.fsGroup }}
          allowPrivilegeEscalation: false
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop:
            - ALL
        {{- else -}}
        {{- $vh := .Values.global.vertica.host }}
        {{- $vp := .Values.global.vertica.port }}
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.toolsBase.image }}:{{ .Values.global.toolsBase.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        command: [ "sh", "-c", "cmd=''; vh_local={{$vh}}; vp_local={{$vp}}; for i in $(echo $vh_local | sed 's/,/ /g' | awk '{$1=$1};1'); do cmd=$(echo $cmd '|| nc -z '$i' '$vp_local' -w 5 '); done; cmd=${cmd:3}; echo 'command is : '$cmd''; until eval $(echo $cmd); do echo 'waiting for '$vh_local' with port '$vp_local' ... '; sleep 5; done; exit 0;"]
        resources:
          {{- include "dataaccess.initContainers.resources" . | nindent 10 }}
        securityContext:
          runAsNonRoot: true
          runAsUser: {{ .Values.global.securityContext.user }}
          runAsGroup: {{ .Values.global.securityContext.fsGroup }}
          allowPrivilegeEscalation: false
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop:
            - ALL
        {{- end }}
      {{- $daglhost := (include "dataaccess.global.externalAccessHost" .) }}
      {{- $dacloudea := (include "dataaccess.cloud.externalAccessHost" .) }}
      {{- $daea := (include "dataaccess.externalAccessHost" .) }}
      {{- $certNames := printf "Common_Name:%s,Additional_SAN:itom-di-data-access-svc.%s.svc.cluster.local/%s%s%s/itom-di-data-access-svc/itom-di-data-access-svc.%s/itom-di-data-access-svc.%s.svc" $daglhost .Release.Namespace $daglhost $dacloudea $daea .Release.Namespace .Release.Namespace -}}
      {{- include "helm-lib.containers.vaultInit" (dict "certNames" $certNames "Values" .Values) | nindent 6 }}
         
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
       
      {{- with ( coalesce .Values.nodeSelector .Values.global.nodeSelector ) }}
      nodeSelector:
        {{ toYaml . }}
      {{- end }}
      volumes:
      - name: di-data-access-log-volume
        {{- include "helm-lib.pvcStorage" (dict "claim" "logVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      - name: vault-token
        emptyDir: {}
      - name: cm-client-certs-volume
        projected:
          sources:
      {{- if .Values.didataaccess.config.dataaccess.apiClient.authorizedClientCAs }}
          - configMap:
              name: {{ .Values.didataaccess.config.dataaccess.apiClient.authorizedClientCAs | quote }}
      {{- else if .Values.global.apiClient.authorizedClientCAs }}
          - configMap:
              name: {{ .Values.global.apiClient.authorizedClientCAs | quote }}
      {{- end }}
      - name: servercert-secret-volume
        projected:
          sources:
      {{- if .Values.didataaccess.config.dataaccess.useExternalCASignedCerts }}
          - secret:
              {{- if .Values.didataaccess.config.dataaccess.caSignedServerCertSecretName }}
              name: {{ .Values.didataaccess.config.dataaccess.caSignedServerCertSecretName | quote }}
              {{- else }}
              name: {{ .Values.global.nginx.secretName | default "nginx-default-secret" | quote }}
              {{- end}}
      {{- end }}
      - name: cm-server-certs-volume
        projected:
          sources:
          - secret:
              name: data-access-secret
      {{- if .Values.global.tlsTruststore }}
          - configMap:
              name: {{ .Values.global.tlsTruststore | quote }}
      {{- end }}
      - name: cm-logback
        configMap:
          name: data-access-logback-cm
      {{- if (eq (.Values.didataaccess.config.dataaccess.enableSecurityAudit | toString) "true") }}
      {{- if .Values.didataaccess.config.dataaccess.securityAuditVolumeClaim }}
      - name: di-data-access-audit-log-volume
        persistentVolumeClaim:
          claimName: {{ .Values.didataaccess.config.dataaccess.securityAuditVolumeClaim }}
      {{- end }}
      {{- end }}
