# Copyright 2023 Open Text.

# The only warranties for products and services of Open Text and its affiliates
# and licensors ("Open Text") are as may be set forth in the express warranty
# statements accompanying such products and services. Nothing herein should be
# construed as constituting an additional warranty. Open Text shall not be
# liable for technical or editorial errors or omissions contained herein. The
# information contained herein is subject to change without notice.

deployment:
  rbac:
    serviceAccount: itom-opsb-cloud-cs-redis-sa
global:
  # REQUIRED: The external host name and port which will be used by the user to access BVD
  externalAccessHost:
  externalAccessPort:

  docker:
      # set the global.docker.registry and orgName to your internal Docker registry/org
    registry:
    orgName:
    imagePullSecret: ""
    imagePullPolicy:
  rbac:
    serviceAccountCreate: true
    roleCreate: true
  # User ID and group ID to run the BVD containers as
  securityContext:
    user:
    fsGroup:

  # persistence.enabled=true means that the PVCs are expected to be dynamically created by the composition chart.
  # Otherwise, persistence.dataVolumeClaim is a persistent volume claim for storing data files.
  # persistence.logVolumeClaim is a persistent volume claim for storing log files.
  # If all of the above are undefined, then temporary ephemeral storage will be created (only if isDemo=true)
  persistence:
    enabled:
    configVolumeClaim:
    dbVolumeClaim:

  # If isDemo is true, this will allow use of ephemeral storage and other POC aspects.
  isDemo:

  idm:
    transportUser:
    transportUserKey:
    # The name of a user which can be used by other services to communicate with BVD.
    # It automatically gets administrative privileges assigned.
    integrationUser:
    integrationUserKey:
    # If IDM external port is not equal to global.externalAccessPort (default scenario),
    # then we need to inject that value
    internalPort:
    externalAccessPort:
    serviceName:
  vault:
    realmList: "RE:365"

  # global image references
  vaultRenew:
    image:
    imageTag:
  vaultInit:
    image:
    imageTag:
  busybox:
    image:
    imageTag:
  itomRedis:
    image:
    imageTag:
  toolsBase:
    image: itom-tools-base
    imageTag: 1.1.0-0011
  prometheus:
    deployPrometheusConfig: true      #true = deploy scraping rules (ServiceMonitor, PodMonitor) and alerts (PrometheusRule)
    deployGrafanaConfig: true         #true = deploy configmaps defining the Grafana dashboards
    prometheusSelector:               #define the label(s) that Prometheus looks for when discovering rules.
      prometheus_config: "1"
    grafanaSelector:                  #define the label(s) that Grafana looks for when discovering dashboards.
      grafana_dashboard: "1"
    

# Assigning pods to cluster nodes
nodeSelector: {}

tolerations: []

affinity: {}

params:
  # DEBUG/Logging level. Default logging level is bvd:error*,bvd:audit*
  debug:



  prometheus:
    deployPrometheusConfig: true      #true = deploy scraping rules (ServiceMonitor, PodMonitor) and alerts (PrometheusRule)
    deployGrafanaConfig: true         #true = deploy configmaps defining the Grafana dashboards
    prometheusSelector:               #define the label(s) that Prometheus looks for when discovering rules.
      prometheus_config: "1"
    grafanaSelector:                  #define the label(s) that Grafana looks for when discovering dashboards.
      grafana_dashboard: "1"
#####################
# Image definitions
#####################
redis:
  replicaCount: 1
  resources:
    requests:
      cpu: 0.1
      memory: 1Gi
    limits:
      memory: 2Gi
      cpu: 2
  redisdbcount: 4
