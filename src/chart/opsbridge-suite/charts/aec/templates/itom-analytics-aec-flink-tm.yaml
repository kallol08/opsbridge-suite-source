apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.microfocus.com/runlevel: UP
    configmap.reloader.stakater.com/reload: "itom-analytics-aec-pipeline-cm,itom-analytics-config"
  name: itom-analytics-aec-pipeline-tm
  namespace: {{ .Release.Namespace }}
  labels:
    {{- template "aec.defaultLabels" (dict "NameSuffix" "aec-pipeline-tm" "Version" .Values.aecImages.flinkPipeline.imageTag "Component" "aec-flink" "HelmRelease" .Release.Name "Chart" .Chart) }}
spec:
  replicas: {{ .Values.initialFlinkReplicas }}
  selector:
    matchLabels:
      app: itom-analytics-aec-pipeline-tm
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: itom-analytics-aec-pipeline-tm
        itom.microfocus.com/capability: aiops
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
    spec:
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount }}
      securityContext:
        runAsUser: {{ .Values.global.securityContext.user }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
        runAsNonRoot: true
      initContainers:
      {{- include "helm-lib.containers.vaultInit" (dict "certNames" .Values.global.externalAccessHost "Values" .Values) | nindent 6 }}

      {{- include "helm-lib.waitFor" (dict "service" "itom-analytics-aec-flink-rest-svc" "port" .Values.deployment.flinkPipeline.clusterPorts.rest "Values" .Values) | nindent 6 }}
      containers:
      - name: task-manager
        image: {{ coalesce .Values.aecImages.flinkPipeline.dockerRegistry .Values.docker.registry .Values.global.docker.registry -}}
        / {{- coalesce .Values.aecImages.flinkPipeline.orgName .Values.docker.orgName .Values.global.docker.orgName -}}
        / {{- .Values.aecImages.flinkPipeline.image -}}
        : {{- .Values.aecImages.flinkPipeline.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        command:
        - /aec-entrypoint.sh
        args:
        - taskmanager
        resources:
          requests:
            {{- include "aec.flinkTaskManagerMemory" (dict "Values" .Values "Prefix" "memory" "Unit" "Mi") | indent 12 }}
            cpu: "2"
          limits:
            {{- include "aec.flinkTaskManagerMemory" (dict "Values" .Values "Prefix" "memory" "Unit" "Mi") | indent 12 }}
            cpu: {{ .Values.deployment.flinkPipeline.taskManagerResources.cpuLimit | quote }}
        livenessProbe:
          initialDelaySeconds: 120
          periodSeconds: 60
          timeoutSeconds: 30
          failureThreshold: 3
          exec:
            command:
              - /service/shlib/check-flink-job-status.sh
              - itom-analytics-aec-flink-rest-svc
              - "{{ .Values.deployment.flinkPipeline.clusterPorts.rest }}"
              - "00000000000000000000000000000000"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        {{- /* Pulsar */}}
        - name: PULSAR_TLS
          value: "true"
        - name: PULSAR_HOST
          value: {{ include "helm-lib.getDiPulsarProxyHost" . | default "itomdipulsar-proxy" }}
        - name: PULSAR_SERVICE_PORT
          value: {{ include "helm-lib.getDiPulsarProxyClientPort" . | default "6651" | quote }}
        {{ include "aec.setExternalPulsarCertEnv" . | indent 8 }}
        - name: "EVENT_TOPIC"
          valueFrom:
            configMapKeyRef:
              name: itom-analytics-config
              key: dataset-names.events
        - name: "INTERNAL_GROUP_EVENT_TOPIC"
          valueFrom:
            configMapKeyRef:
              name: itom-analytics-config
              key: dataset-names.internal-group-event-topic
        {{- /* Vertica */}}
        - name: "ITOM_ANALYTICS_SCHEMA"
          value: "itom_analytics_
                 {{- if hasKey .Values.global.di "tenant" }} {{- .Values.global.di.tenant -}} {{ else -}} provider {{- end }}_
                 {{- if hasKey .Values.global.ea "deployment" }} {{- .Values.global.ea.deployment -}} {{ else -}} {{ .Values.global.di.deployment }} {{- end }}"
        - name: "DI_DATA_SET_SCHEMA"
          value: "mf_shared_{{ if hasKey .Values.global.di "tenant" }} {{- .Values.global.di.tenant -}} {{ else -}} provider {{- end }}_{{ .Values.global.di.deployment }}"
        - name: "IS_VERTICA_EMBEDDED"
          value: "{{ .Values.global.vertica.embedded }}"
        - name: "EXTERNAL_VERTICA_HOSTNAMES"
          value: {{ .Values.global.vertica.host }}
        - name: "EXTERNAL_VERTICA_PORT"
          value: "{{ .Values.global.vertica.port }}"
        - name: "EXTERNAL_VERTICA_DB"
          value: {{ .Values.global.vertica.db }}
        - name: "EXTERNAL_VERTICA_USERNAME"
          value: {{ .Values.global.vertica.rwuser }}
        - name: "EXTERNAL_VERTICA_PASS_KEY"
          value: {{ .Values.global.vertica.rwuserkey }}
        - name: "AEC_BACKGROUND_POOL"
          value: {{ include "aec.backgroundResourcepool" . | quote }}
        - name: "EXTERNAL_VERTICA_TLS_MODE"
          {{- if .Values.global.vertica.tlsEnabled }}
          value: {{ .Values.deployment.vertica.tlsMode }}
          {{- else }}
          value: disable
          {{- end }}
        volumeMounts:
        {{- if (hasKey .Values.global "tlsTruststore") }}
        - name: vertica-cert-storage
          mountPath: /service/conf/vertica
          readOnly: true
        {{- end }}
        {{ include "aec.useExternalPulsarCertVolume" . | indent 8 }}
        - name: vault-token
          mountPath: /var/run/secrets/boostport.com
        - name: tmp-storage
          mountPath: /opt/flink/conf
        - name: conf-storage
          mountPath: /mnt/nfs/conf
          subPath: itom-analytics/aec-pipeline
        - name: log-storage
          mountPath: /opt/flink/log
          subPath: itom-analytics/aec-pipeline
        {{- /* config maps */}}
        - name: cm-flink
          mountPath: /opt/itom/conf
        - name: secret-storage
          mountPath: /opt/itom/tls
        {{- /* checkpoints and savepoints */}}
        - name: data-storage
          mountPath: /opt/flink/state
          subPath: itom-analytics/aec-pipeline/state
      {{- with ( coalesce .Values.nodeSelector .Values.global.nodeSelector ) }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      {{- if (hasKey .Values.global "tlsTruststore") }}
      - name: vertica-cert-storage
        configMap:
          name: {{ .Values.global.tlsTruststore }}
          optional: true
      {{- end }}
      {{ include "aec.defineExternalPulsarCertVolume" . | indent 6 }}
      - name: vault-token
        emptyDir:
          medium: Memory
      - name: tmp-storage
        emptyDir:
          medium: Memory
      - name: cm-flink
        configMap:
          name: itom-analytics-aec-flink-cm
      - name: secret-storage
        secret:
          secretName: {{ .Values.flinkPipeline.secretName }}
      - name: conf-storage
        {{- include "helm-lib.pvcStorage" (dict "claim" "configVolumeClaim" "Release" .Release "Template" .Template "Values" .Values) | nindent 8 }}
      - name: log-storage
        {{- include "helm-lib.pvcStorage" (dict "claim" "logVolumeClaim" "Release" .Release "Template" .Template "Values" .Values) | nindent 8 }}
      - name: data-storage
        {{- include "helm-lib.pvcStorage" (dict "claim" "dataVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
