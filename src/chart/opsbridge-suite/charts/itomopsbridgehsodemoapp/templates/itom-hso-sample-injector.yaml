{{ if .Values.global.monitoringService.demoMode -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.microfocus.com/default-replica-count: "1"
    deployment.microfocus.com/runlevel: UP
  name: itom-monitoring-hso-demo-app
  namespace: {{ .Release.Namespace }}
  labels:
    app: itom-monitoring-hso-demo-app
spec:
  replicas: {{ .Values.hsodemoapp.config.replicaCount }}
  selector:
    matchLabels:
      app: itom-monitoring-hso-demo-app
  template:
    metadata:
      labels:
        app: itom-monitoring-hso-demo-app
        service: itom-monitoring-hso-demo-app-svc
        app.kubernetes.io/name: itom-monitoring-hso-demo-app
        app.kubernetes.io/managed-by: {{.Release.Name}}
        app.kubernetes.io/version: {{ .Values.hsodemoapp.imageTag }}
        itom.microfocus.com/capability: monitoringService
        tier.itom.microfocus.com/backend: backend
        itom.microfocus.com/description: HSO_DemoApp
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
        prometheus.io/port: '8080'
        prometheus.io/scrape: 'true'
    spec:
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount }}
      securityContext:
        runAsUser: {{ .Values.global.securityContext.user }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
      initContainers:
        {{- include "helm-lib.waitFor" ( dict "service" "cs-redis" "port" "6380" "Values" .Values) | nindent 8 }}
        {{- $certNames := printf "Common_Name:itom-monitoring-hso-demo-app,Additional_SAN:itom-monitoring-hso-demo-app/itom-monitoring-hso-demo-app.%s/itom-monitoring-hso-demo-app.%s.svc.cluster.local/itom-monitoring-hso-demo-app/itom-monitoring-hso-demo-app-svc/itom-monitoring-hso-demo-app-svc.%s/itom-monitoring-hso-demo-app-svc.%s.svc.cluster.local,Secret:itom-monitoring-hso-demo-app-metrics-client,UpdateSecret:true,File_Name:server" .Release.Namespace .Release.Namespace .Release.Namespace .Release.Namespace -}}
        {{- include "helm-lib.containers.vaultInit" (dict "containerName" "install" "certNames" $certNames "Values" .Values) | nindent 8 }}
      containers:
        {{- include "helm-lib.containers.vaultRenew" (dict "containerName" "kubernetes-vault-renew" "Values" .Values) | nindent 8 }}
        - name: itom-monitoring-hso-demo-app
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.hsodemoapp.image }}:{{ .Values.hsodemoapp.imageTag }}
          imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
          livenessProbe:
            exec:
              command:
                - curl
                - https://localhost:40006/v1.0/health
                - --insecure
                - --key
                - /var/run/secrets/boostport.com/server.key
                - --cert
                - /var/run/secrets/boostport.com/server.crt
            failureThreshold: 3
            initialDelaySeconds: 20
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 5
          ports:
          - containerPort: 41006
            name: mcoll-sdic
            protocol: TCP
          - containerPort: 8080
            name: prometheus-sdic
            protocol: TCP
          resources:
            limits:
              cpu: 2
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 200Mi
          volumeMounts:
            - name: vault-token
              mountPath: /var/run/secrets/boostport.com
            - name: hso-demo-app-log-volume
              mountPath: /logs
              subPath: cloud-monitoring/hso-sample/injector
            - name: hso-demo-app-conf-volume
              mountPath: /content
              subPath: hso-sample-data-injector/content
            - name: hso-demo-app-data-volume
              mountPath: /data
              subPath: hso-sample-data-injector/data
            - name: conf
              mountPath: /config
          env:
          {{- if eq .Values.global.isUDCollectionEnabled true }}
          - name: "UD_PROBE_NAME"
            value: "itom-probe"
          - name: "CUSTOMER_ID"
            value: {{ .Values.global.cms.customerId | quote }}
          - name: "MONITORED_BY"
            value: {{ .Values.hsodemoapp.config.monitoredBy | default "MonitoringService" }}
          {{- if eq .Values.global.cms.externalOBM true }}
          - name: "UD_ENDPOINT"
            value: {{ required "Required value is not defined: udProtocol" .Values.global.cms.udProtocol }}://{{ required "Required value is not defined: udHostname" .Values.global.cms.udHostname }}:{{ required "Required value is not defined: port" .Values.global.cms.port }}
          - name: "UD_USER"
            value: {{ required "Required value is not defined: udUsername" .Values.global.cms.udUsername }}
          {{- else }}
          - name: "UD_ENDPOINT"
            value: https://{{ required "Required value is not defined: global.externalAccessHost" .Values.global.externalAccessHost }}:{{ required "Required value is not defined: global.externalAccessPort" .Values.global.externalAccessPort }}/ucmdb-server
          - name: "UD_USER"
            value: "UISysadmin"
          {{- end }}
          {{- end }}
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: MY_CONTAINER_NAME
            value: itom-monitoring-hso-demo-app
      {{- with (coalesce .Values.nodeSelector .Values.global.nodeSelector) }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:   
      - name: vault-token
        emptyDir: {}
      - name: hso-demo-app-log-volume
        {{- include "helm-lib.pvcStorage" (dict "claim" "logVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      - name: hso-demo-app-conf-volume
        {{- include "helm-lib.pvcStorage" (dict "claim" "configVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      - name: hso-demo-app-data-volume
        {{- include "helm-lib.pvcStorage" (dict "claim" "dataVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      - name: conf
        configMap:
          name: itom-monitoring-hso-demo-app-cm
          defaultMode: 0755
{{- end }}
