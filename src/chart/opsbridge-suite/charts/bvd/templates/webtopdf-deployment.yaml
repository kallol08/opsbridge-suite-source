apiVersion: apps/v1
kind: Deployment
metadata:
  name: webtopdf-deployment
  namespace: {{ .Release.Namespace }}
  annotations:
    deployment.microfocus.com/default-replica-count: "1"
    deployment.microfocus.com/runlevel: UP
  labels:
    service: webtopdf
    app.kubernetes.io/name: webbtopdf
    app.kubernetes.io/managed-by: bvd-config
    app.kubernetes.io/version: {{.Values.bvd.imageTag}}
    itom.microfocus.com/capability: bvd
    tier.itom.microfocus.com/webbtopdf: webbtopdf
spec:
  replicas: {{ .Values.bvd.webtopdf.replicaCount }}
  selector:
    matchLabels:
      service: webtopdf
  template:
    metadata:
      labels:
        service: webtopdf
        itom.microfocus.com/capability: bvd
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
        {{- if .Values.global.initSecrets }}
        secret.reloader.stakater.com/reload: "{{ .Values.global.initSecrets }}"
        {{- end }}
        {{- include "bvd.monitorConfigmap" (dict "Values" .Values) | nindent 8 }}
    spec:
      affinity: {{- include "bvd.affinity" (dict "deployment" "webtopdf-deployment" "Values" .Values) | nindent 10 }}
      serviceAccount: {{ .Values.deployment.rbac.serviceAccount }}
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount }}
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.global.securityContext.user | int64 }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}
        fsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}
        seccompProfile:
          type: RuntimeDefault

      initContainers:
      {{- include "helm-lib.waitFor" (dict "service" "bvd-controller" "port" 4000 "Values" .Values "addSecurityContext" true) | nindent 6 }}
      {{- $certName := printf "Common_Name:webtopdf,Additional_SAN:webtopdf.%s/webtopdf.%s.svc.cluster.local,File_Name:webtopdf" ( .Release.Namespace ) ( .Release.Namespace ) -}}
      {{- include "helm-lib.containers.vaultInit" (dict "certNames" $certName "Values" .Values) | nindent 6 }}

      containers:
      - name: webtopdf
        args:
        - webtopdf
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.bvd.image }}:{{ .Values.bvd.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /webtopdf
            port: 3000
            scheme: HTTPS
          initialDelaySeconds: 1
          periodSeconds: 1
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: {{ .Values.bvd.webtopdf.resources.requests.cpu }}
            memory: {{ .Values.bvd.webtopdf.resources.requests.memory }}
          limits:
            memory: {{ .Values.bvd.webtopdf.resources.limits.memory }}
            cpu: {{ .Values.bvd.webtopdf.resources.limits.cpu }}
        volumeMounts:
          - name: vault-token
            mountPath: /var/run/secrets/boostport.com
          {{ include "bvd.certificateSecret" (dict "args" "volumeMounts" "Values" .Values) }}
          {{ include "bvd.tlsTrustStore" (dict "args" "volumeMounts" "Values" .Values) }}
          {{ include "bvd.globalTlsTrustStore" (dict "args" "volumeMounts" "Values" .Values) }}
          {{ include "bvd.oracleWallet" (dict "args" "volumeMounts" "Values" .Values) }}
          - name: ips-reports
            mountPath: /var/ips/reports
            subPath: ips/reports
          - name: ips-bufferfiles
            mountPath: /var/ips/bufferFiles
            subPath: ips/bufferFiles
          - name: dshm
            mountPath: /dev/shm
          - name: bvd-temp-storage
            mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          privileged: false
          readOnlyRootFilesystem: true
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 3000
        env:
        - name: DEBUG
          value: "bvd:error*"
        - name: IDM_TRANSPORT_KEY
          value: {{ .Values.global.idm.transportUserKey | default "idm_transport_admin_password" | quote }}
        - name: IDM_TRANSPORT_USER
          value:  {{ .Values.global.idm.transportUser | default "transport_admin" | quote }}
        - name: IDM_ORGANIZATION
          valueFrom:
            configMapKeyRef:
              name: bvd-services-config
              key: suite.idm_organization
        - name: "EXTERNALNAME"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.externalname
        - name: "IDM_ADDR"
          valueFrom:
            configMapKeyRef:
              name: bvd-services-config
              key: suite.idm_addr
        - name: "BVD_IDM_INTEGRATION_USER"
          valueFrom:
            configMapKeyRef:
              name: bvd-services-config
              key: suite.integration_user
        - name: "BVD_IDM_INTEGRATION_USER_PASSWORD_KEY"
          valueFrom:
            configMapKeyRef:
              name: bvd-services-config
              key: suite.integration_user_password_key
        - name: REDIS_PWD_KEY
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.redispassword.key
        - name: "BVD_CONTEXT_ROOT"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.bvdContextRoot
        - name: "POSTGRES_PASSWORD_KEY"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbpassword.key
        - name: "BVD_DB_USER"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbuser
        - name: "BVD_DB_HOST"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbhost
        - name: "BVD_DB_PORT"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbport
        - name: "BVD_DB_NAME"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbname
        - name: "BVD_DB_SKIP_HOSTNAME_CHECK"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbskipHostnameCheck
              optional: true
        - name: "BVD_DB_TYPE"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbType
        - name: "BVD_DB_SID"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbsid
        - name: "BVD_DB_CONNECTION_STRING"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbConnectionString
        - name: "BVD_DB_CA_BASE64_KEY"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbCa.base64.key
        - name: "BVD_DB_CA_BASE64"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbCa.base64
        - name: "BVD_DB_USE_TLS"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.dbUseTLS
        - name: "BVD_USE_TLS"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.UseTLS
        - name: SYSTEM_USER_ID
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.systemUID
        - name: SYSTEM_GROUP_ID
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.systemGID
        - name: "NODE_OPTIONS"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.nodeOptions
        - name: "ENABLE_FIPS"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.enableFIPS
        - name: "EXPLORE_URL"
          value: "https://bvd-explore:4000"
        - name: "EXPLORE_CONTEXT_ROOT"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.exploreContextRoot
      {{- include "helm-lib.containers.vaultRenew" (dict "Values" .Values) | nindent 6 }}

      {{- with ( coalesce .Values.nodeSelector .Values.global.nodeSelector ) }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      volumes:
      - name: ips-reports
        {{- include "helm-lib.pvcStorage" (dict "claim" "configVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      - name: ips-bufferfiles
        {{- include "helm-lib.pvcStorage" (dict "claim" "dataVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      - name: vault-token
        emptyDir: {}
      {{ include "bvd.certificateSecret" (dict "args" "volumes" "Values" .Values) }}
      {{ include "bvd.tlsTrustStore" (dict "args" "volumes" "Values" .Values) }}
      {{ include "bvd.globalTlsTrustStore" (dict "args" "volumes" "Values" .Values) }}
      {{ include "bvd.oracleWallet" (dict "args" "volumes" "Values" .Values) }}
      - name: dshm
        emptyDir:
          medium: Memory
      - name: bvd-temp-storage
        emptyDir: {}
