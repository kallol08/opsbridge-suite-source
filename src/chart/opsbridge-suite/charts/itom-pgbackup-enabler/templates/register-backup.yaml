{{- if .Values.global.database.internal -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: itom-pgbackup-enabler-job-{{ randAlphaNum 7 | lower }}
spec:
  ttlSecondsAfterFinished: {{ .Values.global.jobs.ttlSecondsAfterFinished }}
  template:
    metadata:
      labels:
        name: itom-pgbackup-enabler-job
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}- {{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
    spec:
      securityContext:
        runAsUser: {{ .Values.global.securityContext.user }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
        supplementalGroups: [{{ .Values.global.securityContext.fsGroup }}]
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount }}
      restartPolicy: OnFailure
      initContainers:
        {{- include "helm-lib.waitForVault" . | nindent 6 }}
        {{- include "helm-lib.waitFor" (dict "service" "itom-pg-backup" "port" "8443" "Values" .Values) | nindent 6 }}
        {{- $idmHost := include "helm-lib.getInternalIdmHost" . | default "itom-idm-svc"  }}
        {{- $idmPort := include "helm-lib.getInternalIdmPort" . | default "18443" }}
        {{- include "helm-lib.waitFor" (dict "service" $idmHost "port" $idmPort "Values" .Values) | nindent 6 }}
        {{- include "helm-lib.containers.vaultInit" (dict "certNames" (printf "Common_Name:%s,Additional_SAN:itom-pgbackup-enabler-job" .Values.global.externalAccessHost .Release.Namespace .Release.Namespace) "Values" .Values) | nindent 6 }}
        {{- $embeddeddbHost := "itom-postgresql" }}
        {{- $embeddeddbPort := "5432" }}
      containers:
        - name: itom-register-embedded-databases
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.itomRegisterBackup.image }}:{{ .Values.itomRegisterBackup.imageTag }}
          securityContext:
            runAsUser: {{ .Values.global.securityContext.user }}
            runAsGroup: {{ .Values.global.securityContext.fsGroup }}
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
              - ALL
          env:
            - name: BACKUP_SVC_HOST
              value: {{.Values.registerBackup.pgbackupService}}
            - name: BACKUP_SVC_PORT
              value: {{.Values.registerBackup.pgbackupPort | quote }}
            - name: IDM_HOST
              value: {{ $idmHost | quote }}
            - name: IDM_PORT
              value: {{ $idmPort | quote }}
            - name: IDM_USER
              value: {{ .Values.global.idm.integrationUser | quote }}
            - name: IDM_PASSWORD_KEY
              value: {{ .Values.global.idm.integrationUserKey | quote }}
            - name: DB_TO_BACKUP
              value: {{.Values.registerBackup.dbListtoBackup}}
            - name: DB_PORT
              value: {{$embeddeddbPort | quote }}
            - name: APP_NAME
              value: {{.Values.registerBackup.appName}}
            - name: PG_BACKUP_URL
              value: {{.Values.registerBackup.backupregUrl}}
          resources:
          {{- toYaml .Values.resources | nindent 12 }}
          imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
          volumeMounts:
            - mountPath: /var/run/secrets/boostport.com
              name: vault-token
      volumes:
        - name: vault-token
          emptyDir: { }
  {{- end }}
