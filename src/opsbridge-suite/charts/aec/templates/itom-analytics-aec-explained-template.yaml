apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.microfocus.com/default-replica-count: "{{ .Values.replicaCount }}"
    deployment.microfocus.com/runlevel: UP
    reloader.stakater.com/auto: "true"
  name: itom-analytics-aec-explained
  namespace: {{ .Release.Namespace }}
  labels:
    {{- template "aec.defaultLabels" (dict "NameSuffix" "aec-explained" "Version" .Values.aecImages.aecExplainedService.imageTag "Component" "aec-explained-backend" "HelmRelease" .Release.Name "Chart" .Chart) }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: itom-analytics-aec-explained
  template:
    metadata:
      labels:
        app: itom-analytics-aec-explained
        itom.microfocus.com/capability: aiops
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
    spec:
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount }}
      securityContext:
        runAsUser: {{ .Values.global.securityContext.user }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
        runAsNonRoot: true
      initContainers:
      {{- include "helm-lib.containers.vaultInit" (dict "certNames" (printf "Common_Name:%s,Additional_SAN:itom-analytics-aec-explained-svc/itom-analytics-aec-explained-svc.%s.svc/itom-analytics-aec-explained-svc.%s.svc.cluster.local" .Values.global.externalAccessHost .Release.Namespace .Release.Namespace) "Values" .Values) | nindent 6 }}

      {{- include "helm-lib.waitFor" (dict "service" "itom-idm-svc" "port" "18443" "Values" .Values) | nindent 6 }}

      {{- include "helm-lib.waitFor" (dict "service" "bvd-explore" "port" "4000" "Values" .Values) | nindent 6 }}

      {{ include "aec.cacertBundler" . | nindent 6 }}

      {{ include "aec.waitForResourcePools" . | nindent 6 }}

      - name: aec-explained-ui-uploader
        image: {{ coalesce .Values.aecImages.aecExplainedUiUploader.dockerRegistry .Values.docker.registry .Values.global.docker.registry -}}
        / {{- coalesce .Values.aecImages.aecExplainedUiUploader.orgName .Values.docker.orgName .Values.global.docker.orgName -}}
        / {{- .Values.aecImages.aecExplainedUiUploader.image -}}
        : {{- .Values.aecImages.aecExplainedUiUploader.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "5m"
            memory: "5Mi"
        env:
        - name: "BVD_URL"
          value: {{ .Values.global.ea.aecExplained.bvdExploreUrl }}
        - name: "BVD_CONTEXT_ROOT"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.exploreContextRoot
        - name: "CONTENT_MANAGER_URL"
          value: {{ .Values.global.ea.aecExplained.uifContentServiceUrl }}
        - name: "CONTENT_MANAGER_CONTEXT_ROOT"
          valueFrom:
            configMapKeyRef:
              name: bvd-config
              key: bvd.contentManagerContextRoot
        - name: "IDM_URL"
          valueFrom:
            configMapKeyRef:
              key: suite.idm_addr
              name: bvd-services-config
        - name: "INTEGRATION_USER"
          valueFrom:
            configMapKeyRef:
              key: suite.integration_user
              name: bvd-services-config
        - name: "INTEGRATION_PW_KEY"
          valueFrom:
            configMapKeyRef:
              key: suite.integration_user_password_key
              name: bvd-services-config
        - name: "IDM_ORGANIZATION"
          valueFrom:
            configMapKeyRef:
              name: bvd-services-config
              key: suite.idm_organization
        - name: "PLUGINS_DIR"
          value: "/var/bvd/plugins"
        volumeMounts:
        - name: podinfo
          mountPath: /etc/podinfo
        - name: vault-token
          mountPath: /var/run/secrets/boostport.com
        - name: bvd-explore-var
          mountPath: /var/bvd
          subPath: bvd/var/bvd
      containers:
      - name: aec-explained-service
        image: {{ coalesce .Values.aecImages.aecExplainedService.dockerRegistry .Values.docker.registry .Values.global.docker.registry -}}
        / {{- coalesce .Values.aecImages.aecExplainedService.orgName .Values.docker.orgName .Values.global.docker.orgName -}}
        / {{- .Values.aecImages.aecExplainedService.image -}}
        : {{- .Values.aecImages.aecExplainedService.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        resources:
          requests:
          {{- if eq .Values.global.deployment.size "medium" }}
            memory: "{{ .Values.deployment.aecExplainedService.memory | default "1Gi" }}"
          {{- else if eq .Values.global.deployment.size "large" }}
            memory: "{{ .Values.deployment.aecExplainedService.memory | default "2Gi" }}"
          {{- else if eq .Values.global.deployment.size "extra-large" }}
            memory: "{{ .Values.deployment.aecExplainedService.memory | default "4Gi" }}"
          {{- else }}
            memory: "{{ .Values.deployment.aecExplainedService.memory | default "1Gi" }}"
          {{- end }}
            cpu: "1"
          limits:
          {{- if eq .Values.global.deployment.size "medium" }}
            memory: "{{ .Values.deployment.aecExplainedService.memory | default "2Gi" }}"
          {{- else if eq .Values.global.deployment.size "large" }}
            memory: "{{ .Values.deployment.aecExplainedService.memory | default "3Gi" }}"
          {{- else if eq .Values.global.deployment.size "extra-large" }}
            memory: "{{ .Values.deployment.aecExplainedService.memory | default "6Gi" }}"
          {{- else }}
            memory: "{{ .Values.deployment.aecExplainedService.memory | default "2Gi" }}"
          {{- end }}
            cpu: "1.5"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
        env:
        - name: "GODEBUG"
          value: "x509ignoreCN=0"
        - name: "ITOM_ANALYTICS_SCHEMA"
          value: "itom_analytics_
                 {{- if hasKey .Values.global.di "tenant" }} {{- .Values.global.di.tenant -}} {{ else -}} provider {{- end }}_
                   {{- if hasKey .Values.global.ea "deployment" }} {{- .Values.global.ea.deployment -}} {{ else -}} {{ .Values.global.di.deployment }} {{- end }}"
        - name: "DI_DATA_SET_SCHEMA"
          value: "mf_shared_{{ if hasKey .Values.global.di "tenant" }} {{- .Values.global.di.tenant -}} {{ else -}} provider {{- end }}_{{ .Values.global.di.deployment }}"
        - name: "IS_VERTICA_EMBEDDED"
          value: "{{ .Values.global.vertica.embedded }}"
        - name: "EXTERNAL_VERTICA_HOSTNAMES"
          value: {{ .Values.global.vertica.host }}
        - name: "EXTERNAL_VERTICA_PORT"
          value: "{{ .Values.global.vertica.port }}"
        - name: "EXTERNAL_VERTICA_DB"
          value: {{ .Values.global.vertica.db }}
        - name: "EXTERNAL_VERTICA_USERNAME"
          value: {{ .Values.global.vertica.rouser }}
        - name: "EXTERNAL_VERTICA_PASS_KEY"
          value: {{ .Values.global.vertica.rouserkey }}
        - name: "EXTERNAL_VERTICA_TLS_MODE"
          value: "{{ .Values.global.vertica.tlsEnabled }}"
        - name: "AEC_INTERACTIVE_POOL"
          value: {{ include "aec.interactiveResourcepool" . | quote }}
        - name: "EXTERNAL_VERTICA_CACERT_PATH"
          value: {{ .Values.cacerts.folder }}/{{ .Values.cacerts.file }}
        - name: "TLS_PRIVATE_KEY"
          valueFrom:
            configMapKeyRef:
              name: itom-analytics-config
              key: tls.key-file
        - name: "TLS_CERTIFICATE"
          valueFrom:
            configMapKeyRef:
              name: itom-analytics-config
              key: tls.cert-file
        - name: "TLS_PORT"
          value: "8443"
        - name: "HOST"
          value: ""
        - name: "LOG_LEVEL"
          value: "info"
        - name: "IDM_URL"
          valueFrom:
            configMapKeyRef:
              key: suite.idm_addr
              name: bvd-services-config
        volumeMounts:
        - name: bvd-explore-var
          mountPath: /var/bvd
          subPath: bvd/var/bvd
        - name: {{ .Values.cacerts.volumeName }}
          mountPath: {{ .Values.cacerts.folder }}
        - name: vault-token
          mountPath: /var/run/secrets/boostport.com

      {{- include "helm-lib.containers.vaultRenew" (dict "Values" .Values) | nindent 6 }}

      {{- with ( coalesce .Values.nodeSelector .Values.global.nodeSelector ) }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      {{ include "aec.externalCertsVolume" . | indent 6 }}
      - name: {{ .Values.cacerts.volumeName }}
        emptyDir: {}
      - name: vault-token
        emptyDir: {}
      - name: podinfo
        downwardAPI:
          items:
            - path: "namespace"
              fieldRef:
                fieldPath: metadata.namespace
      - name: bvd-explore-var
        {{- include "helm-lib.pvcStorage" (dict "claim" "configVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
