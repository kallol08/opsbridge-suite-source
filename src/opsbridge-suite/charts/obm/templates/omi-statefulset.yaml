{{- /* Copyright 2020-2023 Open Text */ -}}

{{- $dbTlsEnabled := eq "true" (include "helm-lib.dbTlsEnabled" . | lower) }}
{{- $dbHost := include "helm-lib.dbHost" . }}
{{- $dbPort := include "helm-lib.dbPort" . }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.deployment.name }}
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "obm.labels" (dict "name" .Values.deployment.name "Release" .Release "Chart" .Chart "Values" .Values) | indent 4 }}
  annotations:
{{ include "obm.reloaderAnnotation" . | indent 4 }}
    deployment.microfocus.com/default-replica-count: {{ .Values.params.haEnabled | ternary 2 1 | quote }}
    deployment.microfocus.com/runlevel: UP
spec:
  replicas: {{ .Values.params.haEnabled | ternary 2 1 }}
  selector:
    matchLabels:
      app: {{ .Values.deployment.name }}
  serviceName: {{ .Values.deployment.name }}svc
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
{{ include "obm.labels" (dict "name" .Values.deployment.name "Release" .Release "Chart" .Chart "Values" .Values) | indent 8 }}
      annotations:
        public-ca-certificates.checksum: ""
{{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
{{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
{{- end }}
        pod.boostport.com/vault-init-container: vault-init
    spec:
      serviceAccount: {{ .Values.deployment.rbac.serviceAccount | default .Values.deployment.name }}
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount | default .Values.deployment.name }}
{{- if .Values.global.docker.imagePullSecret }}
      imagePullSecrets:
        - name: {{ .Values.global.docker.imagePullSecret }}
{{- end }}
      securityContext:
        runAsUser: {{ .Values.global.securityContext.user | int64 }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}
        fsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      nodeSelector:
        {{- toYaml (.Values.omi.nodeSelector | default .Values.global.nodeSelector) | nindent 8 }}
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app: {{ .Values.deployment.name }}
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
      terminationGracePeriodSeconds: 180          
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Values.deployment.name }}
                  - {{ .Values.global.evtsvc.namePrefix }}-artemis
                  - rtsm
              topologyKey: kubernetes.io/hostname
            weight: 100
      initContainers:
      {{- include "helm-lib.waitForVault" . | nindent 6 }}
      
      {{ include "helm-lib.containers.vaultInit" (dict "containerName" "vault-init" "certNames" (print "Common_Name:" .Values.deployment.name ",Additional_SAN:$(POD_NAME)." .Values.deployment.name "svc." .Release.Namespace ".svc.cluster.local./$(POD_NAME)." .Values.deployment.name "svc." .Release.Namespace ".svc.cluster.local/$(POD_NAME)." .Values.deployment.name "svc." .Release.Namespace ".svc/$(POD_NAME)." .Values.deployment.name "svc." .Release.Namespace "/$(POD_NAME)." .Values.deployment.name "svc/$(POD_NAME);Common_Name:" .Values.deployment.name "-scripting-host,File_Name:scripting-host") "Values" .Values) | nindent 6 }}

{{- if .Values.global.database.internal }}
      {{- include "helm-lib.waitFor" ( dict "service" $dbHost "port" $dbPort "Values" .Values) | nindent 6 }}
{{- end }}
      containers:
      - name: {{ .Values.deployment.name }}
        image: {{ .Values.omi.image | default (printf "%s/%s/%s:%s" .Values.global.docker.registry .Values.global.docker.orgName .Values.omi.imageName .Values.omi.imageTag) }}
        imagePullPolicy: {{ .Values.omi.imagePullPolicy | default .Values.global.docker.imagePullPolicy }}
        resources:
{{- $sizes := get .Values.deployment.omiWithScriptingHostSizes (upper .Values.deployment.size) }}
{{- if and .Values.scriptingHost.enabled .Values.scriptingHost.forwardingEnabled }}
  {{- $sizes = get .Values.deployment.sizes (upper .Values.deployment.size) }}
{{- end }}
          requests:
            memory: {{ $sizes.minMemory }}
            cpu: {{ $sizes.minCpu }}
          limits:
            memory: {{ $sizes.maxMemory }}
            cpu: {{ $sizes.maxCpu }}
        ports:
        - containerPort: 1383
          name: bbc
        - containerPort: 1443
          name: https
        - containerPort: 2443
          name: rest-ws-policy
        - containerPort: 30022
          name: backend-metrics
        securityContext:
          capabilities:
            drop:
            - ALL
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
        env:
        - name: "SLEEP_AFTER_FAILURE"
          value: {{ or .Values.omi.sleepAfterFailure false | quote }}
        - name: "JMXADMIN_PASS_KEY"
          value: {{ .Values.params.jmxAdminPasswordKey}}
        - name: "UCMDB_HOST"
          value: "itom-ucmdb-svc"
        - name: "UCMDB_USER"
          value: "UISysadmin"
        - name: "UCMDB_PASS_KEY"
          value: {{ ((.Values.global.cms).secrets).UISysadmin | default "ucmdb_uisysadmin_password" | quote }}
        - name: "LWSSO_INIT_STRING_KEY"
          value: {{ .Values.global.idm.hpssoInitStrSecretName | default "HPSSO_INIT_STRING_KEY" }}
{{- $dbType := include "helm-lib.dbType" . }}
{{- if eq "oracle" (lower $dbType) }}
        - name: "DBTYPE"
          value: "ORACLE Server"
{{- else if eq "postgresql" (lower $dbType) }}
        - name: "DBTYPE"
          value: "Postgres"
{{- else }}
        - name: "DBTYPE"
          value: {{ $dbType | quote}}
{{- end }}
        - name: "DBHOST"
          value: {{ quote $dbHost }}
        - name: "DBPORT"
          value: {{ quote $dbPort }}
        - name: "DBUSER_MGMT"
          value: {{ include "obm.mgmtUser" . | quote }}
        - name: "DBPASS_MGMT_KEY"
          value: {{ include "obm.mgmtUserKey" . | quote }}
        - name: "DBUSER_EVENT"
          value: {{ include "obm.eventUser" . | quote }}
        - name: "DBPASS_EVENT_KEY"
          value: {{ include "obm.eventUserKey" . | quote }}
        - name: "DBADMINUSER"
          value: {{ include "helm-lib.dbAdmin" . | quote }}
        - name: "DBADMINPASS_KEY"
          value: {{ include "helm-lib.dbAdminKey" . | quote }}
        - name: "DB_TLS_ENABLED"
          value: {{ include "helm-lib.dbTlsEnabled" . | quote }}
        - name: "ORA_SID"
          value: {{ include "helm-lib.dbOracleSid" . | quote }}
        - name: "ORA_SERVICE_NAME"
          value: {{ include "helm-lib.dbOracleServiceName" . | quote }}
        - name: "ORA_CONNECTION_STRING"
          value: {{ include "helm-lib.dbOracleConnectionString" . | quote }}
{{- if not .Values.deployment.database.postgresCrlCheckEnabled }}
        - name: "DISABLE_POSTGRES_CRL_CHECK"
          value: "true"
{{- end }}
        - name: "DBNAME_MGMT"
          value: {{ include "obm.mgmtDb" . | quote }}
        - name: "DBNAME_EVENT"
          value: {{ include "obm.eventDb" . | quote }}
        - name: "LWSSO_PARSE_SERVER_DOMAIN_AUTO"
          value: "true"
        - name: "EXTERNALNAME"
          value: {{ required "Must define externalAccessHost" .Values.global.externalAccessHost | quote }}
        - name: "EXTERNALPORT"
          value: {{ required "Must define externalAccessPort" .Values.global.externalAccessPort | quote }}
        - name: "DI_RECEIVER_HOST"
          value: {{ required "Must define externalAccessHost" .Values.global.externalAccessHost | quote }}
        - name: "DI_RECEIVER_PORT"
          value: {{ .Values.externalDesPort | quote }}
        - name: "DI_RECEIVER_HOST_INTERNAL"
          value: "itom-opsbridge-des-svc"
        - name: "DI_RECEIVER_PORT_INTERNAL"
          value: "40009"
        - name: "DI_ADMIN_HOST"
          value: {{ include "helm-lib.getDiAdminHost" . | default "itom-di-administration-svc" | quote }}
        - name: "DI_ADMIN_PORT"
          value: {{ include "helm-lib.getDiAdminPort" . | default 18443 | quote }}
        - name: "DI_DATA_HOST"
          value: {{ include "helm-lib.getDiDataAccessHost" . | default "itom-di-data-access-svc" | quote }}
        - name: "DI_DATA_PORT"
          value: {{ include "helm-lib.getDiDataAccessPort" . | default 28443 | quote }}
        - name: "LICENSE"
          value: {{ .Values.params.license | quote }}
        - name: "OMI_MANAGEMENT_PACKS"
          value: {{ include "obm.getManagementPacks" . }}
        - name: "OMI_DEPLOYMENT_SIZE"
          value: {{ upper .Values.deployment.size | quote }}
        - name: "OMI_MEMORY_OVERRIDES"
          value: {{ include "obm.getMemoryOverrides" . }}
        - name: "APPROLE"
          value: {{ .Values.global.vaultAppRole | default "default" | quote }}
        - name: "ROLE_ID"
          value: {{ .Values.global.vaultRoleId | default "" | quote }}
        - name: "APLMS_DOMAIN_NAME"
          value: "https://itom-autopass-lms:5814"
        - name: "NAMESPACE"
          value: {{ .Release.Namespace }}
        - name: "VAULT_ADDR"
          value: "https://itom-vault:8200"
        - name: "IDM_TRANSPORT_PASSWORD_KEY"
          value: {{ .Values.global.idm.transportUserKey | default "idm_transport_admin_password" }}
        - name: "IDM_ADMIN_USER_NAME"
          value: {{ .Values.global.idm.integrationUser | default "integration_admin" }}
        - name: "IDM_ADMIN_USER_PASSWORD_KEY"
          value: {{ .Values.global.idm.integrationUserKey | default "idm_integration_admin_password" }}
        - name: "IDM_ORGANIZATION"
          value: {{ .Values.global.idm.tenant | default "Provider" }}
{{- if .Values.global.idm.orgAware }}
        - name: "IDM_DEFAULT_CUSTOMER_ORG"
          value: {{ .Values.global.idm.additionalSeededOrg.name }}
{{- end }}
        - name: "IDM_INTERNAL_URI"
          value: https://{{ .Values.global.idm.serviceName | default "itom-idm-svc" }}:{{ .Values.global.idm.internalPort | default "18443" }}/idm-service
        - name: "IDM_EXTERNAL_URI"
          value: https://{{ .Values.global.externalAccessHost }}:{{ .Values.global.externalAccessPort }}/idm-service
        - name: "ENABLE_IDM_MULTI_ORG"
          value: {{ .Values.global.idm.orgAware | default false | quote }}
        - name: "SUITE_VERSION"
{{- if .Values.params.suite.configMap }}
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.params.suite.configMap }}
              key: appVersion
{{- else }}
          value: {{ .Values.params.suite.appVersion | default .Chart.AppVersion | quote }}
{{- end }}
        - name: "OPR_BUS_HOST"
          value: "{{ .Values.global.evtsvc.namePrefix }}-artemis"
        - name: "OMI_USER_NAME"
          value: "omiuser"
        - name: "OMI_USER_GROUP"
          value: "omiusers"
        - name: "NODE_NAME"
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: "CONTAINER_NAME"
          value: {{ .Values.deployment.name | quote }}
        - name: "POD_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: "POD_NAME"
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: "LOG_MOUNT_DIRECTORY"
          value: /var/log/omi
        - name: "HA_ENABLED"
          value: {{ .Values.params.haEnabled | quote }}
        - name: "FIPS_ENABLED"
          value: {{ .Values.global.fipsMode | quote }}
        - name: "EVTSVC_ENTRY_RECEIVER_ENABLED"
          value: {{ .Values.params.evtsvc.entryReceiverEnabled | default "false" | quote }}
        - name: "BBC_EXTERNAL_PORT"
          value: {{ .Values.bbc.port | default 383 | quote }}
        - name: "BBC_TRUSTED_CERTS_CM"
          value: {{ .Values.deployment.name }}-bbc-trusted-certs
{{- if .Values.rcp.enabled }}
        - name: "RCP_SERVICE"
          value: "{{ .Values.deployment.name }}-rcp"
        - name: "RCP_PORT"
          value: {{ .Values.rcp.port | quote }}
        - name: "RCP_CERT_SECRET"
          value: {{ .Values.deployment.name }}-rcp-certificate
        - name: "BBC_CERT_SECRETS"
          value: "itom-monitoring-kubernetes-rcp,itom-monitoring-sis-rcp,itom-monitoring-prom-rcp"
{{- end }}
{{- if .Values.scriptingHost.enabled }}
        - name: "EPI_SCRIPTING_HOST"
          value: {{ .Values.deployment.name }}-scripting-host
        - name: "SCRIPTING_HOST_USER"
          value: "obm-scripting-host-integration"
{{-  if .Values.scriptingHost.forwardingEnabled }}
        - name: "FORWARDING_SCRIPTING_HOST"
          value: {{ .Values.deployment.name }}-scripting-host
{{-  end }}
{{- end }}
        - name: "SCRIPTING_HOST_CERT_SECRET"
          value: {{ .Values.deployment.name }}-scripting-host-certificate
        - name: "BBC_INTERNAL_PORT"
          value: "1383"
        - name: "HTTP_INTERNAL_PORT"
          value: "1443"
        readinessProbe:
          exec:
            command: ["bash", "-c", "/container/bin/ready.sh"]
          initialDelaySeconds: 60
          timeoutSeconds: 30
          periodSeconds: 30
          failureThreshold: 1
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: tmpfs-volume
          mountPath: /mnt/tmpfs/opt/OV
          subPath: {{ .Values.deployment.name }}/opt/OV
        - name: tmpfs-volume
          mountPath: /mnt/tmpfs/var/opt/OV
          subPath: {{ .Values.deployment.name }}/var/opt/OV
        - name: tmpfs-volume
          mountPath: /mnt/tmpfs/opt/HP/BSM
          subPath: {{ .Values.deployment.name }}/opt/HP/BSM
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/container/data
          subPath: {{ .Values.deployment.name }}/container/data
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/var/opt/OV/shared/server/data
          subPath: {{ .Values.deployment.name }}/var/opt/OV/shared/server/data
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/opt/HP/BSM/WebServer/logs
          subPath: {{ .Values.deployment.name }}/opt/HP/BSM/WebServer/logs
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/var/opt/OV/log
          subPath: {{ .Values.deployment.name }}/var/opt/OV/log
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/opt/HP/BSM/Temp
          subPath: {{ .Values.deployment.name }}/opt/HP/BSM/Temp
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/opt/HP/BSM/log
          subPath: {{ .Values.deployment.name }}/opt/HP/BSM/log
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/opt/HP/BSM/AppServer/webapps/site.war/amdocs/eng/doc_lib/Subsystems
          subPath: {{ .Values.deployment.name }}/opt/HP/BSM/AppServer/webapps/site.war/amdocs/eng/doc_lib/Subsystems
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/opt/HP/BSM/AppServer/webapps/site.war/static/download
          subPath: {{ .Values.deployment.name }}/opt/HP/BSM/AppServer/webapps/site.war/static/download
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/opt/HP/BSM/AppServer/webapps/site.war/Imgs/chartTemp
          subPath: {{ .Values.deployment.name }}/opt/HP/BSM/AppServer/webapps/site.war/Imgs/chartTemp
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/opt/HP/BSM/newconfig
          subPath: {{ .Values.deployment.name }}/opt/HP/BSM/newconfig
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/opt/HP/BSM/application-server/logs
          subPath: {{ .Values.deployment.name }}/opt/HP/BSM/application-server/logs
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/opt/HP/BSM/opr/integration/idl/metadata
          subPath: {{ .Values.deployment.name }}/opt/HP/BSM/opr/integration/idl/metadata
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/opt/HP/BSM/conf/license/products
          subPath: {{ .Values.deployment.name }}/opt/HP/BSM/conf/license/products
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/opt/HP/BSM/conf/spring/plugin
          subPath: {{ .Values.deployment.name }}/opt/HP/BSM/conf/spring/plugin
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/opt/HP/BSM/conf/core/Tools/log4j
          subPath: {{ .Values.deployment.name }}/opt/HP/BSM/conf/core/Tools/log4j
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/opt/HP/BSM/BLE/rules/groovy/rules
          subPath: {{ .Values.deployment.name }}/opt/HP/BSM/BLE/rules/groovy/rules
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/var/opt/OV/conf
          subPath: {{ .Values.deployment.name }}/var/opt/OV/conf
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/var/opt/OV/datafiles
          subPath: {{ .Values.deployment.name }}/var/opt/OV/datafiles
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/var/opt/OV/databases
          subPath: {{ .Values.deployment.name }}/var/opt/OV/databases
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/var/opt/OV/tmp
          subPath: {{ .Values.deployment.name }}/var/opt/OV/tmp
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/var/opt/OV/bin/instrumentation
          subPath: {{ .Values.deployment.name }}/var/opt/OV/bin/instrumentation
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/var/opt/OV/shared/server/log
          subPath: {{ .Values.deployment.name }}/var/opt/OV/shared/server/log
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/var/opt/OV/shared/server/conf
          subPath: {{ .Values.deployment.name }}/var/opt/OV/shared/server/conf
        - name: {{ .Release.Name }}-pvc
          mountPath: /mnt/var/opt/OV/shared/server/datafiles
          subPath: {{ .Values.deployment.name }}/var/opt/OV/shared/server/datafiles
        - name: vault-token
          mountPath: /var/run/secrets/boostport.com
        - name: log-storage
          mountPath: /var/log/omi
          subPath: "{{ .Values.deployment.name }}"
{{- if .Values.scriptingHost.enabled }}
        - name: scripting-host-credentials
          mountPath: /scripting-host-credentials
        - name: log-storage
          mountPath: /var/log/omi-scripting-host
          subPath: "{{ .Values.deployment.name }}-scripting-host/log/download"
{{-  if not .Values.scriptingHost.forwardingEnabled }}
        - name: log-storage
          mountPath: /service/log/download
          subPath: "{{ .Values.deployment.name }}-scripting-host/log/download"
{{-  end }}
{{- end }}
        - name: proxies
          mountPath: /proxies
{{- if .Values.global.tlsTruststore }}
        - name: trusted-certs
          mountPath: /trusted-certs
{{- end }}
{{- if $dbTlsEnabled }}
        - name: db-trusted-certs
          mountPath: /db-trusted-certs
{{- end }}
{{- if .Values.rcp.enabled }}
        - name: rcp-targets
          mountPath: /rcp-targets
        - name: rcp-cert
          mountPath: /rcp-cert
{{- end }}
        - name: scripting-host-cert
          mountPath: /scripting-host-cert
        - name: restws-policy-auth
          mountPath: /restws-policy-auth
        - name: public-ca-certificates
          mountPath: /public-ca-certificates
      {{- include "helm-lib.containers.vaultRenew" (dict "containerName" "vault-renew" "Values" .Values) | nindent 6 }}      
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: tmpfs-volume
        emptyDir: {}
      - name: vault-token
        emptyDir: {}
{{- if .Values.global.tlsTruststore }}
      - name: trusted-certs
        configMap:
          defaultMode: 0444
          name: {{ .Values.global.tlsTruststore | quote }}
{{- end }}
{{- if $dbTlsEnabled }}
      - name: db-trusted-certs
        configMap:
          defaultMode: 0444
          name: {{ .Values.global.database.tlsTruststore | quote }}
{{- end }}
      - name: log-storage
      {{- include "helm-lib.pvcStorage" (dict "claim" "logVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      - name: proxies
        configMap:
          defaultMode: 0444
          name: {{ .Values.deployment.name }}-proxies
{{- if .Values.rcp.enabled }}
      - name: rcp-targets
        configMap:
          defaultMode: 0444
          name: {{ .Values.deployment.name }}-rcp-targets
      - name: rcp-cert
        secret:
          defaultMode: 0400
          secretName: {{ .Values.deployment.name }}-rcp-certificate
{{- end }}
      - name: scripting-host-cert
        secret:
          defaultMode: 0400
          secretName: {{ .Values.deployment.name }}-scripting-host-certificate
      - name: restws-policy-auth
        secret:
          defaultMode: 0400
          secretName: {{ .Values.deployment.name }}-restws-policy-auth
      - name: public-ca-certificates
        configMap:
          defaultMode: 0444
          name: public-ca-certificates
{{- if .Values.scriptingHost.enabled }}
      - name: scripting-host-credentials
        secret:
          defaultMode: 0400
          secretName: {{ .Values.global.initSecrets }}
          items:
            - key: obm_scripting_host_integration_password
              path: password
{{- end }}
  volumeClaimTemplates:
{{- $prevStatefulSet := lookup "apps/v1" "StatefulSet" .Release.Namespace .Values.deployment.name | default (((.Values.unittest).lookup).statefulset).omi }}
{{- if $prevStatefulSet }}
    {{- toYaml $prevStatefulSet.spec.volumeClaimTemplates | nindent 4 }}
{{- else }}
{{- $pvcName := print .Release.Name "-pvc" }}
  - metadata:
      name: {{ $pvcName }}
      labels:
{{ include "obm.labels" (dict "name" $pvcName "Release" .Release "Chart" .Chart "Values" .Values) | indent 8 }}
    spec:
{{- include "helm-lib.pvcStorageSpec" ( dict "globalStorageClass" "default-rwo" "volumeStorageClass" ".Values.omi.storageClassName" "accessMode" "ReadWriteOnce" "pvcName" "{{ .Release.Name }}-pvc" "Release" .Release "Values" .Values "Template" .Template ) | indent 4 }}
      resources:
        requests:
          storage: {{ $sizes.volumeClaimSize }}
{{- end }}
