{{/*# Copyright 2023 Open Text.*/}}

{{/*# The only warranties for products and services of Open Text and its affiliates*/}}
{{/*# and licensors ("Open Text") are as may be set forth in the express warranty*/}}
{{/*# statements accompanying such products and services. Nothing herein should be*/}}
{{/*# construed as constituting an additional warranty. Open Text shall not be*/}}
{{/*# liable for technical or editorial errors or omissions contained herein. The*/}}
{{/*# information contained herein is subject to change without notice.*/}}

{{ if .Values.global.monitoringService.enableGcpMonitor -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.microfocus.com/default-replica-count: "1"
    deployment.microfocus.com/runlevel: UP
  name: itom-monitoring-gcp-discovery-collector
  namespace: {{ .Release.Namespace }}
  labels:
    app: itom-monitoring-gcp-discovery-collector-app
spec:
  replicas: {{ .Values.gcpcollector.config.replicaCount }}
  selector:
    matchLabels:
      app: itom-monitoring-gcp-discovery-collector-app
  template:
    metadata:
      labels:
        app: itom-monitoring-gcp-discovery-collector-app
        service: itom-monitoring-gcp-discovery-collector-svc
        app.kubernetes.io/name: itom-monitoring-gcp-discovery-collector
        app.kubernetes.io/managed-by: {{.Release.Name}}
        app.kubernetes.io/version: {{ .Values.gcpcollector.imageTag }}
        itom.microfocus.com/capability: HyperscaleObservability
        tier.itom.microfocus.com/backend: backend
        itom.microfocus.com/description: GCP_Discovery_Collector
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
        prometheus.io/port: '8080'
        prometheus.io/scrape: 'true'
    spec:
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount }}-discovery
      securityContext:
        runAsUser: {{ .Values.global.securityContext.user }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
      initContainers:
        {{- include "helm-lib.waitFor" ( dict "service" "cs-redis" "port" "6380" "Values" .Values) | nindent 8 }}
        {{- $certNames := printf "Common_Name:itom-monitoring-gcp-discovery-collector,Additional_SAN:itom-monitoring-gcp-discovery-collector/itom-monitoring-gcp-discovery-collector.%s/itom-monitoring-gcp-discovery-collector.%s.svc.cluster.local/itom-monitoring-gcp-discovery-collector/itom-monitoring-gcp-discovery-collector-svc/itom-monitoring-gcp-discovery-collector-svc.%s/itom-monitoring-gcp-discovery-collector-svc.%s.svc.cluster.local,Secret:itom-monitoring-gcp-discovery-collector-metrics-client,UpdateSecret:true,File_Name:server" .Release.Namespace .Release.Namespace .Release.Namespace .Release.Namespace -}}

       {{- include "helm-lib.containers.vaultInit" (dict "containerName" "install" "certNames" $certNames "Values" .Values) | nindent 8 }}    
      containers:
        {{- include "helm-lib.containers.vaultRenew" (dict "containerName" "kubernetes-vault-renew" "Values" .Values) | nindent 8 }}   
        - name: itom-monitoring-gcp-discovery-collector
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.gcpcollector.image }}:{{ .Values.gcpcollector.imageTag }}
          imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
          livenessProbe:
            exec:
              command:
                - curl
                - https://localhost:40006/v1.0/health
                - --insecure
                - --key
                - /var/run/secrets/boostport.com/server.key
                - --cert
                - /var/run/secrets/boostport.com/server.crt
            failureThreshold: 3
            initialDelaySeconds: 20
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - curl
                - https://localhost:40006/v1.0/health
                - --insecure
                - --key
                - /var/run/secrets/boostport.com/server.key
                - --cert
                - /var/run/secrets/boostport.com/server.crt
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          ports:
          - containerPort: 40006
            name: mcoll-gcpc
            protocol: TCP
          - containerPort: 8080
            name: prometheus-gcpc
            protocol: TCP
          resources:
            limits:
              cpu: 2
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 200Mi
          volumeMounts:
            - name: vault-token
              mountPath: /var/run/secrets/boostport.com
            - name: gcp-discovery-collector-log-volume
              mountPath: /logs
              subPath: cloud-monitoring/gcp/discovery/collector
            - name: gcp-metric-collector-conf-volume
              mountPath: /content
              subPath: gcp-collector/content
            - name: conf
              mountPath: /config
          env:
          {{- if eq .Values.global.isUDCollectionEnabled true }}
          - name: "UD_PROBE_NAME"
            value: "itom-probe"
          - name: "CMS_GW_HOST"
            value: {{ required "Required value is not defined: global.externalAccessHost" .Values.global.externalAccessHost }}
          - name: "CMS_GW_PORT"
            value: {{ required "Required value is not defined: global.externalAccessPort" .Values.global.externalAccessPort | quote }}
          - name: "CUSTOMER_ID"
            value: {{ .Values.global.cms.customerId | quote }}
          - name: "CMS_GW_LIMIT"
            value: {{ .Values.global.cms.cmsGwLimit | quote }}
          - name: "MONITORED_BY"
            value: {{ .Values.gcpcollector.config.monitoredBy | default "MonitoringService" }}
          - name: ENABLE_SUBSCRIPTION_NOTIFICATION
            value: "true"          
          - name: "PARALLEL_RESOURCE_COLLECTION_ENABLED"
            value: "false"
          {{- if eq .Values.global.cms.externalOBM true }}
          - name: "UD_ENDPOINT"
            value: {{ required "Required value is not defined: udProtocol" .Values.global.cms.udProtocol }}://{{ required "Required value is not defined: udHostname" .Values.global.cms.udHostname }}:{{ required "Required value is not defined: port" .Values.global.cms.port }}
          - name: "UD_USER"
            value: {{ required "Required value is not defined: udUsername" .Values.global.cms.udUsername }}
          {{- else }}
          - name: "UD_ENDPOINT"
            value: https://{{ required "Required value is not defined: global.externalAccessHost" .Values.global.externalAccessHost }}:{{ required "Required value is not defined: global.externalAccessPort" .Values.global.externalAccessPort }}/ucmdb-server
          - name: "UD_USER"
            value: "UISysadmin"
          {{- end }}
          {{- end }}
          - name: "CMS_GW_URL"
            value: https://itom-cms-gateway-svc:{{ .Values.deployment.cmsgateway.node.httpsPort | default 3443 }}/{{ .Values.deployment.cmsgateway.node.context | default "cms-gateway" }}
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: MY_CONTAINER_NAME
            value: itom-monitoring-gcp-discovery-collector
        - name: itom-monitoring-job-fetcher
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.monitoringService.jobFetcher.image | default .Values.jobfetcher.image }}:{{ .Values.global.monitoringService.jobFetcher.imageTag | default .Values.jobfetcher.imageTag }}
          imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
          ports:
          - containerPort: 40005
            name: mcoll-gcpj
            protocol: TCP
          - containerPort: 41001
            name: prometheus-gcpj
            protocol: TCP
          resources:
            limits:
              cpu: 2
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 200Mi
          volumeMounts:
            - name: conf
              mountPath: /config
            - name: vault-token
              mountPath: /var/run/secrets/boostport.com
            - name: gcp-discovery-collector-log-volume
              mountPath: /logs
              subPath: cloud-monitoring/gcp/discovery/job-fetcher 
          env:
          - name: "PROMETHEUS_METRICS_PORT"
            value: "41001"
          - name: "MAX_COLLECTION_TASK"
            value: "2"
          - name: "REDIS_URL"
            value: {{ .Values.redis.svcname }}:{{ .Values.redis.port }}
          - name: "REDIS_SRV_BASE_NAME"
            value: {{ .Values.redis.srvbasename }}
          - name: "REDIS_PWD_KEY"
            value: {{ .Values.redis.passwdkey }}  
          - name: "SUBSCRIPTION_NAME"
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: "COLLECTION_SCHEDULER_URL"
            value: {{ .Values.collectionscheduler.svcname }}:{{ .Values.collectionscheduler.port }}
          - name: "CDF_NAMESPACE"
            value: {{ .Release.Namespace | quote }}
          - name: "VAULT_SECRET_DIR"
            value: /var/run/secrets/boostport.com
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: MY_CONTAINER_NAME
            value: itom-monitoring-job-fetcher
        - name: itom-monitoring-result-processor
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.monitoringService.resultProcessor.image | default .Values.resultprocessor.image }}:{{ .Values.global.monitoringService.resultProcessor.imageTag | default .Values.resultprocessor.imageTag }}
          imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
          ports:
          - containerPort: 40007
            name: mcoll-gcpr
            protocol: TCP
          - containerPort: 41002
            name: prometheus-gcpr
            protocol: TCP
          resources:
            limits:
              cpu: 2
              memory: 600Mi
            requests:
              cpu: 100m
              memory: 200Mi
          volumeMounts:
            - name: vault-token
              mountPath: /var/run/secrets/boostport.com
            - name: gcp-discovery-collector-log-volume
              mountPath: /logs
              subPath: cloud-monitoring/gcp/discovery/result-processor
          env:
          - name: "PROMETHEUS_METRICS_PORT"
            value: "41002"
          - name: "DI_SERVER_URL"
            value: {{ .Values.global.desProtocol | default "https" }}://{{ .Values.global.saas.externalAccessHost | default .Values.gcpcollector.config.desreceiversvc }}:{{ .Values.global.saas.externalAccessPort | default .Values.gcpcollector.config.desreceiverport }}/itomdi/receiver
          - name: "SNF_URL"
            value: {{ .Values.snf.protocol | default "https" }}://{{ .Values.snf.svcname }}:{{ .Values.snf.port}}/v1/forward
          - name: "SUBSCRIPTION_NAME"
            value: {{ .Values.resultprocessor.config.subscriptionname | quote  }}
          - name: "COSO_SUBSCRIPTION"
            value: {{ .Values.gcpcollector.config.cososubscription  }}
          - name: "VAULT_SECRET_DIR"
            value: /var/run/secrets/boostport.com
          - name: "REDIS_URL"
            value: {{ .Values.redis.svcname }}:{{ .Values.redis.port }}
          - name: "REDIS_SRV_BASE_NAME"
            value: {{ .Values.redis.srvbasename }}
          - name: "REDIS_PWD_KEY"
            value: {{ .Values.redis.passwdkey }}  
          - name: "REDIS_SET_PREFIX"
            value: "monitor:"
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: MY_CONTAINER_NAME
            value: itom-monitoring-result-processor
      {{- with (coalesce .Values.nodeSelector .Values.global.nodeSelector) }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:   
      - name: vault-token
        emptyDir: {}
      - name: gcp-discovery-collector-log-volume
        {{- include "helm-lib.pvcStorage" (dict "claim" "logVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      - name: gcp-metric-collector-conf-volume
        {{- include "helm-lib.pvcStorage" (dict "claim" "configVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      - name: conf
        configMap:
          name: itom-monitoring-gcp-discovery-collector-cm
          defaultMode: 0755
{{- end }}
