#
# Copyright 2023 Open Text.
#
# The only warranties for products and services of Open Text and its affiliates and licensors (“Open Text”)
# are as may be set forth in the express warranty statements accompanying such products and services.
# Nothing herein should be construed as constituting an additional warranty. Open Text shall not be liable
# for technical or editorial errors or omissions contained herein. The information contained herein is subject
# to change without notice.
#
# Except as specifically indicated otherwise, this document contains confidential information and a valid
# license is required for possession, use or copying. If this work is provided to the U.S. Government,
# consistent with FAR 12.211 and 12.212, Commercial Computer Software, Computer Software
# Documentation, and Technical Data for Commercial Items are licensed to the U.S. Government under
# vendor’s standard commercial license.
#
dipostload:
  probe:
    taskController:
      startup:
        enabled: true
        initialDelaySeconds: 30
        periodSeconds: 5
        timeoutSeconds: 5
        failureThreshold: 110
        successThreshold: 1

      liveness:
        enabled: true
        initialDelaySeconds: 1
        periodSeconds: 30
        timeoutSeconds: 5
        failureThreshold: 5
        successThreshold: 1

      readiness:
        enabled: true
        initialDelaySeconds: 1
        periodSeconds: 30
        timeoutSeconds: 5
        failureThreshold: 5
        successThreshold: 1

    taskExecutor:
      startup:
        enabled: true
        initialDelaySeconds: 30
        periodSeconds: 5
        timeoutSeconds: 5
        failureThreshold: 110
        successThreshold: 1

      liveness:
        enabled: true
        initialDelaySeconds: 1
        periodSeconds: 30
        timeoutSeconds: 5
        failureThreshold: 5
        successThreshold: 1

      readiness:
        enabled: true
        initialDelaySeconds: 1
        periodSeconds: 30
        timeoutSeconds: 5
        failureThreshold: 5
        successThreshold: 1
  config:
    taskGenerator:
      replicaCount: "1"
      jvmArgs: "-Xms256m -Xmx1024m -XX:+HeapDumpOnOutOfMemoryError -Djdk.tls.maxCertificateChainLength=20"
      logConfigFromConfigmap: true

    taskExecutor:
      replicaCount: "1"
      jvmArgs: "-Xms256m -Xmx1024m -XX:+HeapDumpOnOutOfMemoryError -Djdk.tls.maxCertificateChainLength=20"
      logConfigFromConfigmap: true

    postload:
      taskTopic: "di_postload_task_topic"
      statusTopic: "di_postload_task_status_topic"
      stateTopic: "di_internal_postload_state"
      taskExecutionIntervalMillis: "60000"
      consumersPerTaskExecutor: "20"
      useReceiveToConsume: "true"
      enableTopicMonitoring: "false"
      enableTeProcessMonitoring : "true"
      timeZone: ""
      aggregatePeriodDuringRecoveryInHrs : 24
      enrichmentBatchSize: "2000000000"
      postResourcePool: ""
      # value should be same as prometheus scrape interval specified by scrape_interval in itomdimonitoring-prometheus config map
      scrapeIntervalMillis: "15000"
      pulsarNamespace: "itomdipostload"
      acceptableMissedTriggerDelaySeconds: "7200"
      serverTlsEnabledProtocols: "TLSv1.2,TLSv1.3"
      enhanceResiliency: true
      taskStatusCheckInterval: 60
      taskTimeoutCheck: 60
      taskExecutionThresholdInMinutes: 360

    configServer:
      hostname: "itom-di-administration-svc"
      port: "18443"
      connectRetryDelayMs: "30000"
      clientHeartBeat: "20000"
      serverHeartBeat: "30000"
      messageBufferSizeLimitInMb: "2"

    csvdirectload:
      #csv directload configuration
      compressArchiveFiles: "true"
      compressFailedFiles: "true"
      #set the below flag to false if you want to compress the archived files periodically instead of compressing each file
      compressEachFile: "true"
      cleanupRetentionPeriodDays: "1"
      cleanupRetentionSizeMb: "-1" # retention size in MB, set to -1 to disable

    pulsar:
      kopServiceName: "itomdipulsar-proxy"
      namespace: "default"
      tenant: "public"
      brokerServicePort: "6650"
      webServicePort: "8080"
      tlsEnable: "true"
      authEnable: "true"
      authClass: "org.apache.pulsar.client.impl.auth.AuthenticationTls"
      tlsHostnameVerification: "false"
      connectionRetryIntervalSeconds: "30"
    vertica:
      connectionRetryIntervalSeconds: "30"

global:
  topologySpreadConstraintsDefaults:
    enabled: true
    template:
      maxSkew: 1
      topologyKey: "topology.kubernetes.io/zone"
      whenUnsatisfiable: ScheduleAnyway
  cluster:
    k8sProvider: cdf
  di:
    prometheus:
      alerts:
        enabled: true
    tenant: "provider"
    deployment: "default"
    pulsar:
      tenant:
      namespace:      
    logging:
      useFile: true
  expose:
    ipConfig:
      ipFamilyPolicy: PreferDualStack
      ipFamilies:
  # persistence.enabled=true means that the PVCs are expected to be dynamically created by the composition chart.
  # Otherwise, persistence.dataVolumeClaim is a persistent volume claim for storing data files.
  # persistence.logVolumeClaim is a persistent volume claim for storing log files.
  # If all of the above are undefined, then temporary ephemeral storage will be created (only if isDemo=true)

  persistence:
    enabled: false
    configVolumeClaim:
    logVolumeClaim:
    dataVolumeClaim:


  # RBAC
  rbac:
    serviceAccountCreate: true
    roleCreate: true

  nodeSelector: {}
  # For custom server CAs (incl. for Vertica). tlsTruststore should be the name of a configMap which contains the certs.
  tlsTruststore:

  # If deployPrometheusConfig is true, CDF Monitoring Framework is assumed to be installed and will use it for metric storage
  prometheus:
    deployPrometheusConfig: true
    prometheusSelector:
      prometheus_config: "1"
    scrapeCertSecretName: "itom-di-prometheus-scrape-cert"
    scrapeCaConfigmapName: "monitoring-ca-certificates"

  # If isDemo is true, this will allow use of ephemeral storage and other POC aspects.
  isDemo: false

  instance:
    kafka:
    pulsar: pulsar

  pulsar:
#    serviceName:
    namespace:
    tenant:
    isKopEnabled: false
#    webServicePort:
#    webServicePortTls:
#    brokerServicePort:
#    brokerServicePortTls:
#    tlsEnable: "false"
#    authEnable: "false"
#    authClass: "org.apache.pulsar.client.impl.auth.AuthenticationTls"
#    tlsHostnameVerification: "false"

  #messageBus: "kafka"

  vertica:
    embedded: false
    host:
    rwuser:
    rwuserkey: ITOMDI_DBA_PASSWORD_KEY
    rouser:
    rouserkey: ITOMDI_DBA_PASSWORD_KEY
    db:
    port:
    tlsEnabled: "true"
    tlsMode: "verify_full"
    #purgeAfterDelete: "false"


  docker:
    # set the global.docker.registry and orgName to your internal Docker registry/org
    registry: localhost:5000
    orgName: 
    imagePullSecret: ""
    imagePullPolicy: IfNotPresent

  securityContext:
      user: "1999"      
      fsGroup: "1999"

  # Global image references for vault
  vaultRenew:
    #registry: localhost:5000
    #orgName: 
    image: kubernetes-vault-renew
    imageTag: 0.10.0-0019
  vaultInit:
    #registry: localhost:5000
    #orgName: 
    image: kubernetes-vault-init
    imageTag: 0.10.0-0019
  toolsBase:
    image: itom-tools-base
    imageTag: 1.1.0-0018
  fluentbit:
    fluentbitSelector:
      labelName: "deployment.microfocus.com/fluentbit-config"
      labelValue: "true"

resources:
  taskGenerator:
    limits:
      cpu: "4"
      memory: "1024Mi"
    requests:
      cpu: "0.5"
      memory: "512Mi"
  taskExecutor:
    limits:
      cpu: "4"
      memory: "2048Mi"
    requests:
      cpu: "0.5"
      memory: "512Mi"


affinity:
  taskGenerator:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: "app"
                operator: In
                values:
                  - itom-di-postload-processor-taskgenerator
          topologyKey: "kubernetes.io/hostname"
  taskExecutor:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: "app"
                  operator: In
                  values:
                    - itom-di-postload-processor-taskexecutor
            topologyKey: "kubernetes.io/hostname"
  # Global image references

nodeSelector: {}
deployment:
  rbac:
    serviceAccount: ""
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: "topology.kubernetes.io/zone"
      whenUnsatisfiable: ScheduleAnyway
#####################
# Image definitions
#####################

postload:
  taskGenerator:
    image: itom-data-ingestion-postload-taskcontroller
    imageTag: 2.12.1-10
  taskExecutor:
    image: itom-data-ingestion-postload-taskexecutor
    imageTag: 2.12.1-10
enrichment:
  image: itom-data-ingestion-enrichment
  imageTag: 2.12.1-2
customTaskType:
  # To plugin custom task type set enabled to true and.
  # replace CUSTOM_TASK_TYPE_IMG_NAME, CUSTOM_TASK_TYPE_IMG_TAG with the custom task type image name and tag.
  # Configure registry and orgName if you want to override the corresponding global docker values.
  enabled: false
  #registry: localhost:5000
  #orgName: 
  image: CUSTOM_TASK_TYPE_IMG_NAME
  imageTag: CUSTOM_TASK_TYPE_IMG_TAG

