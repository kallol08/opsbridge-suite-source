{{- if and .Values.global.services.obm.deploy (( or (( and (((.Values.global.services).opticReporting).deploy) .Values.global.isAgentMetricCollectorEnabled)) (( and (((.Values.global.services).hyperscaleObservability).deploy) .Values.global.deployOperationsAgent)) )) }}
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    deployment.microfocus.com/runlevel: UP
  name: itom-omi-csr-granter-{{ randAlphaNum 5 | lower }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Name }}
    app.kubernetes.io/name: itom-omi-csr-granter
    app.kubernetes.io/version: {{.Values.internalIntegrationImages.itomOmiCSRGranter.imageTag }}
    itom.microfocus.com/capability: opsbridge-suite
    itom.microfocus.com/randomid: {{ uuidv4 }}
    tier.itom.microfocus.com/backend: backend
spec:
  template:
    metadata:
      labels:
        app: itom-omi-csr-granter
        itom.microfocus.com/capability: internal-integration
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
    spec:
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount }}
      restartPolicy: OnFailure
      securityContext:
        runAsUser: {{ .Values.global.securityContext.user }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      {{- include "helm-lib.containers.vaultInit" (dict "certNames" (printf "Common_Name:%s,Additional_SAN:%s" .Values.global.externalAccessHost .Values.global.externalAccessHost) "Values" .Values) | nindent 6 }}

      containers:
        - name: csr-granter
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.internalIntegrationImages.itomOmiCSRGranter.image }}:{{ .Values.internalIntegrationImages.itomOmiCSRGranter.imageTag }}
          imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
          resources:
            requests:
              memory: "512Mi"
              cpu: "0.1"
            limits:
              memory: "512Mi"
              cpu: "1"
          securityContext:
            runAsUser: {{ .Values.global.securityContext.user }}
            runAsGroup: {{ .Values.global.securityContext.fsGroup }}            
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
              - ALL
          env:
            - name: "PERMITTED_NODE_NAMES"
              value: {{ .Values.global.internalIntegration.permittedNodeNames }}
            - name: "GODEBUG"
              value: "x509ignoreCN=0"
          volumeMounts:
            - name: tmp-storage
              mountPath: /tmp
            - name: podinfo
              mountPath: /etc/podinfo
            - name: vault-token
              mountPath: /var/run/secrets/boostport.com
      {{- with ( coalesce .Values.nodeSelector .Values.global.nodeSelector ) }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: podinfo
          downwardAPI:
            items:
              - path: "namespace"
                fieldRef:
                  fieldPath: metadata.namespace
        - name: vault-token
          emptyDir: {}
        - name: tmp-storage
          emptyDir:
            medium: Memory
{{ end }}
