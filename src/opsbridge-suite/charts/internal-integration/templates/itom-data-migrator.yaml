apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    deployment.microfocus.com/runlevel: UP
  name: itom-data-migrator-{{ randAlphaNum 5 | lower }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Name }}
    app.kubernetes.io/name: itom-data-migrator
    app.kubernetes.io/version: {{.Values.internalIntegrationImages.itomDataMigrator.imageTag }}
    itom.microfocus.com/capability: opsbridge-suite
    itom.microfocus.com/randomid: {{ uuidv4 }}
    tier.itom.microfocus.com/backend: backend
spec:
  template:
    metadata:
      labels:
        app: itom-data-migrator
        itom.microfocus.com/capability: internal-integration
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
    spec:
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount }}
      restartPolicy: OnFailure
      securityContext:
        runAsUser: {{ .Values.global.securityContext.user }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      {{ if eq (((.Values.global.services.opticDataLake).deploy) | toString) "false" }}
      {{- include "helm-lib.waitFor" ( dict "service" (include "helm-lib.getExternalIdmHost" . | default .Values.global.idm.serviceName) "port" (include "helm-lib.getExternalIdmPort" . | default .Values.global.idm.internalPort) "Values" .Values) | nindent 6 }}
      {{ else }}  
      {{- include "helm-lib.waitFor" ( dict "service" (include "helm-lib.getInternalIdmHost" . | default "itom-idm-svc") "port" (include "helm-lib.getInternalIdmPort" . | default 18443) "Values" .Values) | nindent 6 }}
      {{ end }}    
      {{- include "helm-lib.waitFor" ( dict "service" (include "helm-lib.getDiAdminHost" . | default "itom-di-administration-svc") "port" (include "helm-lib.getDiAdminPort" . | default 18443) "Values" .Values) | nindent 6 }}
      {{- include "helm-lib.containers.vaultInit" (dict "certNames" (printf "Common_Name:%s,Additional_SAN:%s" .Values.global.externalAccessHost .Values.global.externalAccessHost) "Values" .Values) | nindent 6 }}

      - name: cacert-bundler
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.internalIntegrationImages.cacertBundler.image }}:{{ .Values.internalIntegrationImages.cacertBundler.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "5m"
            memory: "5Mi"
        securityContext:
          runAsUser: {{ .Values.global.securityContext.user }}
          runAsGroup: {{ .Values.global.securityContext.fsGroup }}          
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        env:
        - name: "OUTPUT_PATH"
          value: "{{ .Values.cacerts.folder }}/{{ .Values.cacerts.file }}"
        - name: "CACERTS"
          value: /var/run/secrets/boostport.com/issue_ca.crt{{ if (hasKey .Values.global "tlsTruststore") }}:{{ .Values.externalCerts.path }}{{ end }}
        volumeMounts:
        - name: "vault-token"
          mountPath: /var/run/secrets/boostport.com
      {{- if (hasKey .Values.global "tlsTruststore") }}
        - name: {{ .Values.externalCerts.volumeName }}
          mountPath: {{ .Values.externalCerts.path }}
      {{- end }}
        - name: {{ .Values.cacerts.volumeName }}
          mountPath: {{ .Values.cacerts.folder }}
      containers:
        - name: itom-data-migrator
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.internalIntegrationImages.itomDataMigrator.image }}:{{ .Values.internalIntegrationImages.itomDataMigrator.imageTag }}
          imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
          resources:
            requests:
              memory: "512Mi"
              cpu: "0.1"
            limits:
              memory: "4Gi"
              cpu: "1"
          securityContext:
            runAsUser: {{ .Values.global.securityContext.user }}
            runAsGroup: {{ .Values.global.securityContext.fsGroup }}           
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
              - ALL
          env:
          - name: "LOG_LEVEL"
            value: "info"
          - name: "SCHEMA"
            value: "mf_shared_{{ if hasKey .Values.global.di "tenant" }} {{- .Values.global.di.tenant -}} {{ else -}} provider {{- end }}_{{ .Values.global.di.deployment }}"
          - name: ITOM_METADATA_SCHEMA
            value: "itom_di_metadata_{{ if hasKey .Values.global.di "tenant" }} {{- .Values.global.di.tenant -}} {{ else -}} provider {{- end }}_{{ .Values.global.di.deployment }}"
          - name: "IS_VERTICA_EMBEDDED"
            value: "{{ .Values.global.vertica.embedded }}"
          - name: "EXTERNAL_VERTICA_HOSTNAMES"
            value: {{ .Values.global.vertica.host }}
          - name: "EXTERNAL_VERTICA_PORT"
            value: "{{ .Values.global.vertica.port }}"
          - name: "EXTERNAL_VERTICA_DB"
            value: {{ .Values.global.vertica.db }}
          - name: "EXTERNAL_VERTICA_USERNAME"
            value: {{ .Values.global.vertica.rwuser }}
          - name: "EXTERNAL_VERTICA_PASS_KEY"
            value: {{ .Values.global.vertica.rwuserkey }}
          - name: "EXTERNAL_VERTICA_TLS_MODE"
            value: "{{ .Values.global.vertica.tlsEnabled }}"         
          - name: "EXTERNAL_VERTICA_CACERT_PATH"
            value: {{ .Values.cacerts.folder }}/{{ .Values.cacerts.file }}
          - name: "DI_ADMIN_URL"
            value: "https://{{ include "helm-lib.getDiAdminHost" . | default "itom-di-administration-svc" }}:{{ include "helm-lib.getDiAdminPort" . | default "18443" }}"
          - name: OPR_EVENT_FLEX
            value: "{{ .Values.global.oprEventFlex }}"
          - name: OPR_EVENT_FORCE_FLEX_TABLE_UPDATE
            value: "{{ .Values.global.oprEventForceFlexTableUpdate }}"            
          - name: CACERT_PATH
            value: {{ .Values.cacerts.folder }}/{{ .Values.cacerts.file }}
          {{ if eq (((.Values.global.services.opticDataLake).deploy) | toString) "false" }}
          - name: IDM_URL               
            value: "https://{{ include "helm-lib.getExternalIdmHost" . | default .Values.global.idm.serviceName }}:{{ include "helm-lib.getExternalIdmPort" . | default .Values.global.idm.internalPort }}/idm-service" 
          {{ if ((((.Values.global.services).opticDataLake).externalOpticDataLake).integrationUser) }}
          - name: IDM_INTEGRATION_USER
            value: {{ .Values.global.services.opticDataLake.externalOpticDataLake.integrationUser | default "integration_admin" | quote }}
          - name: IDM_INTEGRATION_USER_PASSWORD_KEY
            value: {{ .Values.global.services.opticDataLake.externalOpticDataLake.integrationPasswordKey | default "idm_integration_admin_password" | quote }}
          {{ end }}
          {{ else }}  
          - name: IDM_URL
            value: "https://{{ include "helm-lib.getInternalIdmHost" . | default "itom-idm-svc" }}:{{ include "helm-lib.getInternalIdmPort" . | default "18443" }}/idm-service"     
          - name: IDM_INTEGRATION_USER
            value: {{ .Values.global.idm.integrationUser | default "integration_admin" | quote }}
          - name: IDM_INTEGRATION_USER_PASSWORD_KEY
            value: {{ .Values.global.idm.integrationUserKey | default "idm_integration_admin_password" | quote }}
          {{ end }}         
          - name: GODEBUG
            value: x509ignoreCN=0
          - name: "EXTERNAL_HOSTNAME"
            value: {{ .Values.global.externalAccessHost }}
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name            
          volumeMounts:
            - name: {{ .Values.cacerts.volumeName }}
              mountPath: {{ .Values.cacerts.folder }}
            - name: tmp-storage
              mountPath: /tmp
            - name: podinfo
              mountPath: /etc/podinfo
            - name: vault-token
              mountPath: /var/run/secrets/boostport.com
            - name: log-volume
              mountPath: /logs
              subPathExpr: jobs/data-migrator/$(MY_POD_NAME)  
      {{- with ( coalesce .Values.nodeSelector .Values.global.nodeSelector ) }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      {{- if (hasKey .Values.global "tlsTruststore") }}
      - name: {{ .Values.externalCerts.volumeName }}
        configMap:
          name: {{ .Values.global.tlsTruststore }}
          optional: true
      {{- end }}
      - name: {{ .Values.cacerts.volumeName }}
        emptyDir: {}
      - name: log-volume
        {{- include "helm-lib.pvcStorage" (dict "claim" "logVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      - name: podinfo
        downwardAPI:
          items:
            - path: "namespace"
              fieldRef:
                fieldPath: metadata.namespace
      - name: vault-token
        emptyDir: {}
      - name: tmp-storage
        emptyDir:
          medium: Memory
