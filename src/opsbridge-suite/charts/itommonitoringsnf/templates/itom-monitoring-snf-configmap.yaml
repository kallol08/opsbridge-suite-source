{{/*# Copyright 2023 Open Text.*/}}

{{/*# The only warranties for products and services of Open Text and its affiliates*/}}
{{/*# and licensors ("Open Text") are as may be set forth in the express warranty*/}}
{{/*# statements accompanying such products and services. Nothing herein should be*/}}
{{/*# construed as constituting an additional warranty. Open Text shall not be*/}}
{{/*# liable for technical or editorial errors or omissions contained herein. The*/}}
{{/*# information contained herein is subject to change without notice.*/}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.itommonitoringsnf.capname }}-cm
  labels:
    app.kubernetes.io/name: {{ .Values.itommonitoringsnf.capname }}-cm
    app.kubernetes.io/managed-by: {{ .Release.Namespace }}
    app.kubernetes.io/version: {{ .Values.itommonitoringsnf.imageTag }}
    itom.microfocus.com/capability: HyperscaleObservability
    tier.itom.microfocus.com/backend: backend
    tier.itom.microfocus.com/frontend: fronend
data:
  {{- if .Values.global.database.internal }}
  onestack.dbType: "POSTGRESQL"
  onestack.dbhost: {{ include "helm-lib.dbHost" . | quote }}
  onestack.dbport: {{ include "helm-lib.dbPort" . | quote }}
  onestack.dbname: {{ include "helm-lib.dbName" . | quote }}
  onestack.dbschema: {{ coalesce .Values.deployment.database.schema "monitoringsnfschema" | quote }}
  onestack.dbuser: {{ coalesce .Values.deployment.database.user "monitoringsnfuser" | quote }}
  onestack.dbdialect: "org.hibernate.dialect.PostgreSQL95Dialect"
  onestack.dbConnectionString: "" 
  {{- else }}
  {{- if eq (include "helm-lib.dbType" . ) "postgresql" }}
  onestack.dbType: "POSTGRESQL"
  onestack.dbhost: {{ include "helm-lib.dbHost" . | quote }}
  onestack.dbport: {{ include "helm-lib.dbPort" . | quote }}
  onestack.dbname: {{ include "helm-lib.dbName" . | quote }}
  onestack.dbuser: {{ include "helm-lib.dbUser" . | quote }}
  onestack.dbschema: {{ coalesce .Values.deployment.database.schema "monitoringsnfschema" | quote }}
  onestack.dbdialect: "org.hibernate.dialect.PostgreSQL95Dialect"
  onestack.dbConnectionString: ""
  {{- else if eq (include "helm-lib.dbType" . ) "oracle" }}
  onestack.dbType: "ORACLE"
  onestack.dbhost: {{ include "helm-lib.dbHost" . | quote }}
  onestack.dbport: {{ include "helm-lib.dbPort" . | quote }}
  onestack.dbname: {{ include "helm-lib.dbName" . | quote }}
  onestack.dbschema: {{ include "helm-lib.dbSchema" . | default "monitoringsnfschema" | quote }}
  onestack.dbuser: {{ coalesce .Values.deployment.database.user .Values.global.database.user .Values.global.database.user "monitoringsnfuser" | quote }}
  onestack.dbdialect: "org.hibernate.dialect.Oracle12cDialect"
  {{- $dbProtocol := "TCP" -}}
  {{- if or .Values.deployment.database.tlsEnabled .Values.global.database.tlsEnabled }}
  {{- $dbProtocol = "TCPS" -}}
  {{- end }}

  {{- $oraConnectionString := (coalesce .Values.deployment.database.oracleConnectionString .Values.global.database.oracleConnectionString) }}
  {{- $oraServiceName := (coalesce .Values.deployment.database.oracleServiceName .Values.global.database.oracleServiceName) }}
  {{- $oraServiceSid := (coalesce .Values.deployment.database.oracleSid .Values.global.database.oracleSid) }}
  {{- if $oraConnectionString }}
  onestack.dbConnectionString: {{ $oraConnectionString | quote }}
  {{- else if $oraServiceName }}
  onestack.dbConnectionString: "(DESCRIPTION=(ADDRESS=(PROTOCOL={{ $dbProtocol }})(HOST={{ include "helm-lib.dbHost" . }})(PORT={{ include "helm-lib.dbPort" . }}))(CONNECT_DATA=(SERVICE_NAME={{ $oraServiceName }})))"
  {{- else if $oraServiceSid }}
  onestack.dbConnectionString: "(DESCRIPTION=(ADDRESS=(PROTOCOL={{ $dbProtocol }})(HOST={{ include "helm-lib.dbHost" . }})(PORT={{ include "helm-lib.dbPort" . }}))(CONNECT_DATA=(SID={{ $oraServiceSid }})))"
  {{- else }}
  {{- fail "Unable to determine oracle connection string" }}
  {{- end }}
  {{- end }}
  {{- end }}

  onestack.dbpassword.key: {{ include "helm-lib.dbUserKey" . }}

  {{- if .Values.global.vaultAppRole }}
  onestack.approle: {{ .Values.global.vaultAppRole }}
  onestack.approleid: {{ required "Required value not defined: global.vaultRoleId" .Values.global.vaultRoleId }}
  {{- end }}
  
  suite.vault_addr: https://{{ include "helm-lib.getInternalIdmHost" . | default "itom-idm-svc" }}:{{ include "helm-lib.getInternalIdmPort" . | default "8200" }}
  suite.idm_integration_user: {{ default "integration_admin" .Values.global.idm.integrationUser | quote }}
  suite.idm_integration_user_password_key: {{ default  "idm_integration_admin_password" .Values.global.idm.integrationUserKey | quote }}
  suite.idm_transport_user: {{ default  "transport_admin" .Values.global.idm.transportUser | quote }}
  suite.idm_transport_key: {{ default  "idm_transport_admin_password" .Values.global.idm.transportUserKey | quote }}
  suite.idm_organization: "Provider"
  suite.idm_addr: https://{{ include "helm-lib.getInternalIdmHost" . | default "itom-idm-svc" }}:{{ include "helm-lib.getInternalIdmPort" . | default "18443" }}
  external.host: {{ .Values.global.externalAccessHost }}
  onestack.sslClientAuthentication: {{ coalesce .Values.deployment.database.sslClientAuthentication .Values.global.database.sslClientAuthentication | quote }}
  onestack.sslServerDnMatch: {{ coalesce .Values.deployment.database.sslServerDnMatch .Values.global.database.sslServerDnMatch | quote }}

  onestack.redis.host: {{ default "cs-redis" .Values.redis.host }}
  onestack.redis.port: {{ default "6380" .Values.redis.port|quote }}
  onestack.redis.passwdkey: {{ default "redis_pwd" .Values.redis.passwdkey|quote }}
