apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "prometheus-cert-exporter.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels: {{ include "prometheus-cert-exporter.labels" . | indent 4 }}
    deployments.microfocus.com/component: itom-prometheus-cert-exporter
  annotations:
    deployment.microfocus.com/default-replica-count: "1"
    deployment.microfocus.com/runlevel: STANDBY
spec:
  selector:
    matchLabels:
      app: {{ template "prometheus-cert-exporter.name" . }}
      release: {{ .Release.Name }}
  replicas: {{ .Values.deployment.replicas }}
  template:
    metadata:
      name: cert-exporter
      labels: {{ include "prometheus-cert-exporter.labels" . | indent 8 }}
        deployments.microfocus.com/component: itom-prometheus-cert-exporter
      {{- if .Values.podAnnotations }}
      annotations:
      {{- toYaml .Values.podAnnotations | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ template "prometheus-cert-exporter.serviceAccountName" . }}
      {{- if .Values.global.securityContext }}
      securityContext:
        runAsUser: {{ default 1999 .Values.global.securityContext.user }}
        runAsGroup: {{ default 1999 .Values.global.securityContext.fsGroup }}
        fsGroup: {{ default 1999 .Values.global.securityContext.fsGroup }}
        supplementalGroups: [{{ default 1999 .Values.global.securityContext.fsGroup }}]
        seccompProfile:
          type: RuntimeDefault
        runAsNonRoot: true
      {{- end }}
      initContainers:
        {{- $serviceName := (include "prometheus-cert-exporter.fullname" .) }}
        {{- $certNames := printf "Common_Name:%s,Additional_SAN:%s.%s/%s.%s.svc" $serviceName $serviceName .Release.Namespace $serviceName .Release.Namespace -}}
        {{- include "helm-lib.containers.vaultInit" (dict "certNames" $certNames "Values" .Values) | nindent 8 }}
        {{- if .Values.certExporter.configSelector.labelName }}
        - name: args-config
          image: "{{ $.Values.global.docker.registry  }}/{{ $.Values.global.docker.orgName }}/{{ $.Values.sidecar.image  }}:{{ $.Values.sidecar.imageTag }}"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          resources:
            limits:
              cpu: 50m
              memory: 100Mi
            requests:
              cpu: 5m
              memory: 50Mi
          env:
            - name: METHOD
              value: LIST
            - name: LABEL
              value: {{ .Values.certExporter.configSelector.labelName }}
            - name: LABEL_VALUE
              value: {{ .Values.certExporter.configSelector.labelValue | quote }}
            - name: FOLDER
              value: /cert-exporter/config
          volumeMounts:
            - name: config
              mountPath: /cert-exporter/config
        {{- end }}
      containers:
      {{- include "helm-lib.containers.vaultRenew" . | nindent 6 }}
      - name: cert-exporter
        image: "{{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.certExporter.image }}:{{ .Values.certExporter.imageTag }}"
        imagePullPolicy: {{ .Values.certExporter.pullPolicy }}
        ports:
          - name: metrics
            containerPort: {{ .Values.service.targetPort }}
            protocol: TCP
        args:
        - /node-cert-exporter
        - --labels=$(ARGS_LABELS)
        - --endpoints=$(ARGS_ENDPOINTS)
        - --names=$(ARGS_NAMES)
        - --cm-names=$(ARGS_CM_NAMES)
        - --config-dir=/cert-exporter/config
        - --tls-min-version={{ include "helm-lib.getTlsMinVersion" (dict "format" "1" "Values" .Values) }}
        - --tls-cipher-suites={{ include "helm-lib.getTlsCiphers" . }}
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        env:
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: CLUSTER_ROLE_CREATE
            value: {{ .Values.global.rbac.clusterRoleCreate | quote }}
          {{- if .Values.certExporter.configMapName }}
          - name: ARGS_ENDPOINTS
            valueFrom:
              configMapKeyRef:
                key: ARGS_ENDPOINTS
                name: {{ .Values.certExporter.configMapName }}
                optional: true
          - name: ARGS_LABELS
            valueFrom:
              configMapKeyRef:
                key: ARGS_LABELS
                name: {{ .Values.certExporter.configMapName }}
                optional: true
          - name: ARGS_NAMES
            valueFrom:
              configMapKeyRef:
                key: ARGS_NAMES
                name: {{ .Values.certExporter.configMapName }}
                optional: true
          - name: ARGS_CM_NAMES
            valueFrom:
              configMapKeyRef:
                key: ARGS_CM_NAMES
                name: {{ .Values.certExporter.configMapName }}
                optional: true
          {{- else }}
          - name: ARGS_ENDPOINTS
            value: ""
          - name: ARGS_LABELS
            value: ""
          - name: ARGS_NAMES
            value: ""
          - name: ARGS_CM_NAMES
            value: ""
          {{- end }}
          - name: USER
            value: {{ template "prometheus-cert-exporter.serviceAccountName" . }}
          - name: K8S_APISERVER_PORT
            value: {{ .Values.global.cluster.k8sApiserverPort | quote }}
          - name: K8S_PROVIDER
            value: {{ .Values.global.cluster.k8sProvider | quote }}
          {{- if .Values.global.proxy.https_proxy }}
          - name: HTTPS_PROXY
            value: "{{ .Values.global.proxy.https_proxy }}"
          {{- end }}
          {{- if .Values.global.proxy.http_proxy }}
          - name: HTTP_PROXY
            value: "{{ .Values.global.proxy.http_proxy }}"
          {{- end }}
          - name: NO_PROXY
          {{- if .Values.global.proxy.no_proxy }}
            value: "{{ .Values.global.proxy.no_proxy }}"
          {{- else }}
            value: "127.0.0.1,localhost"
          {{- end }}
{{/*        #livenessProbe:*/}}
{{/*        #  httpGet:*/}}
{{/*        #    path: /*/}}
{{/*        #    port: {{ .Values.service.port }}*/}}
{{/*        #readinessProbe:*/}}
{{/*        #  httpGet:*/}}
{{/*        #    path: /*/}}
{{/*        #    port: {{ .Values.service.port }}*/}}
        {{- if .Values.resources }}
        resources:
        {{- toYaml .Values.resources | nindent 10 }}
        {{- end }}
        volumeMounts:
        - name: vault-token
          mountPath: /var/run/secrets/boostport.com
        - name: config
          mountPath: /cert-exporter/config
      {{- if .Values.certExporter.configSelector.labelName }}
      - name: watcher
        image: "{{ $.Values.global.docker.registry  }}/{{ $.Values.global.docker.orgName }}/{{ $.Values.sidecar.image  }}:{{ $.Values.sidecar.imageTag }}"
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
        resources:
          limits:
            cpu: 50m
            memory: 100Mi
          requests:
            cpu: 5m
            memory: 50Mi
        env:
          - name: METHOD
            value: WATCH
          - name: LABEL
            value: {{ .Values.certExporter.configSelector.labelName }}
          - name: LABEL_VALUE
            value: {{ .Values.certExporter.configSelector.labelValue | quote }}
          - name: FOLDER
            value: /cert-exporter/config
        volumeMounts:
          - name: config
            mountPath: /cert-exporter/config
      {{- end }}
      volumes:
        - name: vault-token
          emptyDir: {}
        - name: config
          emptyDir: {}
      {{- if .Values.affinity }}
      affinity:
      {{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
      {{- with ( coalesce .Values.nodeSelector .Values.global.nodeSelector ) }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.global.cluster.tolerations }}
      tolerations:
      {{- toYaml .Values.global.cluster.tolerations | nindent 8 }}
      {{- end }}
