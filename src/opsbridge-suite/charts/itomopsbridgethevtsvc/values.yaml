# Copyright 2023 Open Text.

# The only warranties for products and services of Open Text and its affiliates
# and licensors ("Open Text") are as may be set forth in the express warranty
# statements accompanying such products and services. Nothing herein should be
# construed as constituting an additional warranty. Open Text shall not be
# liable for technical or editorial errors or omissions contained herein. The
# information contained herein is subject to change without notice.

thpevtsvc:
  image: "itom-monitoring-threshold-event-service"
  imageTag: 24.2-66
  config:
    replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: "400Mi"
    requests:
      cpu: "0.2"
      memory: "100Mi"
thpcln:
  image: "itom-monitoring-threshold-cleanup-job"
  imageTag: 24.2-60
  config:
    replicaCount: 1
  resources:
    limits:
      cpu: "1"
      memory: "100Mi"
    requests:
      cpu: "0.1"
      memory: "10Mi"      
thpinitcont:
  image: "itom-monitoring-threshold-processor-init-container"
  imageTag: 24.2-60
redis:
  svcname: "cs-redis"
  port: "6380"
  srvbasename: cs-redis
  passwdkey: redis_pwd
deployment:
  rbac:
    serviceAccount: itom-monitoring-threshold-processor-sa
global:
  busybox:
    image: itom-busybox
    imageTag: 1.32.0-006
  toolsBase:
    image: itom-tools-base
    imageTag: 1.1.0-0011
  securityContext:
    user: "1999"
    fsGroup: "1999"
  rbac:
    serviceAccountCreate: true
    roleCreate: true    
  nodeSelector: {}
  persistence:
    enabled: false
    configVolumeClaim: 
    logVolumeClaim:
  suiteLabel: Worker
  suiteLabelValue: label
  services:
    opticReporting:
      #deploy: true
    opticDataLake:
      #deploy: true                            # Uncomment the parameter when using Shared Optic Data Lake while installing HyperscaleObservability or AutomaticEventCorrelation or OpticReporting capabilities
      externalOpticDataLake:
        externalAccessHost:                     # External Access Host of the providing deployment
        externalAccessPort:                     # Ingress Controller Port
        integrationUser:                        # IDM Integration User of the providing deployment
        integrationPasswordKey:  # [DO NOT CHANGE] IDM Integration User password of the providing deployment
        # User must use one of the below connection mechanisms if using Shared Optic Data Lake
        connectUsingNamespace: # Connect using cross-namespace communication
          namespace:                            # Namespace of the providing deployment
        connectUsingExternalAccessHost: # Connect using External Access Host
          diReceiverPort:                       # (External Host) Port of OPTIC Data Lake Ingestion Service
          diAdminPort:                          # (External Host) Port of OPTIC Data Lake Administration Service
          diDataAccessPort:                     # (External Host) Port of OPTIC Data Lake Data Access Service
          diPulsarSslPort:                      # (External Host) Port of OPTIC Data Lake Pulsar SSL service
          diPulsarWebPort:                      # (External Host) Port of OPTIC Data Lake Pulsar Web service  

  # If isDemo is true, this will allow use of ephemeral storage and other POC aspects.
  isDemo: false
  docker:
    # set the global.docker.registry and orgName to your internal Docker registry/org
    registry: localhost:5000
    orgName: hpeswitom
    imagePullPolicy: IfNotPresent
  vault:
    realmList: "RE:365"

  # Global image references for vault
  vaultRenew:
    image: kubernetes-vault-renew
    imageTag: 0.8.0-004
  vaultInit:
    image: kubernetes-vault-init
    imageTag: 0.8.0-004

  prometheus:
    deployPrometheusConfig: true      #true = deploy scraping rules (ServiceMonitor, PodMonitor) and alerts (PrometheusRule)
    deployGrafanaConfig: true         #true = deploy configmaps defining the Grafana dashboards
    prometheusSelector:               #define the label(s) that Prometheus looks for when discovering rules.
      prometheus_config: "1"
    grafanaSelector:                  #define the label(s) that Grafana looks for when discovering dashboards.
      grafana_dashboard: "1"

  monitoringService:
    embeddedStaticThresholding: false
    isStaticThresholdingEnabled: true
    isDynamicThresholdingEnabled: true
  di:
    pulsar:
      tenant: 
      namespace: 
      client:
        tenantAdminSecret:
