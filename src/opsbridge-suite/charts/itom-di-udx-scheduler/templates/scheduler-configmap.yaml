{{/* # */}}
{{/* # Copyright 2023 Open Text. */}}
{{/* # */}}
{{/* # The only warranties for products and services of Open Text and its affiliates and  */}}
{{/* # licensors (“Open Text”) are as may be set forth in the express warranty statements  */}}
{{/* # accompanying such products and services. Nothing herein should be construed as */}}
{{/* # constituting an additional warranty. Open Text shall not be liable for technical or */}}
{{/* # editorial errors or omissions contained herein. The information contained herein is  */}}
{{/* # subject to change without notice. */}}
{{/* # */}}
{{/* # Except as specifically indicated otherwise, this document contains confidential  */}}
{{/* # information and a valid license is required for possession, use or copying. If this work  */}}
{{/* # is provided to the U.S. Government, consistent with FAR 12.211 and 12.212, Commercial Computer  */}}
{{/* # Software, Computer Software Documentation, and Technical Data for Commercial Items are licensed to */}}
{{/* # the U.S. Government under vendor’s standard commercial license. */}}
{{/* # */}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ template "scheduler.fullname" . }}-{{ .Values.scheduler.component }}"
  namespace: {{ .Release.namespace }}
  labels:
    app: {{ template "scheduler.name" . }}
    chart: {{ template "scheduler.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: {{ .Values.scheduler.component }}
    cluster: {{ template "scheduler.fullname" . }}
data:
  threads: {{ .Values.scheduler.configData.threads | quote }}
  vertica.datasource.host: {{ template "vertica.host" .}}
  vertica.datasource.port: {{ template "vertica.port" .}}
  vertica.datasource.database: {{ template "vertica.db" .}}
  vertica.datasource.username: {{ template "vertica.rwuser" .}}
  vertica.datasource.resourcepool: {{ template "resource.pool" .}}
  vertica.datasource.password.key: {{ .Values.global.vertica.rwuserkey | quote }}
  vertica.datasource.readonly.username: {{ template "vertica.rouser" .}}
  vertica.datasource.is.tls.enabled: {{ .Values.global.vertica.tlsEnabled | quote  }}
  batch.duration: {{ .Values.scheduler.configData.batch.duration | quote }}
  batch.units: {{ .Values.scheduler.configData.batch.units }}
  copyRead.timeout: {{ .Values.scheduler.configData.copyRead.timeout | quote }}
  copyRead.units: {{ .Values.scheduler.configData.copyRead.units}}
  receiverQueue.size: {{ .Values.scheduler.configData.receiverQueue.size | quote }}
  heartbeat.timeout: {{ .Values.scheduler.configData.heartbeat.timeout | quote }}
  {{/* #tenant and deployment for schema name */}}
  {{ include "validateTenantAndDeploymentForUdxScheduler" . | required "The total length of tenant and deployment should not be more than 70 characters" }}
  scheduler.version: {{ .Values.scheduler.version }}
  scheduler.enable.rpm.version.check: {{ .Values.scheduler.configData.scheduler.enableRpmVersionCheck | quote }}
  scheduler.log.level: {{ .Values.scheduler.configData.logLevel | quote }}
  scheduler.udx.log.level: {{ .Values.scheduler.configData.udxLogLevel | quote }}
  scheduler.enable.performance.test: {{ .Values.scheduler.configData.enablePerformanceTest | quote }}
  scheduler.jdbc.opt: {{ .Values.scheduler.configData.scheduler.jdbcOpts | quote }}
  scheduler.jvm.args: {{ .Values.scheduler.config.jvmArgs | quote }}
  scheduler.explicit.statement.execute: {{ .Values.scheduler.configData.scheduler.explicitStatementExecution | quote }}
  scheduler.pulsar.topic.partition.auto.refresh: {{ .Values.scheduler.configData.scheduler.pulsarTopicAutoRefreshEnabled | quote }}
  scheduler.parser.parameters: {{ .Values.scheduler.configData.scheduler.parserParameters | quote }}

  scheduler.configserver.hostname: {{ .Values.diadmin.config.adminServiceName | quote }}
  scheduler.configserver.port: {{ .Values.diadmin.config.adminPort | quote }}
  scheduler.configserver.connection.retry.delay.ms: {{ .Values.scheduler.configData.scheduler.configServer.connectRetryDelayMs | quote }}
  scheduler.configserver.client.heart.beat: {{ .Values.scheduler.configData.scheduler.configServer.clientHeartBeat | quote }}
  scheduler.configserver.server.heart.beat: {{ .Values.scheduler.configData.scheduler.configServer.serverHeartBeat | quote }}
  scheduler.configserver.message.buffer.size.limit.mb: {{ .Values.scheduler.configData.scheduler.configServer.messageBufferSizeLimitInMb | quote }}
  scheduler.failed.event.initial.delay.millis: {{ .Values.scheduler.configData.scheduler.configServer.failedEventInitialDelayMillis | quote }}
  scheduler.failed.event.retry.delay.millis: {{ .Values.scheduler.configData.scheduler.configServer.failedEventRetryDelayMillis | quote }}
  scheduler.enable.restart.scheduler.job: {{ .Values.scheduler.configData.scheduler.enableRestartSchedulerJob | quote }}
  scheduler.max.memory.usage.percentage: {{ .Values.scheduler.configData.scheduler.maxMemoryUsagePercentage | quote }}
  scheduler.data.retention.job.cron.schedule: {{ .Values.scheduler.configData.scheduler.dataRetentionJobCronSchedule | quote }}
  scheduler.enable.data.retention.job: {{ .Values.scheduler.configData.scheduler.enableDataRetentionJob | quote }}
  scheduler.enable.udx.has.message.check: {{ .Values.scheduler.configData.scheduler.enableUdxHasMessageCheck | quote }}
  scheduler.load.method: {{ .Values.scheduler.configData.scheduler.copyLoadMethod | quote }}
  scheduler.enable.frame.backlog.check: {{ .Values.scheduler.configData.scheduler.enableFrameBacklogCheck | quote }}
  scheduler.udx.ack.grouping.time.millis: {{ .Values.scheduler.configData.scheduler.udxAckGroupingTimeMillis | quote }}
  scheduler.udx.max.message.count: {{ .Values.scheduler.configData.scheduler.udxMaxMessageCount | quote }}
  scheduler.udx.tls.hostname.verification: {{ .Values.scheduler.configData.scheduler.udxTlsHostnameVerification | quote }}
  scheduler.udx.max.stream.size.bytes: {{ .Values.scheduler.configData.scheduler.udxMaxStreamSizeBytes | quote }}
  scheduler.staggered.sleep.duration.millis: {{ .Values.scheduler.configData.scheduler.staggeredSleepDurationMillis | quote }}
  scheduler.supported.vertica.versions: {{ .Values.scheduler.configData.scheduler.supportedVerticaVersions | quote }}
  scheduler.supported.udx.rpm.versions: {{ .Values.scheduler.configData.scheduler.supportedUdxRpmVersions | quote }}
  scheduler.max.minutes.past.last.batch.update: {{ .Values.scheduler.configData.scheduler.maxMinutesPastLastBatchUpdate | quote }}
  scheduler.restart.time.interval.in.hours: {{ .Values.scheduler.configData.scheduler.restartTimeIntervalInHours | quote }}
  scheduler.frame.duration: {{ template "scheduler.frame_duration" .}}
  scheduler.udx.pulsar.client.cleanup: {{ .Values.scheduler.configData.scheduler.udxPulsarClientCleanUp | quote }}
  scheduler.lane.worker.connection.close.threshold: {{ .Values.scheduler.configData.scheduler.laneWorkerConnectionCloseThreshold | quote }}
  scheduler.vdb.connection.close.threshold: {{ .Values.scheduler.configData.scheduler.vdbConnectionCloseThreshold | quote }}
  scheduler.udx.pulsar.client.cleanup.threshold: {{ .Values.scheduler.configData.scheduler.udxPulsarClientCleanupThreshold | quote }}
  scheduler.alive.check.time.interval.seconds: {{ .Values.scheduler.configData.scheduler.aliveCheckTimeIntervalSeconds | quote }}
  scheduler.enable.microbatch.backlog.check: {{ .Values.scheduler.configData.scheduler.enableMicrobatchBacklogCheck | quote }}
  scheduler.enable.subscription.cleaner: {{ .Values.scheduler.configData.scheduler.enableSubscriptionCleaner | quote }}
  scheduler.enable.shared.vertica: {{ .Values.scheduler.configData.scheduler.enableSharedVertica | quote}}
  scheduler.constant.sleep.duration.milliseconds: {{ .Values.scheduler.configData.scheduler.constantSleepDurationMilliSeconds | quote}}
  scheduler.minimum.microbatch.duration.milliseconds: {{ .Values.scheduler.configData.scheduler.minMicrobatchDurationMilliSeconds | quote}}
  scheduler.load.factor: {{ .Values.scheduler.configData.loadFactor | quote }}
  scheduler.pulsar.tenant.provider.name: {{ .Values.scheduler.configData.scheduler.pulsarTenantProviderName | quote }}
  scheduler.readtimeout.resiliency.enable: {{ .Values.scheduler.configData.scheduler.readTimeOutResiliency.enable | quote }}
  scheduler.readtimeout.resiliency.nomsg.read.copy.count: {{ .Values.scheduler.configData.scheduler.readTimeOutResiliency.noMsgReadCopyCount | quote }}
  {{- if .Values.global.di.pulsar }}
  pulsar.tenant: {{ default "public" .Values.global.di.pulsar.tenant | quote}}
  pulsar.namespace: {{ default "default" .Values.global.di.pulsar.namespace | quote }}
  {{- else }}
  pulsar.tenant: "public"
  pulsar.namespace: "default"
  {{- end }}
  pulsar.broker.service.port: {{ .Values.broker.ports.pulsar | quote }}
  pulsar.broker.service.port.tls: {{ include "helm-lib.getDiPulsarBrokerClientPort" . | quote }}
  pulsar.web.service.port: {{ .Values.broker.ports.http | quote }}
  pulsar.web.service.port.tls: {{ include "helm-lib.getDiPulsarBrokerWebPort" . | quote }}
  pulsar.tls.hostname.verification: {{ .Values.scheduler.configData.pulsar.tlsHostnameVerification | quote }}
  pulsar.service.name: {{ include "helm-lib.getDiPulsarBrokerHost" . | quote }}
  pulsar.auth.class: {{ .Values.scheduler.configData.pulsar.authClass | quote }}
  pulsar.enable.message.acknowledgement: {{ .Values.scheduler.configData.pulsar.enableMessageAcknowledgement | quote }}
  pulsar.datasource.host: {{ template "pulsar.proxy_service_name" .}}
  pulsar.datasource.port: {{ template "pulsar.proxy_service_port" .}}
  pulsar.admin.datasource.host: {{ .Values.scheduler.configData.pulsarAdmin.host | quote }}
  pulsar.admin.datasource.port: {{ .Values.scheduler.configData.pulsarAdmin.port | quote }}
  administration.datasource.host: {{ .Values.diadmin.config.adminServiceName }}
  administration.datasource.port: {{ .Values.diadmin.config.adminPort | quote }}
  scheduler.retention: {{ .Values.scheduler.configData.history.retention | quote }}
  SCHED_UID: {{ .Values.global.securityContext.user | quote }}
  SCHED_GID: {{ .Values.global.securityContext.fsGroup | quote }}
  scheduler.avro.schema.evolution.enabled: {{ .Values.global.di.avroSchemaEvolutionEnabled | quote }}
  scheduler.multitenancy.enabled: {{ .Values.global.di.multiTenantEnabled | quote }}
  scheduler.max.allowed.tenants: {{ .Values.global.di.maxAllowedTenants | quote }}

{{- if .Values.global.tlsTruststore }}
  SCHEDULER_UDX_EXTERNAL_CAS: "ssl/serverCAs.crt" {{/* # relative path from SIMPLIFIED_SCHEDULER_HOME */}}
{{- else }}
  SCHEDULER_UDX_EXTERNAL_CAS: "ssl/vault/issue_ca.crt" {{/* # relative path from SIMPLIFIED_SCHEDULER_HOME */}}
{{- end }}

{{ toYaml .Values.scheduler.configData.env | indent 2 }}

  scheduler.logconfig.from.configmap: {{ .Values.scheduler.configData.scheduler.logConfigFromConfigmap | quote}}
  scheduler.logconfig.log.to.file: {{ .Values.global.di.logging.useFile | quote}}
  scheduler.server.tls.enabled.protocols: {{ .Values.scheduler.configData.scheduler.serverTlsEnabledProtocols | quote }}
