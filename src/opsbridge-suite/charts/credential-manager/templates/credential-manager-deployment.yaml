{{/*# Copyright 2018-2023 Open Text.*/}}
{{/*#*/}}
{{/*# The only warranties for products and services of Open Text and its affiliates and licensors (???Open Text???) are as may be*/}}
{{/*# set forth in the express warranty statements accompanying such products and services. Nothing herein should be construed*/}}
{{/*# as constituting an additional warranty. Open Text shall not be liable for technical or editorial errors or omissions*/}}
{{/*# contained herein. The information contained herein is subject to change without notice.*/}}
{{/*#*/}}
{{/*# Except as specifically indicated otherwise, this document contains confidential information and a valid license is*/}}
{{/*# required for possession, use or copying. If this work is provided to the U.S. Government, consistent with*/}}
{{/*# FAR 12.211 and 12.212, Commercial Computer Software, Computer Software Documentation, and Technical Data for*/}}
{{/*# Commercial Items are licensed to the U.S. Government under vendor???s standard commercial license.*/}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: credential-manager
  namespace: {{ .Release.Namespace }}
  annotations:
    deployment.microfocus.com/default-replica-count: "1"
    deployment.microfocus.com/runlevel: UP
spec:
  replicas: 1
  selector:
    matchLabels:
      name: credential-manager
  template:
    metadata:
      labels:
        name: credential-manager
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
    spec:
      securityContext:
        runAsUser: {{ .Values.global.securityContext.user }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
        supplementalGroups: [{{ .Values.global.securityContext.fsGroup }}]
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      {{- if (coalesce .Values.nodeSelector .Values.global.nodeSelector) }}
      {{- with ( coalesce .Values.nodeSelector .Values.global.nodeSelector ) }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
      {{- if .Values.global.rbac.serviceAccountCreate }}
      serviceAccount: credential-manager-sa
      serviceAccountName: credential-manager-sa
      {{- else }}
      serviceAccount: {{ required "Required value is not defined: serviceAccount" .Values.deployment.rbac.serviceAccount }}
      serviceAccountName: {{ required "Required value is not defined: serviceAccount" .Values.deployment.rbac.serviceAccount }}
      {{- end }}
      initContainers:
      {{- include "helm-lib.waitFor" (dict "service" (include "helm-lib.dbHost" .) "port" (include "helm-lib.dbPort" .) "Values" .Values) | nindent 6 }}
      {{- if .Values.deployment.featureGates.enableItomAutomationManagerIntegration }}
      {{- include "helm-lib.waitFor" (dict "service" "kafka-svc" "port" "9092" "Values" .Values) | nindent 6 }}
      {{- end }}
      {{- include "helm-lib.waitForVault" . | nindent 6 }}
      {{- $cmCert := printf "%s;%s" ( include "vault.cert" . ) ( include "monitoring.cert" . ) }}
      {{- include "helm-lib.containers.vaultInit" (dict "certNames" $cmCert "Values" .Values) | nindent 6 }}
      
      containers:
      - name: credential-manager
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.credentialManager.image }}:{{ .Values.global.credentialManager.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        command: ["/opt/credential-manager/docker-entrypoint.sh"]
        resources:
          requests:
            cpu: 10m
            memory: 64Mi
          limits:
            cpu: 500m
            memory: 384Mi
        env:
        - name: DB_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: credential-manager-configmap
              key: credentialManager.dbhost
        - name: DB_DBNAME
          valueFrom:
            configMapKeyRef:
              name: credential-manager-configmap
              key: credentialManager.dbname
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: credential-manager-configmap
              key: credentialManager.dbport
        - name: DB_TYPE
          valueFrom:
            configMapKeyRef:
              name: credential-manager-configmap
              key: credentialManager.dbType
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: credential-manager-configmap
              key: credentialManager.dbUser
        - name: DB_USER_PASSWORD_KEY
          value: {{ coalesce .Values.deployment.database.userPasswordKey .Values.global.database.userPasswordKey "ITOM_DB_PASSWD_KEY" | quote }}
        {{- if eq (include "helm-lib.dbType" . ) "postgresql" }}
        - name: PGSSLROOTCERT
          valueFrom:
            configMapKeyRef:
              name: credential-manager-configmap
              key: credentialManager.certpath
        - name: PGSSL
          valueFrom:
            configMapKeyRef:
              name: credential-manager-configmap
              key: credentialManager.dbUseTLS
        - name: PGSSLMODE
          valueFrom:
            configMapKeyRef:
              name: credential-manager-configmap
              key: credentialManager.tlsMode
        - name: DB_SCHEMA
          valueFrom:
            configMapKeyRef:
              name: credential-manager-configmap
              key: credentialManager.dbSchema
        {{- end }}
        {{- if eq (include "helm-lib.dbType" . ) "oracle" }}
        - name: DB_ORACLE_SID
          valueFrom:
            configMapKeyRef:
              name: credential-manager-configmap
              key: credentialManager.oracle.sid
        - name: DB_ORACLE_SERVICE_NAME
          valueFrom:
            configMapKeyRef:
              name: credential-manager-configmap
              key: credentialManager.oracle.serviceName
        - name: DB_ORACLE_CONNECTION_STRING
          valueFrom:
            configMapKeyRef:
              name: credential-manager-configmap
              key: credentialManager.oracle.connectionString
        - name: TLS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: credential-manager-configmap
              key: credentialManager.dbUseTLS
        - name: SSL_CLIENT_AUTHENTICATION
          valueFrom:
            configMapKeyRef:
              name: credential-manager-configmap
              key: credentialManager.oracle.sslClientAuthentication
        - name: SSL_SERVER_DN_MATCH
          valueFrom:
            configMapKeyRef:
              name: credential-manager-configmap
              key: credentialManager.oracle.sslServerDnMatch
        {{- end }}
        - name: ENABLE_ITOM_AUTOMATION_MANAGER_INTEGRATION
          valueFrom:
            configMapKeyRef:
              name: credential-manager-feature-gates
              key: enable-itom-automation-manager-integration
        - name: CREDENTIAL_MANAGER_ENCRYPTION_KEY
          value: {{ coalesce .Values.deployment.encryptionKeySecretName .Values.global.encryptionKeySecretName "CREDENTIAL_MANAGER_ENCRYPTION_KEY" | quote }}
        {{- if (or .Values.deployment.database.tlsEnabled .Values.global.database.tlsEnabled) }}
        {{- if eq (include "helm-lib.dbType" . ) "postgresql" }}
        - name: CM_SSL_TRUSTSTORE_CERTIFICATE_AUTHORITIES
          value: /var/run/secrets/global-certs-vol
        {{- end }}
        {{- end }}
        - name: TLS_MIN_VERSION
          value: {{ include "helm-lib.getTlsMinVersion" (dict "Values" .Values "format" "1") }}
        {{- include "validateGoTlsCiphers" . }}
        - name: TLS_CIPHERS
          value: {{ include "helm-lib.getTlsCiphers" (dict "Values" .Values "format" "iana") }} 
        ports:
        - containerPort: 5333
          name: cm-port1
        volumeMounts:
        - mountPath: /var/run/secrets/boostport.com
          name: vault-token
        - mountPath: /opt/credential-manager/trusted-certs
          name: trusted-certs
        - mountPath: /opt/credential-manager/log
          name: log
        {{- if (or .Values.deployment.database.tlsEnabled .Values.global.database.tlsEnabled) }}
        {{- if eq (include "helm-lib.dbType" . ) "oracle" }}
        - name: oracle-wallet-configmap
          mountPath: /oracle
        - name: oracle-wallet-volume
          mountPath: /opt/credential-manager/oracle/wallet
        {{- else }}
        - name: global-certs-volume
          mountPath: /var/run/secrets/global-certs-vol
        {{- end }}
        {{- end }}
        livenessProbe:
          exec:
            command:
              - sh
              - -c
              - /liveness.sh
          initialDelaySeconds: 20
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 5
        readinessProbe:
          exec:
            command:
              - sh
              - -c
              - /readiness.sh
          initialDelaySeconds: 10
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 5
      {{- include "helm-lib.containers.vaultRenew" (dict "Values" .Values) | nindent 6 }}
      restartPolicy: Always
      volumes:
      - name: vault-token
        emptyDir: {}
      - name: trusted-certs
        emptyDir: {}
      - name: log
        emptyDir: {}
      {{- if (or .Values.deployment.database.tlsEnabled .Values.global.database.tlsEnabled) }}
      {{- if eq (include "helm-lib.dbType" . ) "oracle" }}
      - name: oracle-wallet-configmap
        configMap:
          name: {{ coalesce .Values.deployment.database.oracleWalletName .Values.global.database.oracleWalletName }}
      - name: oracle-wallet-volume
        emptyDir: {}
      {{- else }}
      - name: global-certs-volume
        configMap:
          name: {{ coalesce .Values.deployment.database.tlsTruststore .Values.global.database.tlsTruststore .Values.global.tlsTruststore }}
      {{- end }}
      {{- end }}
