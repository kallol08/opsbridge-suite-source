{{/*# Copyright 2023 Open Text.*/}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: itom-pt-api-server
  labels:
    name: itom-pt-api-server
  annotations:
    {{- if .Values.global.tlsTruststore }}
    configmap.reloader.stakater.com/reload: {{.Values.global.tlsTruststore | quote }}
    {{- end}}
    deployment.microfocus.com/default-replica-count: "1"
    deployment.microfocus.com/runlevel: UP
spec:
  selector:
    matchLabels:
      name: itom-pt-api-server
  replicas: {{ .Values.deployment.replicas }}
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: itom-pt-api-server
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
    spec:
      serviceAccountName: itom-pt-api-server
      {{- if ne .Values.global.docker.imagePullSecret "" }}
      imagePullSecrets:
      - name: {{ .Values.global.docker.imagePullSecret }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.global.securityContext.user }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
      terminationGracePeriodSeconds: 30
      initContainers:
        {{- $idmHost := include "helm-lib.getInternalIdmHost" . | default  (printf "%s%s.%s" .Values.deployment.idm.namePrefix .Values.deployment.idm.service .Release.Namespace) -}}
        {{- $idmPort := include "helm-lib.getInternalIdmPort" . | default .Values.deployment.idm.port -}}

        {{- include "helm-lib.waitForVault" . | nindent 8 }}
        {{- include "helm-lib.waitFor" (dict "service" .Values.deployment.zookeeper.name "port" .Values.deployment.zookeeper.port "Values" .Values) | nindent 8 }}
        {{- include "helm-lib.waitFor" (dict "service" $idmHost "port" $idmPort "Values" .Values) | nindent 8 }}
        {{- include "helm-lib.containers.vaultInit" (dict "certNames" (printf "Common_Name:itom-pt-api-server,Additional_SAN:%s/itom-pt-api-server/itom-pt-api-server.%s" .Values.global.externalAccessHost  .Release.Namespace) "Values" .Values) | nindent 8 }}
        {{- if .Values.global.nom.edition }}
        - name: create-zk-node
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.nomConfig.image }}:{{ .Values.nomConfig.imageTag }}
          args: ["/tasks/apigateway/590-create-zk-node.json"]
          env:
            - name: ZK_NODE_PATH
              value: "/services/consumable/tenant/endpoints"
            - name: IDM_HOST
              value: {{ $idmHost | quote }}
            - name: IDM_PORT
              value: {{ $idmPort | quote }}
            - name: IDM_USER
              value: "{{ .Values.deployment.idm.user }}"
            - name: IDM_PASSWORD_KEY
              value: "{{ .Values.deployment.idm.passwordKey }}"
            - name: ZK_SVC_NAME
              value: "{{ .Values.deployment.zookeeper.name }}.{{.Release.Namespace}}"
            - name: ZK_PORT
              value: "{{ .Values.deployment.zookeeper.port }}"
            - name: ZK_NAMESPACE
              value: "nom"
            - name: MIXED_MODE
              {{- include "helm-lib.injectVar" (dict "varName" "nom.mixedMode" "Values" .Values "Template" .Template) | nindent 14 }}
          resources:
            {{- toYaml .Values.initResources | nindent 12 }}
          volumeMounts:
            - mountPath: /var/run/secrets/boostport.com
              name: vault-token
            - mountPath: /data
              name: apiserver-data-vol
            {{- if .Values.global.tlsTruststore }}
            - name: certs-volume
              mountPath: /data/nom/certificates
            {{- end }}

        - name: store-monitoring-data
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.nomConfig.image }}:{{ .Values.nomConfig.imageTag }}
          args: ["/tasks/apigateway/600-store-monitoring-data-zk.json"]
          env:
            - name: IDM_HOST
              value: {{ $idmHost | quote }}
            - name: IDM_PORT
              value: {{ $idmPort | quote }}
            - name: IDM_USER
              value: "{{ .Values.deployment.idm.user }}"
            - name: IDM_PASSWORD_KEY
              value: "{{ .Values.deployment.idm.passwordKey }}"
            - name: ZK_SVC_NAME
              value: "{{ .Values.deployment.zookeeper.name }}.{{.Release.Namespace}}"
            - name: ZK_PORT
              value: "{{ .Values.deployment.zookeeper.port }}"
            - name: ZK_NAMESPACE
              value: "nom"
            - name: MIXED_MODE
              {{- include "helm-lib.injectVar" (dict "varName" "nom.mixedMode" "Values" .Values "Template" .Template) | nindent 14 }}
            - name: NNM_USER_NAME
              {{- include "helm-lib.injectVar" (dict "varName" "nnmi.user" "Values" .Values "Template" .Template) | nindent 14 }}
            - name: NNM_USER_PASSWORD_KEY
              {{- include "helm-lib.injectVar" (dict "varName" "nnmi.passwordKey" "Values" .Values "Template" .Template) | nindent 14 }}
            - name: AUTOMATION_URL
              value: "<none>"
            - name: MONITORING_URL
              {{- include "helm-lib.injectVar" (dict "varName" "nnmi.url" "Values" .Values "Template" .Template) | nindent 14 }}
            - name: MONITORING_FAILOVER_URL
              {{- include "helm-lib.injectVar" (dict "varName" "nnmi.failoverUrl" "Values" .Values "Template" .Template) | nindent 14 }}
          resources:
            {{- toYaml .Values.initResources | nindent 12 }}
          volumeMounts:
            - mountPath: /var/run/secrets/boostport.com
              name: vault-token
            - mountPath: /data
              name: apiserver-data-vol
            {{- if .Values.global.tlsTruststore }}
            - name: certs-volume
              mountPath: /data/nom/certificates
            {{- end }}

        - name: store-automation-data
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.nomConfig.image }}:{{ .Values.nomConfig.imageTag }}
          args: ["/tasks/apigateway/650-store-automation-data-zk.json"]
          env:
{{/*            # This job does not have to run in legacy OpsB environment????*/}}
            - name: IDM_HOST
              value: {{ $idmHost | quote }}
            - name: IDM_PORT
              value: {{ $idmPort | quote }}
            - name: IDM_USER
              value: "{{ .Values.deployment.idm.user }}"
            - name: IDM_PASSWORD_KEY
              value: "{{ .Values.deployment.idm.passwordKey }}"
            - name: ZK_SVC_NAME
              value: "{{ .Values.deployment.zookeeper.name }}.{{.Release.Namespace}}"
            - name: ZK_PORT
              value: "{{ .Values.deployment.zookeeper.port }}"
            - name: ZK_NAMESPACE
              value: "nom"
            - name: MIXED_MODE
              {{- include "helm-lib.injectVar" (dict "varName" "nom.mixedMode" "Values" .Values "Template" .Template) | nindent 14 }}
            - name: NNM_USER_NAME
              {{- include "helm-lib.injectVar" (dict "varName" "nnmi.user" "Values" .Values "Template" .Template) | nindent 14 }}
            - name: NNM_USER_PASSWORD_KEY
              {{- include "helm-lib.injectVar" (dict "varName" "nnmi.passwordKey" "Values" .Values "Template" .Template) | nindent 14 }}
            - name: AUTOMATION_URL
              {{- include "helm-lib.injectVar" (dict "varName" "na.url" "Values" .Values "Template" .Template) | nindent 14 }}
            - name: MONITORING_URL
              value: "<none>"
            - name: MONITORING_FAILOVER_URL
              value: "<none>"
          resources:
            {{- toYaml .Values.initResources | nindent 12 }}
          volumeMounts:
            - mountPath: /var/run/secrets/boostport.com
              name: vault-token
            - mountPath: /data
              name: apiserver-data-vol
            {{- if .Values.global.tlsTruststore }}
            - name: certs-volume
              mountPath: /data/nom/certificates
            {{- end }}
       {{- end }}
      containers:
        {{- $idmHost := include "helm-lib.getInternalIdmHost" . | default  (printf "%s%s.%s" .Values.deployment.idm.namePrefix .Values.deployment.idm.service .Release.Namespace) -}}
        {{- $idmPort := include "helm-lib.getInternalIdmPort" . | default .Values.deployment.idm.port -}}
        {{- $diAdminHost := include "helm-lib.getDiAdminHost" . | default .Values.coso.diAdminSvc.host -}}
        {{- $diAdminPort := include "helm-lib.getDiAdminPort" . | default .Values.coso.diAdminSvc.port -}}
        {{- $diDataAccessHost := include "helm-lib.getDiDataAccessHost" . | default .Values.coso.diDataAccessSvc.host -}}
        {{- $diDataAccessPort := include "helm-lib.getDiDataAccessPort" . | default .Values.coso.diDataAccessSvc.port -}}
        {{ $apHost := include "helm-lib.getAplsHost" . | default "itom-autopass-lms" }}
        {{ $apPort := include "helm-lib.getAplsPort" . | default 5814 }}

        - name: itom-pt-api-server
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.apiServer.image }}:{{ .Values.apiServer.imageTag }}
          imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
          ports:
            - containerPort: 8443
            - containerPort: 8080
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /apiserver/health/
              port: 8443
            initialDelaySeconds: 20
            timeoutSeconds: 10
            periodSeconds: 60
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /apiserver/health/
              port: 8443
            initialDelaySeconds: 5
            timeoutSeconds: 15
            periodSeconds: 5
            failureThreshold: 2
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          securityContext:
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["CHOWN", "DAC_OVERRIDE", "FSETID", "FOWNER", "MKNOD", "SETGID", "SETUID", "SETFCAP", "SETPCAP", "NET_BIND_SERVICE", "SYS_CHROOT", "KILL", "AUDIT_WRITE","NET_RAW"]
          env:
          {{- if (and (((.Values.global.services).opticReporting).deploy) (eq ((((.Values.global.services).opticDataLake).deploy) | toString) "false")) }}
          - name: VAULT_SIGNING_KEY
            value: "IDM_SIGNING_KEY"
          {{- else }}
          - name: VAULT_SIGNING_KEY
            value: "VAULT_SIGNING_KEY"
          {{- end }}
          - name: DEFAULT_TENANT
            value: {{ (((.Values.global.idm).additionalSeededOrg).name) | default "Provider" | quote }}
          - name: IDM_HOST
            value: {{ $idmHost | quote }}
          - name: IDM_PORT
            value: {{ $idmPort | quote }}
          - name: APLMS_INGRESS_PATH
            value: "https://{{ $apHost }}:{{ $apPort }}/autopass"
          - name: MIXED_MODE
            {{- include "helm-lib.injectVar" (dict "varName" "nom.mixedMode" "Values" .Values "Template" .Template) | nindent 12 }}
          - name: SERVER_MAX_IO_THREADS
            value: "10"
          - name: SERVER_MAX_WORKER_THREADS
            value: "100"
          - name: API_SERVICE_MAX_CONNECTION
            value: "50"
          - name: API_SERVICE_CACHED_CONNECTIONS
            value: "25"
          - name: API_SERVICE_MAX_REQUEST_QUEUE_SIZE
            value: "25"
          - name: API_REQUEST_TIMEOUT_MILLIS
            value: "60000"
          - name: API_SERVICE_IDLE_CONNECTION_TIMEOUT_MILLIS
            value: "-1"
          - name: ITOM_COSO_DI_ADMIN_SERVICE_HOST
            value: {{ $diAdminHost | quote }}
          - name: ITOM_COSO_DI_ADMIN_SERVICE_PORT
            value: {{ $diAdminPort | quote }}
          - name: ITOM_COSO_DI_DATA_ACCESS_SERVICE_HOST
            value: {{ $diDataAccessHost | quote }}
          - name: ITOM_COSO_DI_DATA_ACCESS_SERVICE_PORT
            value: {{ $diDataAccessPort | quote }}
          {{- include "helm-lib.getTlsEnvVars" . | nindent 10 }}  


          envFrom:
            - configMapRef:
                name: itom-pt-api-server-config
          volumeMounts:
          - name: apiserver-log-vol
            mountPath: /var/opt/OV/log
            subPath: api-server
          - name: apiserver-data-vol
            mountPath: /var/opt/OV/server
            subPath: api-server
          {{- if .Values.global.tlsTruststore }}
          - name: certs-volume
            mountPath: /var/opt/OV/shared/certs
          {{- else }}
          - name: apiserver-data-vol
            mountPath: /var/opt/OV/shared/certs
            subPath: nom/certificates
          {{- end }}
          - name: vault-token
            mountPath: /var/run/secrets/boostport.com
          - name: temp
            mountPath: /tmp
        {{- include "helm-lib.containers.vaultRenew" (dict "Values" .Values) | nindent 8 }}
      restartPolicy: Always
      volumes:
      - name: apiserver-data-vol
        {{- include "helm-lib.pvcStorage" (dict "claim" "dataVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      - name: apiserver-log-vol
        {{- include "helm-lib.pvcStorage" (dict "claim" "logVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      {{- if .Values.global.tlsTruststore }}
      - name: certs-volume
        configMap:
          name: {{ .Values.global.tlsTruststore }}
      {{- end }}
      - name: vault-token
        emptyDir: {}
      - name: temp
        emptyDir: {}

      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
