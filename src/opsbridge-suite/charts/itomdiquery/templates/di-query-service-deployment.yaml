{{/* # */}}
{{/* # Copyright 2023 Open Text. */}}
{{/* # */}}
{{/* # The only warranties for products and services of Open Text and its affiliates and  */}}
{{/* # licensors (“Open Text”) are as may be set forth in the express warranty statements  */}}
{{/* # accompanying such products and services. Nothing herein should be construed as */}}
{{/* # constituting an additional warranty. Open Text shall not be liable for technical or */}}
{{/* # editorial errors or omissions contained herein. The information contained herein is  */}}
{{/* # subject to change without notice. */}}
{{/* # */}}
{{/* # Except as specifically indicated otherwise, this document contains confidential  */}}
{{/* # information and a valid license is required for possession, use or copying. If this work  */}}
{{/* # is provided to the U.S. Government, consistent with FAR 12.211 and 12.212, Commercial Computer  */}}
{{/* # Software, Computer Software Documentation, and Technical Data for Commercial Items are licensed to */}}
{{/* # the U.S. Government under vendor’s standard commercial license. */}}
{{/* # */}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: itom-di-query-service
  namespace: {{ .Release.Namespace }}
  annotations:
    deployment.microfocus.com/default-replica-count: "1"
    deployment.microfocus.com/runlevel: UP
    reloader.stakater.com/auto: "true"
    {{- if and .Values.global.apiClient.authorizedClientCAs .Values.global.tlsTruststore }}
    configmap.reloader.stakater.com/reload: "{{ .Values.global.apiClient.authorizedClientCAs }},{{ .Values.global.tlsTruststore }}"
    {{- else if .Values.global.apiClient.authorizedClientCAs }}
    configmap.reloader.stakater.com/reload: "{{ .Values.global.apiClient.authorizedClientCAs }}"
    {{- else if .Values.global.tlsTruststore }}
    configmap.reloader.stakater.com/reload: "{{ .Values.global.tlsTruststore }}"
    {{- end }}
  labels:
    app: itom-di-query-service
    app.kubernetes.io/name: itom-di-query-service
    app.kubernetes.io/managed-by: {{.Release.Name}}
    app.kubernetes.io/version: {{ .Values.queryService.imageTag }}
    itom.microfocus.com/capability: itom-data-ingestion
    tier.itom.microfocus.com/backend: backend
spec:
  replicas: {{ .Values.itomdiquery.queryService.config.replicaCount }}
  selector:
    matchLabels:
      app: itom-di-query-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: itom-di-query-service
        app.kubernetes.io/name: itom-di-query-service
        app.kubernetes.io/managed-by: {{.Release.Name}}
        app.kubernetes.io/version: {{ .Values.queryService.imageTag }}
        itom.microfocus.com/capability: itom-data-ingestion
        tier.itom.microfocus.com/backend: backend
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/di-query-service-configmap.yaml") . | sha256sum }}
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
    spec:
      serviceAccount: {{ .Values.deployment.rbac.serviceAccount | default "itom-di-query-service-sa" }}
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount | default "itom-di-query-service-sa" }}
      initContainers:
      {{- include "helm-lib.waitForVault" . | nindent 6 }}
      - name: waitfor-vertica-service
        {{- if (eq (.Values.global.vertica.embedded | toString) "true") }}
        {{- $vh := "itom-di-vertica-svc" }}
        {{- $vp := "5444" -}}
        {{- $fvnode := "itom-di-vertica-svc" }}
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.toolsBase.image }}:{{ .Values.global.toolsBase.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        command: [ "sh", "-c", "until nc -z {{$fvnode}} {{$vp}} -w 5 ; do echo waiting for {{$fvnode}}:{{$vp}}...; sleep 5; done; exit 0" ]
        resources: {{- include "queryService.initContainers.resources" . | nindent 10 }}
        securityContext:
          runAsNonRoot: true
          runAsUser: {{ .Values.global.securityContext.user }}
          runAsGroup: {{ .Values.global.securityContext.fsGroup }}
          allowPrivilegeEscalation: false
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop:
            - ALL
        {{- else -}}
        {{- $vh := .Values.global.vertica.host }}
        {{- $vp := .Values.global.vertica.port }}
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.global.toolsBase.image }}:{{ .Values.global.toolsBase.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        command: [ "sh", "-c", "cmd=''; vh_local={{$vh}}; vp_local={{$vp}}; for i in $(echo $vh_local | sed 's/,/ /g' | awk '{$1=$1};1'); do cmd=$(echo $cmd '|| nc -z '$i' '$vp_local' -w 5 '); done; cmd=${cmd:3}; echo 'command is : '$cmd''; until eval $(echo $cmd); do echo 'waiting for '$vh_local' with port '$vp_local' ... '; sleep 5; done; exit 0;" ]
        resources: {{- include "queryService.initContainers.resources" . | nindent 10 }}
        securityContext:
          runAsNonRoot: true
          runAsUser: {{ .Values.global.securityContext.user }}
          runAsGroup: {{ .Values.global.securityContext.fsGroup }}
          allowPrivilegeEscalation: false
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop:
            - ALL
        {{- end }}
      {{- $certNames := "Common_Name:itom-di-query-service,File_Name:query-service" -}}
      {{- include "helm-lib.containers.vaultInit" (dict "certNames" $certNames "Values" .Values) | nindent 6 }}
      terminationGracePeriodSeconds: 90
      containers:
      {{- include "helm-lib.containers.vaultRenew" (dict "Values" .Values) | nindent 6 }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - name: itom-di-query-service
        args:
        - quexserv
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.queryService.image }}:{{ .Values.queryService.imageTag }}
        {{- if .Values.itomdiquery.probe.startup.enabled }}
        startupProbe:
          exec:
            command:
            - "/itom-data-ingestion-query-svc/startup.sh"
          initialDelaySeconds: {{ .Values.itomdiquery.probe.startup.initialDelaySeconds }}
          periodSeconds: {{ .Values.itomdiquery.probe.startup.periodSeconds }}
          timeoutSeconds: {{ .Values.itomdiquery.probe.startup.timeoutSeconds }}
          failureThreshold: {{ .Values.itomdiquery.probe.startup.failureThreshold }}
          successThreshold: {{ .Values.itomdiquery.probe.startup.successThreshold }}
        {{- end }}
        {{- if .Values.itomdiquery.probe.liveness.enabled }}
        livenessProbe:
          exec:
            command:
            - "/itom-data-ingestion-query-svc/liveness.sh"
          initialDelaySeconds: {{ .Values.itomdiquery.probe.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.itomdiquery.probe.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.itomdiquery.probe.liveness.timeoutSeconds }}
          failureThreshold: {{ .Values.itomdiquery.probe.liveness.failureThreshold }}
          successThreshold: {{ .Values.itomdiquery.probe.liveness.successThreshold }}
        {{- end }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        resources:
          requests:
            cpu: {{ .Values.itomdiquery.queryService.resources.requests.cpu }}
            memory: {{ .Values.itomdiquery.queryService.resources.requests.memory }}
          limits:
            memory: {{ .Values.itomdiquery.queryService.resources.limits.memory }}
            cpu: {{ .Values.itomdiquery.queryService.resources.limits.cpu }}
        ports:
        - containerPort: 4000
          protocol: TCP
        env:
        - name: DEBUG
          value: "bvd:error*,bvd:audit*"
        - name: "QUERY_SERVICE_USE_TLS"
          valueFrom:
            configMapKeyRef:
              name: itom-di-query-service-cm
              key: queryService.useTLS
        - name: "QUERY_RESPONSE_LIMIT"
          valueFrom:
            configMapKeyRef:
              name: itom-di-query-service-cm
              key: queryService.queryResponseLimit
        volumeMounts:
          - name: vault-token
            mountPath: /var/run/secrets/boostport.com
          {{- if .Values.global.tlsTruststore }}
          - name: global-tls-truststore
            mountPath: /queryService/cert
          {{- end }}
          - name: temp-storage
            mountPath: /tmp
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.global.securityContext.user | int64 }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}
        fsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "app"
                      operator: In
                      values:
                        - itom-di-query-service
                topologyKey: "kubernetes.io/hostname"     
      restartPolicy: Always
      volumes:
      - name: vault-token
        emptyDir: {}
      {{- if .Values.global.tlsTruststore }}
      - name: global-tls-truststore
        configMap:
          name: {{ .Values.global.tlsTruststore }}
      {{- end }}
      - name: temp-storage
        emptyDir: {}