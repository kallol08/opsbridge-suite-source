#
# Copyright 2023 Open Text.
#
# The only warranties for products and services of Open Text and its affiliates and licensors (“Open Text”)
# are as may be set forth in the express warranty statements accompanying such products and services.
# Nothing herein should be construed as constituting an additional warranty. Open Text shall not be liable
# for technical or editorial errors or omissions contained herein. The information contained herein is subject
# to change without notice.
#
# Except as specifically indicated otherwise, this document contains confidential information and a valid
# license is required for possession, use or copying. If this work is provided to the U.S. Government,
# consistent with FAR 12.211 and 12.212, Commercial Computer Software, Computer Software
# Documentation, and Technical Data for Commercial Items are licensed to the U.S. Government under
# vendor’s standard commercial license.
#
global:
  expose:
    ipConfig:
      ipFamilyPolicy: PreferDualStack
      ipFamilies:
  services:
    opticDataLake:
      queryService:
        deploy: false
  # For custom server CAs (incl. for Vertica). tlsTruststore should be the name of a configMap which contains the certs.
  database:  
    tlsTruststore:
  tlsTruststore:

  # If deployPrometheusConfig is true, OMT Monitoring Framework is assumed to be installed and will use it for metric storage
  prometheus:
    deployPrometheusConfig: true
    prometheusSelector:
      prometheus_config: "1"
    scrapeCertSecretName: "itom-di-prometheus-scrape-cert"
    scrapeCaConfigmapName: "monitoring-ca-certificates"

  # RBAC
  rbac:
    serviceAccountCreate: true
    roleCreate: true
  nodeSelector: {}
  setFqdnInIngress: true
  # For custom client CAs. authorizedClientCAs should be the name of a configMap which contains the certs.
  apiClient:
    authorizedClientCAs:
  nginx:
    annotationPrefix:

  di:
    #Will be used as a suffix for schema names
    tenant: "provider"
    deployment: "default"
  #All vertica related details are being moved into global so that it can be used across charts
  # rwuser: Read Write vertica User
  # rouser: Read Only user. Used only by Data Access
  # rwuserkey: Password for Read Write vertica user
  # rouserkey: password for Read only vertica user
  vertica:
    embedded: false
    host:
    rwuser:
    rwuserkey: ITOMDI_DBA_PASSWORD_KEY
    rouser:
    rouserkey: ITOMDI_DBA_PASSWORD_KEY
    db:
    port:
    tlsEnabled: "true"

  docker:
    # set the global.docker.registry and orgName to your internal Docker registry/org
    registry: localhost:5000
    orgName: hpeswitomsandbox
    imagePullSecret: ""
    imagePullPolicy: IfNotPresent

  securityContext:
    user: "1999"
    groupVault: "0"
    fsGroup: "1999"

  # Global image references for vault
  vaultRenew:
    #registry:
    #orgName:
    image: kubernetes-vault-renew
    imageTag: 0.10.0-0019
  vaultInit:
    #registry:
    #orgName:
    image: kubernetes-vault-init
    imageTag: 0.10.0-0019
  toolsBase:
    image: itom-tools-base
    imageTag: 1.1.0-0018
  # REQUIRED: The externalAccessHost is the end-point for the service
  externalAccessHost:

  idm:
    idmServiceUrl: "https://itom-idm-svc:18443/idm-service"

resources:
  limits:
    cpu: "1"
    memory: "4096Mi"
  requests:
    cpu: "0.2"
    memory: "256Mi"

deployment:
  rbac:
    serviceAccount: ""

didataaccess:
  idm:
    authorizedRoles: "di_data_access"

itomdiquery:
  dbuser:
  password: ITOMDI_QUERY_DB_PASSWORD_KEY
  probe:
    startup:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 5
      timeoutSeconds: 5
      failureThreshold: 25
      successThreshold: 1

    liveness:
      enabled: true
      initialDelaySeconds: 1
      periodSeconds: 30
      timeoutSeconds: 10
      failureThreshold: 5
      successThreshold: 1

    readiness:
      enabled: true
      initialDelaySeconds: 1
      periodSeconds: 30
      timeoutSeconds: 10
      failureThreshold: 5
      successThreshold: 1

  queryServiceGateway:
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        memory: 512Mi
        cpu: 250m
    config:
      replicaCount: 1
      clientAuthEnabled: "true"
      requestTimeout: 120
    query:
      queryServiceUrl: https://itom-di-query-service:4000/itom-data-ingestion-store/v1/query

  queryService:
    queryResponseLimit: 5000000 # 5MB
    resources:
      requests:
        memory: 256Mi
        cpu: 0.1
      limits:
        memory: 2Gi
        cpu: 2
    config:
      replicaCount: 1

#####################
# Image definitions
#####################
queryServiceGateway:
  image: itom-data-ingestion-query-service-gateway
  imageTag: 2.12.1-2

queryService:
  image: itom-data-ingestion-query-service
  imageTag: 2.12.1-3