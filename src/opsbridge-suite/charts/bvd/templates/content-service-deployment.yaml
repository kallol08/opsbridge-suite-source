apiVersion: apps/v1
kind: Deployment
metadata:
  name: uif-contentservice-deployment
  namespace: {{ .Release.Namespace }}
  labels:
    itom.microfocus.com/capability: bvd
    app.kubernetes.io/name: content-service
    app.kubernetes.io/managed-by: bvd-config
    app.kubernetes.io/version: {{ .Values.bvd.imageTag }}
    # itom.microfocus.com/capability: bvd
    tier.itom.microfocus.com/content-service: content-service
  annotations:
    deployment.microfocus.com/default-replica-count: "1"
    deployment.microfocus.com/runlevel: UP
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: content-service
      itom.microfocus.com/capability: bvd
  template:
    metadata:
      labels:
        app.kubernetes.io/name: content-service
        itom.microfocus.com/capability: bvd
      annotations:
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
        pod.boostport.com/vault-init-container: install
        {{- if .Values.global.initSecrets }}
        secret.reloader.stakater.com/reload: "{{ .Values.global.initSecrets }}"
        {{- end }}
        {{- include "bvd.monitorConfigmap" (dict "Values" .Values) | nindent 8 }}
    spec:
      affinity: {{- include "bvd.affinity" (dict "deployment" "content-service" "Values" .Values) | nindent 10 -}}
      {{- $vaultMount := "/var/run/secrets/boostport.com" }}
      serviceAccount: {{ .Values.deployment.rbac.serviceAccount }}
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount }}
      initContainers:
      {{- include "helm-lib.waitFor" (dict "service" "bvd-explore" "port" 4000 "Values" .Values) | nindent 6 }}
      {{- include "helm-lib.waitFor" (dict "service" "bvd-www" "port" 4000 "Values" .Values) | nindent 6 }}
      {{- $certName := printf "Common_Name:cm-server,Additional_SAN:cm-server.%s/cm-server.%s.svc.cluster.local/uif-content-service/uif-content-service.%s/uif-content-service.%s.svc.cluster.local,File_Name:cm-server" ( .Release.Namespace ) ( .Release.Namespace ) ( .Release.Namespace ) ( .Release.Namespace ) -}}
      {{- include "helm-lib.containers.vaultInit" (dict "certNames" $certName "Values" .Values) | nindent 6 }}
      containers:
        - name: content-service
          args:
          - cm-service
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.bvd.image }}:{{ .Values.bvd.imageTag }}
          readinessProbe:
            httpGet:
              path: /docker/ready
              port: 4001
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 5
          resources:
            requests:
              cpu: {{ .Values.bvd.cmservice.resources.requests.cpu }}
              memory: {{ .Values.bvd.cmservice.resources.requests.memory }}
            limits:
              memory: {{ .Values.bvd.cmservice.resources.limits.memory }}
              cpu: {{ .Values.bvd.cmservice.resources.limits.cpu }}
          ports:
          - containerPort: 4001
            protocol: TCP
          env:
          - name: DEBUG
            value: "*"
          - name: "EXPLORE_CONTEXT_ROOT"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.exploreContextRoot
          - name: "BVD_CONTEXT_ROOT"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.bvdContextRoot
          - name: "IDM_ADDR"
            valueFrom:
              configMapKeyRef:
                name: bvd-services-config
                key: suite.idm_addr
          - name: "BVD_IDM_INTEGRATION_USER"
            valueFrom:
              configMapKeyRef:
                name: bvd-services-config
                key: suite.integration_user
          - name: "BVD_IDM_INTEGRATION_USER_PASSWORD_KEY"
            valueFrom:
              configMapKeyRef:
                name: bvd-services-config
                key: suite.integration_user_password_key
          - name: "IDM_ORGANIZATION"
            valueFrom:
              configMapKeyRef:
                name: bvd-services-config
                key: suite.idm_organization
          - name: BVD_ADMIN_ROLE
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.adminrole
          - name: "HOME"
            value: "/tmp"
          - name: "NODE_OPTIONS"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.nodeOptions
          - name: "ENABLE_FIPS"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.enableFIPS
          - name: "CM_PATH"
            value: "/bvd/cm"
          - name: "NODE_PATH"
            value: "/bin/node"
          - name: "CLI_PATH"
            value: "/bvd/cli"
          - name : "CONTENT_FOLDER"
            value: "/var/bvd/uif-content"
          - name: "PROCESSED_CONTENT_FOLDER"
            value: "/var/bvd/uif-content-processed"
          - name: "PROCESSED_TENANTS_LIST_FOLDER"
            value: "/var/bvd/uif-tenants-processed"
          volumeMounts:
            {{ include "bvd.tlsTrustStore" (dict "args" "volumeMounts" "Values" .Values) | nindent 2 }}
            {{ include "bvd.globalTlsTrustStore" (dict "args" "volumeMounts" "Values" .Values) | nindent 2 }}
            - name: vault-token
              mountPath: /var/run/secrets/boostport.com
            - name: bvd-temp-storage
              mountPath: /tmp
            - name: bvd-www-var
              mountPath: /var/bvd
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            privileged: false
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
              - ALL
        - name: content-server
          args:
          - cm-server
          image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.bvd.image }}:{{ .Values.bvd.imageTag }}
          readinessProbe:
            httpGet:
              path: /docker/ready
              port: 4000
              scheme: HTTPS
            initialDelaySeconds: 10
            timeoutSeconds: 5
          resources:
            requests:
              cpu: {{ .Values.bvd.cmservice.resources.requests.cpu }}
              memory: {{ .Values.bvd.cmservice.resources.requests.memory }}
            limits:
              memory: {{ .Values.bvd.cmservice.resources.limits.memory }}
              cpu: {{ .Values.bvd.cmservice.resources.limits.cpu }}
          ports:
          - containerPort: 4000
            protocol: TCP
          env:
          - name: DEBUG
            value: {{ .Values.params.debug | default "bvd:error*,bvd:audit*" | quote }}
          - name: "POSTGRES_PASSWORD_KEY"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.dbpassword.key
          - name: "BVD_DB_USER"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.dbuser
          - name: REDIS_PWD_KEY
            valueFrom:
             configMapKeyRef:
                name: bvd-config
                key: bvd.redispassword.key
          - name: "BVD_DB_HOST"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.dbhost
          - name: "BVD_DB_PORT"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.dbport
          - name: "BVD_DB_NAME"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.dbname
          - name: "BVD_DB_SKIP_HOSTNAME_CHECK"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.dbskipHostnameCheck
                optional: true
          - name: "BVD_DB_SID"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.dbsid
          - name: "BVD_DB_TYPE"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.dbType
          - name: "BVD_DB_CONNECTION_STRING"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.dbConnectionString
          - name: "BVD_DB_CA_BASE64_KEY"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.dbCa.base64.key
          - name: "BVD_DB_CA_BASE64"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.dbCa.base64
          - name: "BVD_DB_USE_TLS"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.dbUseTLS
          - name: "BVD_USE_TLS"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.UseTLS
          - name: "EXPLORE_CONTEXT_ROOT"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.exploreContextRoot
          - name: "BVD_CONTEXT_ROOT"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.bvdContextRoot
          - name: "CONTENT_MANAGER_CONTEXT_ROOT"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.contentManagerContextRoot
          - name: "CONTENT_PACK_MAX_FILE_SIZE"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.contentPackMaxFileSize
                optional: true
          - name: "IDM_ADDR"
            valueFrom:
              configMapKeyRef:
                name: bvd-services-config
                key: suite.idm_addr
          - name: "BVD_IDM_INTEGRATION_USER"
            valueFrom:
              configMapKeyRef:
                name: bvd-services-config
                key: suite.integration_user
          - name: "BVD_IDM_INTEGRATION_USER_PASSWORD_KEY"
            valueFrom:
              configMapKeyRef:
                name: bvd-services-config
                key: suite.integration_user_password_key
          - name: "IDM_TRANSPORT_KEY"
            valueFrom:
              configMapKeyRef:
                name: bvd-services-config
                key: suite.idm_transport_key
          - name: "BVD_IDM_TRANSPORT_USER"
            valueFrom:
              configMapKeyRef:
                name: bvd-services-config
                key: suite.idm_transport_user
          - name: "IDM_ORGANIZATION"
            valueFrom:
              configMapKeyRef:
                name: bvd-services-config
                key: suite.idm_organization
          - name: "IDM_EXTERNAL_URL"
            valueFrom:
              configMapKeyRef:
                name: bvd-services-config
                key: suite.idm_external_url
          - name: "DEFAULT_IDM_ORGANIZATION"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.defaultTenant
          - name: "EXTERNALNAME"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.externalname
          - name: "EXTERNALPORT"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.externalport
          - name: BVD_ADMIN_ROLE
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.adminrole
          - name: "HOME"
            value: "/tmp"
          - name: SYSTEM_USER_ID
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.systemUID
          - name: SYSTEM_GROUP_ID
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.systemGID
          - name: "NODE_OPTIONS"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.nodeOptions
          - name: "ENABLE_FIPS"
            valueFrom:
              configMapKeyRef:
                name: bvd-config
                key: bvd.enableFIPS
          - name : "CONTENT_FOLDER"
            value: "/var/bvd/uif-content"
          volumeMounts:
            {{ include "bvd.tlsTrustStore" (dict "args" "volumeMounts" "Values" .Values) | nindent 2 }}
            {{ include "bvd.globalTlsTrustStore" (dict "args" "volumeMounts" "Values" .Values) | nindent 2 }}
            {{ include "bvd.oracleWallet" (dict "args" "volumeMounts" "Values" .Values) | nindent 2 }}
            - name: vault-token
              mountPath: /var/run/secrets/boostport.com
            - name: bvd-temp-storage
              mountPath: /tmp
            - name: bvd-www-var
              mountPath: /var/bvd
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            privileged: false
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
              - ALL
        - name: uif-content-sc-config
          image: "{{ $.Values.global.docker.registry  }}/{{ $.Values.global.docker.orgName }}/{{ $.Values.sidecar.image  }}:{{ $.Values.sidecar.imageTag }}"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 100m
              memory: 250Mi
            requests:
              cpu: 1m
              memory: 5Mi
          env:
          - name: METHOD
            value: WATCH
          - name: LABEL
            value: deployment.microfocus.com/uif-content
          - name: LABEL_VALUE
            value: "true"
          - name: FOLDER
            value: /var/bvd/uif-content
          - name: RESOURCE
            value: both
          volumeMounts:
          - name: bvd-www-var
            mountPath: /var/bvd
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            privileged: false
            readOnlyRootFilesystem: true
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop:
              - ALL
      {{- with ( coalesce .Values.nodeSelector .Values.global.nodeSelector ) }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: vault-token
        emptyDir: {}
      - name: bvd-temp-storage
        emptyDir: {}
      - name: bvd-www-var
      {{- include "helm-lib.pvcStorage" (dict "claim" "configVolumeClaim" "Release" .Release "Template" .Template "Values" .Values ) | nindent 8 }}
      {{ include "bvd.tlsTrustStore" (dict "args" "volumes" "Values" .Values) }}
      {{ include "bvd.globalTlsTrustStore" (dict "args" "volumes" "Values" .Values) }}
      {{ include "bvd.oracleWallet" (dict "args" "volumes" "Values" .Values) }}
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.global.securityContext.user | int64 }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}
        fsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}
        seccompProfile:
          type: RuntimeDefault
