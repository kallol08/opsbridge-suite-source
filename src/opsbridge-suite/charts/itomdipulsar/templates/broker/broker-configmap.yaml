{{/* # */}}
{{/* # Licensed to the Apache Software Foundation (ASF) under one */}}
{{/* # or more contributor license agreements.  See the NOTICE file */}}
{{/* # distributed with this work for additional information */}}
{{/* # regarding copyright ownership.  The ASF licenses this file */}}
{{/* # to you under the Apache License, Version 2.0 (the */}}
{{/* # "License"); you may not use this file except in compliance */}}
{{/* # with the License.  You may obtain a copy of the License at */}}
{{/* # */}}
{{/* #   http://www.apache.org/licenses/LICENSE-2.0 */}}
{{/* # */}}
{{/* # Unless required by applicable law or agreed to in writing, */}}
{{/* # software distributed under the License is distributed on an */}}
{{/* # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY */}}
{{/* # KIND, either express or implied.  See the License for the */}}
{{/* # specific language governing permissions and limitations */}}
{{/* # under the License. */}}
{{/* # */}}

{{ if .Values.components.broker -}}
{{- include "pulsar.setCurrentComponentFull" (set . "currentComponent" .Values.broker.component) -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .currentComponentFull }}"
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
data:
  {{/* # Metadata settings */}}
  zookeeperServers: "{{ template "pulsar.zookeeper.connect" . }}{{ .Values.metadataPrefix }}"
  {{- if .Values.pulsar_metadata.configurationStore }}
  configurationStoreServers: "{{ .Values.pulsar_metadata.configurationStore }}{{ .Values.pulsar_metadata.configurationStoreMetadataPrefix }}"
  {{- end }}
  {{- if not .Values.pulsar_metadata.configurationStore }}
  configurationStoreServers: "{{ template "pulsar.zookeeper.connect" . }}{{ .Values.metadataPrefix }}"
  {{- end }}

  {{/* # Broker settings */}}
  clusterName: "{{ template "pulsar.cluster" . }}"
  exposeTopicLevelMetricsInPrometheus: "true"
  numHttpServerThreads: "8"
  zooKeeperSessionTimeoutMillis: "30000"
  statusFilePath: "/pulsar/tmp/status"

  {{/* ## Offloading settings */}}
  {{- if .Values.broker.offload.enabled }}
  offloadersDirectory: "{{ template "pulsar.home" . }}/offloaders"
  managedLedgerOffloadDriver: {{ .Values.broker.offload.managedLedgerOffloadDriver }}

  {{/* # gcs */}}
  {{- if .Values.broker.offload.gcs.enabled }}
  gcsManagedLedgerOffloadRegion: {{ .Values.broker.offload.gcs.gcsManagedLedgerOffloadRegion }}
  gcsManagedLedgerOffloadBucket: {{ .Values.broker.offload.gcs.gcsManagedLedgerOffloadBucket }}
  gcsManagedLedgerOffloadMaxBlockSizeInBytes: "{{ .Values.broker.offload.gcs.gcsManagedLedgerOffloadMaxBlockSizeInBytes }}"
  gcsManagedLedgerOffloadReadBufferSizeInBytes: "{{ .Values.broker.offload.gcs.gcsManagedLedgerOffloadReadBufferSizeInBytes }}"
  {{/* ## Authentication with GCS */}}
  gcsManagedLedgerOffloadServiceAccountKeyFile: "/pulsar/srvaccts/gcs.json"
  {{- end }}
  {{/* # aws-s3 */}}
  {{- if .Values.broker.offload.s3.enabled }}
  s3ManagedLedgerOffloadRegion: {{ .Values.broker.offload.s3.s3ManagedLedgerOffloadRegion }}
  s3ManagedLedgerOffloadBucket: {{ .Values.broker.offload.s3.s3ManagedLedgerOffloadBucket }}
  s3ManagedLedgerOffloadMaxBlockSizeInBytes: "{{ .Values.broker.offload.s3.s3ManagedLedgerOffloadMaxBlockSizeInBytes }}"
  s3ManagedLedgerOffloadReadBufferSizeInBytes: "{{ .Values.broker.offload.s3.s3ManagedLedgerOffloadReadBufferSizeInBytes }}"
  {{- end }}
  {{- end }}

  {{/* # Function Worker Settings */}}
  {{/* # function worker configuration */}}
  {{- if .Values.components.functions }}
  # functionsWorkerEnabled: "true"
  {{- if .Values.functions.enableCustomizerRuntime }}
  PULSAR_EXTRA_CLASSPATH: "{{ template "pulsar.home" .}}/{{ .Values.functions.pulsarExtraClasspath }}"
  {{- end }}
  {{- else }}
  functionsWorkerEnabled: "false" 
  {{- end }}

  {{/* # prometheus needs to access /metrics endpoint */}}
  webServicePort: "{{ .Values.broker.ports.http }}"
  {{- if or (not .Values.tls.enabled) (not .Values.tls.broker.enabled) }}
  brokerServicePort: "{{ .Values.broker.ports.pulsar }}"
  {{- end }}
  {{- if and .Values.tls.enabled .Values.tls.broker.enabled }}
  tlsEnabled: "true"
  # brokerServicePortTls: "{{ .Values.broker.ports.pulsarssl }}"
  # webServicePortTls: "{{ .Values.broker.ports.https }}"
  {{/* # TLS Settings */}}
  tlsCertificateFilePath: "/var/run/secrets/boostport.com/server.crt"
  tlsKeyFilePath: "/var/run/secrets/boostport.com/server.key"
  {{- else }}
  tlsEnabled: "false"
  {{- end }}

  {{- if and (eq .Values.auth.authentication.provider "jwt") (not .Values.auth.vault.enabled) }}
  {{/* # token authentication configuration */}}
  authenticationProviders: "org.apache.pulsar.broker.authentication.AuthenticationProviderToken"
  brokerClientAuthenticationParameters: "file:///pulsar/tokens/broker/token"
  brokerClientAuthenticationPlugin: "org.apache.pulsar.client.impl.auth.AuthenticationToken"
  {{- if .Values.auth.authentication.jwt.usingSecretKey }}
  tokenSecretKey: "file:///pulsar/keys/token/secret.key"
  {{- else }}
  tokenPublicKey: "file:///pulsar/keys/token/public.key"
  {{- end }}
  {{- end }}
  {{- end }}

  {{/* # Client Configuration purposefully configured for client to talk to the local broker not the proxy. */}}
  {{- if and .Values.tls.enabled .Values.tls.proxy.enabled }}
  webServiceUrl: https://localhost:{{- .Values.broker.ports.https -}}/
  brokerServiceUrl: pulsar+ssl://localhost:{{- .Values.broker.ports.pulsarssl -}}/
  {{- else -}}
  webServiceUrl: http://localhost:{{- .Values.broker.ports.http -}}/
  brokerServiceUrl: pulsar://localhost:{{- .Values.broker.ports.pulsar -}}/
  {{- end -}}


  {{- if and .Values.tls.enabled .Values.tls.bookie.enabled }}
  {{/* # bookkeeper tls settings */}}
  authPlugin: "org.apache.pulsar.client.impl.auth.AuthenticationTls"
  authParams: "tlsCertFile:/var/run/secrets/boostport.com/server.crt,tlsKeyFile:/var/run/secrets/boostport.com/server.key"
  bookkeeperTLSKeyFilePath: /var/run/secrets/boostport.com/server.key
  bookkeeperTLSCertificateFilePath: "/var/run/secrets/boostport.com/server.crt"

  {{/* # https://github.com/apache/bookkeeper/pull/2300 */}}
  bookkeeperUseV2WireProtocol: "false"
  {{- end }}
  {{- if .Values.components.kop }}
  messagingProtocols: "kafka"
  {{- if .Values.auth.authentication.enabled }}
  {{- if eq .Values.auth.authentication.provider "jwt" }}
  PULSAR_PREFIX_saslAllowedMechanisms: "PLAIN"
  {{- end }}
  {{- end }}
  {{- if and .Values.tls.enabled .Values.tls.broker.enabled }}
  PULSAR_PREFIX_kopSslKeystoreLocation: /pulsar/broker.keystore.jks
  PULSAR_PREFIX_kopSslTruststoreLocation: /pulsar/broker.truststore.jks
  {{- end }}
  {{- end }}
  {{ range $k, $v := .Values.broker.configData }}
  {{ $k}}: {{ $v|quote }}
  {{ end }}

  {{/* # Authentication Settings */}}
  {{- if .Values.auth.authentication.enabled }}
  authenticationEnabled: "true"
  authenticationProviders: "org.apache.pulsar.broker.authentication.AuthenticationProviderTls"
  brokerClientAuthenticationPlugin: "org.apache.pulsar.client.impl.auth.AuthenticationTls"
  brokerClientAuthenticationParameters: "tlsCertFile:/var/run/secrets/boostport.com/server.crt,tlsKeyFile:/var/run/secrets/boostport.com/server.key"
  authenticateOriginalAuthData: "true"
  brokerClientTlsEnabled: "true"
  brokerClientTrustCertsFilePath: "/var/run/secrets/boostport.com/issue_ca.crt"
  tlsTrustCertsFilePath: "/pulsar/ssl/broker_client_ca.crt"
  {{- if .Values.auth.authorization.enabled }}
  authorizationEnabled: "true"
  superUserRoles: {{ .Values.auth.superUsers.broker }},{{ .Values.auth.superUsers.proxy }},{{ .Values.auth.superUsers.client }},{{ .Values.auth.superUsers.pulsar_manager }}
  # proxyRoles: {{ .Values.auth.superUsers.proxy }}
  authenticateOriginalAuthData: "false"
  tlsTrustCertsFilePath: "/pulsar/ssl/combined_ca.crt"
  {{- end }}
  {{- if eq (.Values.bookkeeper.replicaCount | int) 1 }}
  # managedLedgerDefaultEnsembleSize: "1"
  # managedLedgerDefaultWriteQuorum: "1"
  # managedLedgerDefaultAckQuorum: "1"
  {{- end }}
  forceDeleteTenantAllowed: "true"
  forceDeleteNamespaceAllowed: "true"
  {{/* # set values won't work for avroSchemaEvolutionEnabled parameter */}}
  {{- if .Values.global.di.avroSchemaEvolutionEnabled }}
  schemaCompatibilityStrategy: "BACKWARD_TRANSITIVE"
  isSchemaValidationEnforced: "true"
  isAllowAutoUpdateSchemaEnabled: "false"
  {{- end }}
  {{/* # Include log configuration file, If you want to configure the log level and other configuration */}}
  {{/* # items, you can modify the configmap, and eventually it will overwrite the log4j2.yaml file under conf */}}
{{ tpl (.Files.Glob "conf/broker/log4j2.yaml").AsConfig . | indent 2 }}
{{- end }}
