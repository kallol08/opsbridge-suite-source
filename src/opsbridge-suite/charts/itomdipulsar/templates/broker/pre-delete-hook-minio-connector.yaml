{{/* # */}}
{{/* # Licensed to the Apache Software Foundation (ASF) under one */}}
{{/* # or more contributor license agreements.  See the NOTICE file */}}
{{/* # distributed with this work for additional information */}}
{{/* # regarding copyright ownership.  The ASF licenses this file */}}
{{/* # to you under the Apache License, Version 2.0 (the */}}
{{/* # "License"); you may not use this file except in compliance */}}
{{/* # with the License.  You may obtain a copy of the License at */}}
{{/* # */}}
{{/* #   http://www.apache.org/licenses/LICENSE-2.0 */}}
{{/* # */}}
{{/* # Unless required by applicable law or agreed to in writing, */}}
{{/* # software distributed under the License is distributed on an */}}
{{/* # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY */}}
{{/* # KIND, either express or implied.  See the License for the */}}
{{/* # specific language governing permissions and limitations */}}
{{/* # under the License. */}}
{{/* # */}}

{{ include "pulsar.setCurrentComponentFull" (set . "currentComponent" .Values.sources_delete.component) -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ template "pulsar.fullname" . }}-minio-connector-pre-delete-hook-{{ randAlphaNum 7 | lower }}"
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  ttlSecondsAfterFinished: 60
  backoffLimit: 1
  completions: 1
  parallelism: 1
  template:
    metadata:
      annotations:
        pod.boostport.com/vault-init-container: install
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.global.securityContext.user | int64 }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}
        fsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}        
        seccompProfile:
          type: RuntimeDefault
      {{/* # The init containers will follow the queue from the zookeeper for the node to run on. */}}
      {{- with ( coalesce .Values.nodeSelector .Values.global.nodeSelector ) }}
      nodeSelector:
        {{ toYaml . }}
      {{- end }}
      serviceAccount: {{ .Values.deployment.rbac.brokerServiceAccount | default "itomdipulsar-broker-sa" }}
      serviceAccountName: {{ .Values.deployment.rbac.brokerServiceAccount | default "itomdipulsar-broker-sa" }}

      initContainers:
      {{- include "helm-lib.waitForVault" . | nindent 6 }}
      {{- $pulsarfullname := (include "pulsar.fullname" .) }}
      {{- $zkcompname := .Values.zookeeper.component -}}
      {{- $certNames := printf "%s-%s" $pulsarfullname $zkcompname -}}
      {{- include "helm-lib.containers.vaultInit" (dict "certNames" $certNames "Values" .Values) | nindent 6 }}      

      {{/* # This initContainer will wait for bookkeeper initnewcluster to complete */}}
      {{/* # before initializing pulsar metadata */}}
      - name: pulsar-bookkeeper-verify-clusterid
        securityContext:
          runAsNonRoot: true
          runAsUser: {{ .Values.global.securityContext.user | int64 }}
          runAsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}                
          seccompProfile:
            type: RuntimeDefault
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.pulsar.image }}:{{ .Values.pulsar.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        resources:
          {{ toYaml .Values.initContainers.pulsar_bookkeeper_verify_clusterid.resources | nindent 10 }}
        command: ["sh", "-c"]
        args:
        - |
          source bin/coso-init.sh;
          bin/apply-config-from-env.py conf/bookkeeper.conf;
          until bin/bookkeeper shell whatisinstanceid; do
            sleep 3;
          done;
        envFrom:
        - configMapRef:
            name: "{{ template "pulsar.fullname" . }}-{{ .Values.bookkeeper.component }}"
        volumeMounts:
        {{- include "pulsar.coso.init.volumeMounts" . | nindent 8 }}
        {{- include "pulsar.broker.certs.volumeMounts" . | nindent 8 }}
        - name: tmp
          mountPath: /pulsar/tmp
        - name: conf
          mountPath: /pulsar/conf
        - name: logs
          mountPath: /pulsar/logs
        - name: ssl
          mountPath: /pulsar/ssl
        - name: vault-token
          mountPath: /var/run/secrets/boostport.com
      containers:
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.sources_delete.component }}"
        securityContext:        
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.pulsar.image }}:{{ .Values.pulsar.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
        resources:
          {{ toYaml .Values.minioHook.resources | nindent 10 }}
        command: ["sh", "-c"]
        args:
          - |
{{/*            #!/bin/sh*/}}
            DI_TENANT={{ .Values.global.di.tenant }}
            PULSAR_TENANT="public"
            source bin/coso-init.sh
            bin/apply-config-from-env.py conf/client.conf conf/bookkeeper.conf
            bin/pulsar-admin sources get  --name ${DI_TENANT} --tenant ${PULSAR_TENANT}
            if [ $? == 0 ]
            then
              bin/pulsar-admin sources delete --name ${DI_TENANT} --tenant ${PULSAR_TENANT}
            else
              echo "No sources found with name ${DI_TENANT} for delete  "
            fi
        envFrom:
        - configMapRef:
            name: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}-post-upgrade"
        volumeMounts:
        {{- include "pulsar.coso.init.volumeMounts" . | nindent 8 }}
        - name: tmp
          mountPath: /pulsar/tmp
        - name: conf
          mountPath: /pulsar/conf
        - name: logs
          mountPath: /pulsar/logs
        - name: ssl
          mountPath: /pulsar/ssl
        - name: vault-token
          mountPath: /var/run/secrets/boostport.com
        {{- include "pulsar.broker.certs.volumeMounts" . | nindent 8 }}
      volumes:
      {{- include "pulsar.coso.init.volumes" . | nindent 6 }}
      - name: tmp
        emptyDir: {}
      - name: conf
        emptyDir: {}
      - name: ssl
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: vault-token
        emptyDir: {}
      {{- include "pulsar.broker.certs.volumes" . | nindent 6 }}
      restartPolicy: OnFailure
