{{/* # */}}
{{/* # Licensed to the Apache Software Foundation (ASF) under one */}}
{{/* # or more contributor license agreements.  See the NOTICE file */}}
{{/* # distributed with this work for additional information */}}
{{/* # regarding copyright ownership.  The ASF licenses this file */}}
{{/* # to you under the Apache License, Version 2.0 (the */}}
{{/* # "License"); you may not use this file except in compliance */}}
{{/* # with the License.  You may obtain a copy of the License at */}}
{{/* # */}}
{{/* #   http://www.apache.org/licenses/LICENSE-2.0 */}}
{{/* # */}}
{{/* # Unless required by applicable law or agreed to in writing, */}}
{{/* # software distributed under the License is distributed on an */}}
{{/* # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY */}}
{{/* # KIND, either express or implied.  See the License for the */}}
{{/* # specific language governing permissions and limitations */}}
{{/* # under the License. */}}
{{/* # */}}

{{ if .Values.initialize -}}
{{- if .Values.components.broker }}
{{- include "pulsar.setCurrentComponentFull" (set . "currentComponent" .Values.broker.component) -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .currentComponentFull }}-apply-admin-settings-{{ randAlphaNum 7 | lower }}"
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
spec:
  template:
    metadata:
      annotations:
        pod.boostport.com/vault-init-container: install
        {{- if .Values.global.vaultAppRole }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-{{ .Values.global.vaultAppRole }}
        {{- else }}
        pod.boostport.com/vault-approle: {{ .Release.Namespace }}-default
        {{- end }}
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.global.securityContext.user | int64 }}
        runAsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}
        fsGroup: {{ .Values.global.securityContext.fsGroup | int64 }}      
        seccompProfile:
          type: RuntimeDefault
      {{/* # The init containers will follow the queue from the zookeeper for the node to run on. */}}
      {{- with ( coalesce .Values.nodeSelector .Values.global.nodeSelector ) }}
      nodeSelector:
        {{ toYaml . }}
      {{- end }}  
      serviceAccount: {{ .Values.deployment.rbac.serviceAccount | default "itomdipulsar-sa" }}
      serviceAccountName: {{ .Values.deployment.rbac.serviceAccount | default "itomdipulsar-sa" }}   
      initContainers:
    {{- include "helm-lib.waitForVault" . | nindent 6 }}
    {{- $authsuperuserbroker := (include "auth.superusers.broker" .) }}    
    {{- $glhost := .Values.global.externalAccessHost -}}
    {{- $compfull := .currentComponentFull -}}
    {{ $certNames := printf "Common_Name:%s,Additional_SAN:%s/%s/%s.%s/%s.%s.svc" $authsuperuserbroker $glhost $compfull $compfull .Release.Namespace $compfull .Release.Namespace }}
    {{- include "helm-lib.containers.vaultInit" (dict "certNames" $certNames "Values" .Values) | nindent 6 }}
    {{- include "pulsar.zookeeper.wait.init.node" . | nindent 6}}
      containers:     
      - name: "{{ .currentComponentFull }}-apply-admin-settings"
        securityContext:        
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        image: {{ .Values.global.docker.registry }}/{{ .Values.global.docker.orgName }}/{{ .Values.pulsar.image }}:{{ .Values.pulsar.imageTag }}
        imagePullPolicy: {{ .Values.global.docker.imagePullPolicy }}
      {{- if .Values.brokerSetting.resources }}
        resources:
          {{ toYaml .Values.brokerSetting.resources | nindent 10 }}
      {{- end }}
        command: ["/bin/bash", "-c"]
        {{/* # This container will wait for at least one broker to be ready before trying to execute pulsar-admin */}}
        args:
          - >
            source bin/coso-init.sh;
            bin/apply-config-from-env.py conf/client.conf;
            set -e;
            brokerServiceNumber="$(nslookup -timeout=10 {{ template "pulsar.fullname" . }}-{{ .Values.broker.component }} | grep Name | wc -l)";
            until [ ${brokerServiceNumber} -ge 1 ]; do
              echo "pulsar cluster {{ template "pulsar.fullname" . }} isn't initialized yet ... retrying in 10 seconds ...";
              sleep 10;
              brokerServiceNumber="$(nslookup -timeout=10 {{ template "pulsar.fullname" . }}-{{ .Values.broker.component }} | grep Name | wc -l)";
            done;

            end=$((SECONDS+300));
            while true; do
              if {{ if ne "-1" (toString .Values.broker.publicDefaultNamespaceSettings.backlogQuotaTopicDefaultLimitSize) -}}
              bin/pulsar-admin namespaces set-backlog-quota public/default --limit {{ div (include "pulsar.calculateBytesFromSuffix" .Values.broker.publicDefaultNamespaceSettings.backlogQuotaTopicDefaultLimitSize) (ternary .Values.diadmin.config.pulsar.topicPartitionCount .Values.broker.replicaCount (gt (int .Values.diadmin.config.pulsar.topicPartitionCount) 0)) }} --policy {{ .Values.broker.publicDefaultNamespaceSettings.backlogQuotaDefaultRetentionPolicy }}
             echo "setting backlog quotas "
             {{- else -}}
              bin/pulsar-admin namespaces remove-backlog-quota public/default
              echo "remove backlog quotas "
              {{- end -}}
              ; then
                break;
              fi

              if [ $SECONDS -gt $end ]; then
                echo "Timed out, the job may create a new pod to try again unless backofflimit is exceeded"
                exit 1
              fi

              echo "pulsar-admin command returned non-zero, brokers may be restarting ... retrying in 10 seconds ...";
              sleep 10;
            done;
        envFrom:
        - configMapRef:
            name: "{{ .currentComponentFull }}"
        env:
        - name: webServiceUrl
          {{- if and .Values.tls.enabled .Values.tls.broker.enabled }}
          value: "https://{{ .currentComponentFull }}:{{ .Values.broker.ports.https }}/"
          {{- else }}
          value: "http://{{ .currentComponentFull }}:{{ .Values.broker.ports.http }}/"
          {{- end }}
        volumeMounts:
        - name: tmp
          mountPath: /pulsar/tmp
        - name: conf
          mountPath: /pulsar/conf
        - name: logs
          mountPath: /pulsar/logs
        - name: ssl
          mountPath: /pulsar/ssl
        - name: vault-token
          mountPath: /var/run/secrets/boostport.com
        {{- include "pulsar.coso.init.volumeMounts" . | nindent 8 }}
        {{- include "pulsar.bastion.certs.volumeMounts" . | nindent 8 }}
        {{- include "pulsar.coso.externalcert.volumeMounts" . | nindent 8 }}
      volumes:
      {{- include "pulsar.coso.init.volumes" . | nindent 6 }}
      - name: tmp
        emptyDir: {}
      - name: conf
        emptyDir: {}
      - name: ssl
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: vault-token
        emptyDir: {}
      {{- include "pulsar.bastion.certs.volumes" . | nindent 6 }}
      {{- include "pulsar.coso.externalcert.volumes" . | nindent 6 }}
      restartPolicy: OnFailure
{{- end }}
{{- end }}
