{{- $autopass := include "opsb.getAutopassDB" . -}}
{{- $bvd := include "opsb.getBVDDB" . -}}
{{- $aec := include "opsb.getAECDB" . -}}
{{- $idm := include "opsb.getIDMDB" . -}}
{{- $obmevent := include "opsb.getOBMEventDB" . -}}
{{- $obmmgmt := include "opsb.getOBMMgmtDB" . -}}
{{- $rtsm := include "opsb.getRtsmDB" . -}}
{{- $itomopsbridgemonitoringadmin := include "opsb.getMonitoringAdminDB" . -}}
{{- $itommonitoringsnf := include "opsb.getMonitornigSNFDB" . -}}
{{- $credentialmanager := include "opsb.getCredentialmanagerDB" . -}}
{{- $btcd := include "opsb.getBtcdDB" . -}}
{{- $idmuser := include "opsb.getIDMUser" . -}}
{{- $autopassuser := include "opsb.getAutopassUser" . -}}
{{- $bvduser := include "opsb.getBVDUser" . -}}
{{- $aecuser := include "opsb.getAECUser" . -}}
{{- $obmeventuser := include "opsb.getOBMEventUser" . -}}
{{- $obmmgmtuser := include "opsb.getOBMMgmtUser" . -}}
{{- $rtsmuser := include "opsb.getRtsmUser" . -}}
{{- $itomopsbridgemonitoringadminuser := include "opsb.getMonitoringAdminUser" . -}}
{{- $itommonitoringsnfadminuser := include "opsb.getMonitoringSNFUser" . -}}
{{- $credentialmanageruser := include "opsb.getCredentialmanagerUser" . -}}
{{- $btcduser := include "opsb.getBtcdUser" . -}}
{{- $postgresadminuser := include "opsb.getPostgresAdminUser" . -}}
{{- $idmPassword := include "opsb.getIdmPasswordKey" . -}}
{{- $autopassPassword := include "opsb.getAutopassPasswordKey" . -}}
{{- $bvdPassword := include "opsb.getBvdPasswordKey" . -}}
{{- $aecPassword := include "opsb.getAecPasswordKey" . -}}
{{- $obmeventPassword := include "opsb.getObmEventPasswordKey" . -}}
{{- $obmmgmtPassword := include "opsb.getObmMgmtPasswordKey" . -}}
{{- $rtsmPassword := include "opsb.getRtsmPasswordKey" . -}}
{{- $itomopsbridgemonitoringadminPassword := include "opsb.getMonitoringAdminPasswordKey" . -}}
{{- $itommonitoringsnfadminPassword := include "opsb.getMonitoringSNFPasswordKey" . -}}
{{- $credentialmanagerPassword := include "opsb.getCredentialmanagerPasswordKey" . -}}
{{- $btcdPassword := include "opsb.getBtcdPasswordKey" . -}}


{{- if .Values.global.database.internal }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: opsb-database-init
data:
  autopass-script.sql: |
    create extension dblink;
    DO $do$ BEGIN
    IF EXISTS (SELECT FROM pg_database WHERE datname = '{{ $autopass }}') THEN
    RAISE NOTICE 'Database already exists';
    else
    IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname='{{$autopassuser}}') THEN
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE USER {{$autopassuser}}');
    END IF;
    PERFORM dblink_exec('dbname=' || current_database() , 'GRANT {{$autopassuser}} TO postgres');
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE DATABASE {{ $autopass }} OWNER {{$autopassuser}}' );
    PERFORM dblink_exec('dbname= {{$autopass}}' , 'GRANT ALL ON DATABASE {{ $autopass }} TO {{$autopassuser}}');
    PERFORM dblink_exec('dbname= {{$autopass}}' , 'ALTER SCHEMA public OWNER TO {{$autopassuser}}');
    PERFORM dblink_exec('dbname= {{$autopass}}' , 'ALTER SCHEMA public RENAME TO autopassschema');
    PERFORM dblink_exec('dbname= {{$autopass}}' , 'REVOKE ALL ON SCHEMA autopassschema from public');
    PERFORM dblink_exec('dbname= {{$autopass}}' , 'GRANT ALL ON SCHEMA autopassschema to {{$autopassuser}}');
    PERFORM dblink_exec('dbname= {{$autopass}}' , 'ALTER USER {{$autopassuser}} in DATABASE {{ $autopass }} SET search_path TO autopassschema');
    END IF;
    END $do$;
  bvd-script.sql: |
    DO $do$ BEGIN
    IF EXISTS (SELECT FROM pg_database WHERE datname = '{{$bvd}}') THEN
    RAISE NOTICE 'Database already exists';
    else
    IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname='{{$bvduser}}') THEN
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE USER {{$bvduser}}');
    END IF;
    PERFORM dblink_exec('dbname=' || current_database() , 'GRANT {{$bvduser}} TO postgres');
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE DATABASE {{$bvd}} OWNER {{$bvduser}}' );
    PERFORM dblink_exec('dbname= {{$bvd}}' , 'GRANT ALL ON DATABASE {{$bvd}} TO {{$bvduser}}');
    PERFORM dblink_exec('dbname= {{$bvd}}' , 'ALTER SCHEMA public OWNER TO {{$bvduser}}');
    PERFORM dblink_exec('dbname= {{$bvd}}' , 'ALTER SCHEMA public RENAME TO bvdschema');
    PERFORM dblink_exec('dbname= {{$bvd}}' , 'REVOKE ALL ON SCHEMA bvdschema from public');
    PERFORM dblink_exec('dbname= {{$bvd}}' , 'GRANT ALL ON SCHEMA bvdschema to {{$bvduser}}');
    PERFORM dblink_exec('dbname= {{$bvd}}' , 'ALTER USER {{$bvduser}} in DATABASE {{$bvd}} SET search_path TO bvdschema');
    END IF;
    END $do$;
  aec-script.sql: |
    DO $do$ BEGIN
    IF EXISTS (SELECT FROM pg_database WHERE datname = '{{$aec}}') THEN
    RAISE NOTICE 'Database already exists';
    else
    IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname='{{$aecuser}}') THEN
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE USER {{$aecuser}}');
    END IF;
    PERFORM dblink_exec('dbname=' || current_database() , 'GRANT {{$aecuser}} TO postgres');
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE DATABASE {{$aec}} OWNER {{$aecuser}}' );
    PERFORM dblink_exec('dbname= {{$aec}}' , 'GRANT ALL ON DATABASE {{$aec}} TO {{$aecuser}}');
    PERFORM dblink_exec('dbname= {{$aec}}' , 'ALTER SCHEMA public OWNER TO {{$aecuser}}');
    PERFORM dblink_exec('dbname= {{$aec}}' , 'ALTER SCHEMA public RENAME TO aecschema');
    PERFORM dblink_exec('dbname= {{$aec}}' , 'REVOKE ALL ON SCHEMA aecschema from public');
    PERFORM dblink_exec('dbname= {{$aec}}' , 'GRANT ALL ON SCHEMA aecschema to {{$aecuser}}');
    PERFORM dblink_exec('dbname= {{$aec}}' , 'ALTER USER {{$bvduser}} in DATABASE {{$aec}} SET search_path TO aecschema');
    END IF;
    END $do$;
  idm-script.sql: |
    DO $do$ BEGIN
    IF EXISTS (SELECT FROM pg_database WHERE datname = '{{$idm}}') THEN
    RAISE NOTICE 'Database already exists';
    else
    IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname='{{$idmuser}}') THEN
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE USER {{$idmuser}}');
    END IF;
    PERFORM dblink_exec('dbname=' || current_database() , 'GRANT {{$idmuser}} TO postgres');
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE DATABASE {{$idm}} OWNER {{$idmuser}}' );
    PERFORM dblink_exec('dbname= {{$idm}}' , 'ALTER SCHEMA public OWNER TO {{$idmuser}}');
    PERFORM dblink_exec('dbname= {{$idm}}' , 'ALTER SCHEMA public RENAME TO idmschema');
    PERFORM dblink_exec('dbname= {{$idm}}' , 'REVOKE ALL ON SCHEMA idmschema from public');
    PERFORM dblink_exec('dbname= {{$idm}}' , 'GRANT ALL ON SCHEMA idmschema to {{$idmuser}}');
    PERFORM dblink_exec('dbname= {{$idm}}' , 'ALTER USER {{$idmuser}} SET search_path TO idmschema');
    END IF;
    END $do$;
  obm-script.sql: |
    DO $do$ BEGIN
    IF EXISTS (SELECT FROM pg_database WHERE datname = '{{$obmevent}}') THEN
    RAISE NOTICE 'Database already exists';
    else
    IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname='{{$obmeventuser}}') THEN
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE USER {{$obmeventuser}}');
    END IF;
    PERFORM dblink_exec('dbname=' || current_database() , 'GRANT {{$obmeventuser}} TO postgres');
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE DATABASE {{$obmevent}} OWNER {{$obmeventuser}}' );
    PERFORM dblink_exec('dbname= {{$obmevent}}' , 'GRANT ALL ON DATABASE {{ $obmevent }} TO {{$obmeventuser}}');
    PERFORM dblink_exec('dbname= {{$obmevent}}' , 'CREATE EXTENSION IF NOT EXISTS "uuid-ossp"');
    PERFORM dblink_exec('dbname= {{$obmevent}}' , 'CREATE EXTENSION IF NOT EXISTS pgstattuple');
    PERFORM dblink_exec('dbname= {{$obmevent}}' , 'GRANT pg_stat_scan_tables to {{$obmeventuser}}');
    PERFORM dblink_exec('dbname= {{$obmevent}}' , 'ALTER SCHEMA public OWNER TO {{$obmeventuser}}');
    END IF;
    END $do$;
    DO $do$ BEGIN
    IF EXISTS (SELECT FROM pg_database WHERE datname = '{{$obmmgmt}}') THEN
    RAISE NOTICE 'Database already exists';
    else
    IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname='{{$obmmgmtuser}}') THEN
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE USER {{$obmmgmtuser}}');
    END IF;
    PERFORM dblink_exec('dbname=' || current_database() , 'GRANT {{$obmmgmtuser}} TO postgres');
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE DATABASE {{$obmmgmt}} OWNER {{$obmmgmtuser}}' );
    PERFORM dblink_exec('dbname= {{$obmmgmt}}' , 'GRANT ALL ON DATABASE {{ $obmmgmt }} TO {{$obmmgmtuser}}');
    PERFORM dblink_exec('dbname= {{$obmmgmt}}' , 'CREATE EXTENSION IF NOT EXISTS "uuid-ossp"');
    PERFORM dblink_exec('dbname= {{$obmmgmt}}' , 'CREATE EXTENSION IF NOT EXISTS pgstattuple');
    PERFORM dblink_exec('dbname= {{$obmmgmt}}' , 'GRANT pg_stat_scan_tables to {{$obmmgmtuser}}');
    PERFORM dblink_exec('dbname= {{$obmmgmt}}' , 'ALTER SCHEMA public OWNER TO {{$obmmgmtuser}}');
    END IF;
    END $do$;
  rtsm-script.sql: |
    DO $do$ BEGIN
    IF EXISTS (SELECT FROM pg_database WHERE datname = '{{$rtsm}}') THEN
    RAISE NOTICE 'Database already exists';
    else
    IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname='{{$rtsmuser}}') THEN
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE USER {{$rtsmuser}}');
    END IF;
    PERFORM dblink_exec('dbname=' || current_database() , 'GRANT {{$rtsmuser}} TO postgres');
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE DATABASE {{$rtsm}} OWNER {{$rtsmuser}}' );
    PERFORM dblink_exec('dbname= {{$rtsm}}' , 'GRANT ALL ON DATABASE {{ $rtsm }} TO {{$rtsmuser}}');
    PERFORM dblink_exec('dbname= {{$rtsm}}' , 'CREATE EXTENSION IF NOT EXISTS "uuid-ossp"');
    PERFORM dblink_exec('dbname= {{$rtsm}}' , 'CREATE EXTENSION IF NOT EXISTS pgstattuple');
    PERFORM dblink_exec('dbname= {{$rtsm}}' , 'GRANT pg_stat_scan_tables to {{$rtsmuser}}');
    PERFORM dblink_exec('dbname= {{$rtsm}}' , 'ALTER SCHEMA public OWNER TO {{$rtsmuser}}');
    END IF;
    END $do$;
  itomopsbridgemonitoringadmin-script.sql: |
    DO $do$ BEGIN
    IF EXISTS (SELECT FROM pg_database WHERE datname = '{{$itomopsbridgemonitoringadmin}}') THEN
    RAISE NOTICE 'Database already exists';
    else
    IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname='{{$itomopsbridgemonitoringadminuser}}') THEN
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE USER {{$itomopsbridgemonitoringadminuser}}');
    END IF;
    PERFORM dblink_exec('dbname=' || current_database() , 'GRANT {{$itomopsbridgemonitoringadminuser}} TO postgres');
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE DATABASE {{$itomopsbridgemonitoringadmin}} OWNER {{$itomopsbridgemonitoringadminuser}}' );
    PERFORM dblink_exec('dbname= {{$itomopsbridgemonitoringadmin}}' , 'GRANT ALL ON DATABASE {{$itomopsbridgemonitoringadmin}} TO {{$itomopsbridgemonitoringadminuser}}');
    PERFORM dblink_exec('dbname= {{$itomopsbridgemonitoringadmin}}' , 'ALTER SCHEMA public OWNER TO {{$itomopsbridgemonitoringadminuser}}');
    PERFORM dblink_exec('dbname= {{$itomopsbridgemonitoringadmin}}' , 'ALTER SCHEMA public RENAME TO monitoringadminschema');
    PERFORM dblink_exec('dbname= {{$itomopsbridgemonitoringadmin}}' , 'REVOKE ALL ON SCHEMA monitoringadminschema from public');
    PERFORM dblink_exec('dbname= {{$itomopsbridgemonitoringadmin}}' , 'GRANT ALL ON SCHEMA monitoringadminschema to {{$itomopsbridgemonitoringadminuser}}');
    END IF;
    END $do$;
  credentialmanager-script.sql: |
    DO $do$ BEGIN
    IF EXISTS (SELECT FROM pg_database WHERE datname = '{{$credentialmanager}}') THEN
    RAISE NOTICE 'Database already exists';
    else
    IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname='{{$credentialmanageruser}}') THEN
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE USER {{$credentialmanageruser}}');
    END IF;
    PERFORM dblink_exec('dbname=' || current_database() , 'GRANT {{$credentialmanageruser}} TO postgres');
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE DATABASE {{$credentialmanager}} OWNER {{$credentialmanageruser}}' );
    PERFORM dblink_exec('dbname= {{$credentialmanager}}' , 'GRANT ALL ON DATABASE {{$credentialmanager}} TO {{$credentialmanageruser}}');
    PERFORM dblink_exec('dbname= {{$credentialmanager}}' , 'ALTER SCHEMA public OWNER TO {{$credentialmanageruser}}');
    PERFORM dblink_exec('dbname= {{$credentialmanager}}' , 'ALTER SCHEMA public RENAME TO credentialmanagerdbschema');
    PERFORM dblink_exec('dbname= {{$credentialmanager}}' , 'REVOKE ALL ON SCHEMA credentialmanagerdbschema from public');
    PERFORM dblink_exec('dbname= {{$credentialmanager}}' , 'GRANT ALL ON SCHEMA credentialmanagerdbschema to {{$credentialmanageruser}}');
    END IF;
    END $do$
  itommonitoringsnf-script.sql: |
    DO $do$ BEGIN
    IF EXISTS (SELECT FROM pg_database WHERE datname = '{{$itommonitoringsnf}}') THEN
    RAISE NOTICE 'Database already exists';
    else
    IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname='{{$itommonitoringsnfadminuser}}') THEN
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE USER {{$itommonitoringsnfadminuser}}');
    END IF;
    PERFORM dblink_exec('dbname=' || current_database() , 'GRANT {{$itommonitoringsnfadminuser}} TO postgres');
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE DATABASE {{$itommonitoringsnf}} OWNER {{$itommonitoringsnfadminuser}}' );
    PERFORM dblink_exec('dbname= {{$itommonitoringsnf}}' , 'GRANT ALL ON DATABASE {{$itommonitoringsnf}} TO {{$itommonitoringsnfadminuser}}');
    PERFORM dblink_exec('dbname= {{$itommonitoringsnf}}' , 'ALTER SCHEMA public OWNER TO {{$itommonitoringsnfadminuser}}');
    PERFORM dblink_exec('dbname= {{$itommonitoringsnf}}' , 'ALTER SCHEMA public RENAME TO monitoringsnfschema');
    PERFORM dblink_exec('dbname= {{$itommonitoringsnf}}' , 'REVOKE ALL ON SCHEMA monitoringsnfschema from public');
    PERFORM dblink_exec('dbname= {{$itommonitoringsnf}}' , 'GRANT ALL ON SCHEMA monitoringsnfschema to {{$itommonitoringsnfadminuser}}');
    END IF;
    END $do$;

  btcd-script.sql: |
    DO $do$ BEGIN
    IF EXISTS (SELECT FROM pg_database WHERE datname = '{{$btcd}}') THEN
    RAISE NOTICE 'Database already exists';
    else
    IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname='{{$btcduser}}') THEN
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE USER {{$btcduser}}');
    END IF;
    PERFORM dblink_exec('dbname=' || current_database() , 'GRANT {{$btcduser}} TO postgres');
    PERFORM dblink_exec('dbname=' || current_database() , 'CREATE DATABASE {{$btcd}} OWNER {{$btcduser}}' );
    PERFORM dblink_exec('dbname= {{$btcd}}' , 'GRANT ALL ON DATABASE {{$btcd}} TO {{$btcduser}}');
    PERFORM dblink_exec('dbname= {{$btcd}}' , 'ALTER SCHEMA public OWNER TO {{$btcduser}}');
    PERFORM dblink_exec('dbname= {{$btcd}}' , 'ALTER SCHEMA public RENAME TO baselinedbschema');
    PERFORM dblink_exec('dbname= {{$btcd}}' , 'REVOKE ALL ON SCHEMA baselinedbschema from public');
    PERFORM dblink_exec('dbname= {{$btcd}}' , 'GRANT ALL ON SCHEMA baselinedbschema to {{$btcduser}}');
    PERFORM dblink_exec('dbname= {{$btcd}}' , 'ALTER USER {{$btcduser}} SET search_path TO baselinedbschema');
    END IF;
    END $do$;

# Below are the sql files passed to the autocreate database job

{{- else if .Values.global.database.autoCreateDatabases }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: opsb-database-init
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook-weight": "-9"
data:

{{- if .Values.secrets.DB_ADMIN_PASSWORD_KEY }}
  dbadmin.password: {{.Values.secrets.DB_ADMIN_PASSWORD_KEY | b64dec }}
{{- end }}

{{- if eq .Values.global.database.type "postgresql" }}

  {{$idm}}.sql: |
    CREATE USER {{$idmuser}} WITH PASSWORD '{{$idmPassword}}';
    GRANT {{$idmuser}} TO {{$postgresadminuser}};
    CREATE DATABASE {{$idm}} OWNER {{$idmuser}};
    \c {{$idm}}
    ALTER SCHEMA public OWNER TO {{$idmuser}};
    ALTER SCHEMA public RENAME TO idmschema;
    REVOKE ALL ON SCHEMA idmschema from public;
    GRANT ALL ON SCHEMA idmschema to {{$idmuser}};
    ALTER USER {{$idmuser}} SET search_path TO idmschema;


  {{$autopass}}.sql: |
    CREATE USER {{$autopassuser}} WITH PASSWORD '{{$autopassPassword}}';
    GRANT {{$autopassuser}} TO {{$postgresadminuser}};
    CREATE DATABASE {{ $autopass }} OWNER {{$autopassuser}};
    \c {{ $autopass }}
    GRANT ALL PRIVILEGES ON DATABASE {{ $autopass }} TO {{$autopassuser}};
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    ALTER SCHEMA public OWNER TO {{$autopassuser}};
    ALTER SCHEMA public RENAME TO autopassschema;
    REVOKE ALL ON SCHEMA autopassschema from public;
    GRANT ALL ON SCHEMA autopassschema to {{$autopassuser}};
    ALTER USER {{$autopassuser}} in DATABASE {{ $autopass }} SET search_path TO autopassschema;

  {{- if or (eq (include "opsb.enableStakeholderDashboard" .) "true") (eq (include "opsb.enableHyperscaleObservability" .) "true") (eq (include "opsb.enableAgentlessMonitoring" .) "true") (eq (include "opsb.deployReporting" .) "true") (eq (include "opsb.enableAEC" .) "true") (eq (include "opsb.enableAnomalyDetection" .) "true") }}

  {{$bvd}}.sql: |
    CREATE USER {{$bvduser}} WITH PASSWORD '{{$bvdPassword}}';
    GRANT {{$bvduser}} TO {{$postgresadminuser}};
    CREATE DATABASE {{$bvd}} OWNER {{$bvduser}};
    \c {{$bvd}}
    GRANT ALL PRIVILEGES ON DATABASE {{$bvd}} TO {{$bvduser}};
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    ALTER SCHEMA public OWNER TO {{$bvduser}};
    ALTER SCHEMA public RENAME TO bvdschema;
    REVOKE ALL ON SCHEMA bvdschema from public;
    GRANT ALL ON SCHEMA bvdschema to {{$bvduser}};
    ALTER USER {{$bvduser}} in DATABASE {{$bvd}} SET search_path TO bvdschema;

  {{- end }}

  {{- if eq (include "opsb.enableAEC" .) "true" }}
  {{$aec}}.sql: |
    CREATE USER {{$aecuser}} WITH PASSWORD '{{$aecPassword}}';
    GRANT {{$aecuser}} TO {{$postgresadminuser}};
    CREATE DATABASE {{$aec}} OWNER {{$aecuser}};
    \c {{$aec}}
    GRANT ALL PRIVILEGES ON DATABASE {{$aec}} TO {{$aecuser}};
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    ALTER SCHEMA public OWNER TO {{$aecuser}};
    ALTER SCHEMA public RENAME TO aecschema;
    REVOKE ALL ON SCHEMA aecschema from public;
    GRANT ALL ON SCHEMA aecschema to {{$aecuser}};
    ALTER USER {{$aecuser}} in DATABASE {{$aec}} SET search_path TO aecschema;
  {{- end}}

  {{- if eq (include "opsb.enableOBM" .) "true" }}

  {{$obmevent}}.sql: |
    CREATE USER {{$obmeventuser}} LOGIN PASSWORD '{{$obmeventPassword}}';
    GRANT {{$obmeventuser}} TO {{$postgresadminuser}};
    CREATE DATABASE {{$obmevent}} OWNER {{$obmeventuser}};
    \c {{$obmevent}};
    GRANT ALL ON DATABASE {{$obmevent}} TO {{$obmeventuser}};
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS pgstattuple;
    GRANT pg_stat_scan_tables TO {{$obmeventuser}};
    ALTER SCHEMA public OWNER TO {{$obmeventuser}};

  {{$obmmgmt}}.sql: |
    CREATE USER {{$obmmgmtuser}} LOGIN PASSWORD '{{$obmmgmtPassword}}';
    GRANT {{$obmmgmtuser}} TO {{$postgresadminuser}};
    CREATE DATABASE {{$obmmgmt}} OWNER {{$obmmgmtuser}};
    \c {{$obmmgmt}};
    GRANT ALL ON DATABASE {{$obmmgmt}} TO {{$obmmgmtuser}};
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS pgstattuple;
    GRANT pg_stat_scan_tables TO {{$obmmgmtuser}};
    ALTER SCHEMA public OWNER TO {{$obmmgmtuser}};

  {{$rtsm}}.sql: |
    CREATE USER {{$rtsmuser}} LOGIN PASSWORD '{{$rtsmPassword}}';
    GRANT {{$rtsmuser}} TO {{$postgresadminuser}};
    CREATE DATABASE {{$rtsm}} OWNER {{$rtsmuser}};
    \c {{$rtsm}};
    GRANT ALL ON DATABASE {{$rtsm}} TO {{$rtsmuser}};
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS pgstattuple;
    GRANT pg_stat_scan_tables TO {{$rtsmuser}};
    ALTER SCHEMA public OWNER TO {{$rtsmuser}};

  {{- end }}

  {{- if or (eq (include "opsb.enableHyperscaleObservability" .) "true") (eq (include "opsb.enableAgentlessMonitoring" .) "true") (eq (include "opsb.deployReporting" .) "true") }}

  {{$itomopsbridgemonitoringadmin}}.sql: |
    CREATE USER {{$itomopsbridgemonitoringadminuser}} login PASSWORD '{{$itomopsbridgemonitoringadminPassword}}';
    GRANT {{$itomopsbridgemonitoringadminuser}} TO {{$postgresadminuser}};
    CREATE DATABASE {{$itomopsbridgemonitoringadmin}} OWNER {{$itomopsbridgemonitoringadminuser}};
    \c {{$itomopsbridgemonitoringadmin}};
    GRANT ALL PRIVILEGES ON DATABASE {{$itomopsbridgemonitoringadmin}} TO {{$itomopsbridgemonitoringadminuser}};
    ALTER SCHEMA public OWNER TO {{$itomopsbridgemonitoringadminuser}};
    ALTER SCHEMA public RENAME TO monitoringadminschema;
    REVOKE ALL ON SCHEMA monitoringadminschema from public;
    GRANT ALL ON SCHEMA monitoringadminschema to {{$itomopsbridgemonitoringadminuser}};
    GRANT ALL PRIVILEGES ON DATABASE {{$itomopsbridgemonitoringadmin}} TO {{$itomopsbridgemonitoringadminuser}};
    ALTER USER {{$itomopsbridgemonitoringadminuser}} SET search_path TO monitoringadminschema;

  {{$credentialmanager}}.sql: |
    CREATE USER {{$credentialmanageruser}} login PASSWORD '{{$credentialmanagerPassword}}';
    GRANT {{$credentialmanageruser}} TO {{$postgresadminuser}};
    CREATE DATABASE {{$credentialmanager}} OWNER {{$credentialmanageruser}};
    \c {{$credentialmanager}};
    GRANT ALL PRIVILEGES ON DATABASE {{$credentialmanager}} TO {{$credentialmanageruser}};
    ALTER SCHEMA public OWNER TO {{$credentialmanageruser}};
    ALTER SCHEMA public RENAME TO credentialmanagerdbschema;
    REVOKE ALL ON SCHEMA credentialmanagerdbschema from public;
    GRANT ALL ON SCHEMA credentialmanagerdbschema to {{$credentialmanageruser}};
    GRANT ALL PRIVILEGES ON DATABASE {{$credentialmanager}} TO {{$credentialmanageruser}};
    ALTER USER {{$credentialmanageruser}} SET search_path TO credentialmanagerdbschema;

  {{- end }}

  {{- if or (eq (include "opsb.enableHyperscaleObservability" .) "true") (eq (include "opsb.deployReporting" .) "true") }}

  {{$itommonitoringsnf}}.sql: |
    CREATE USER {{$itommonitoringsnfadminuser}} login PASSWORD '{{$itommonitoringsnfadminPassword}}';
    GRANT {{$itommonitoringsnfadminuser}} TO {{$postgresadminuser}};
    CREATE DATABASE {{$itommonitoringsnf}} OWNER {{$itommonitoringsnfadminuser}};
    \c {{$itommonitoringsnf}};
    GRANT ALL PRIVILEGES ON DATABASE {{$itommonitoringsnf}} TO {{$itommonitoringsnfadminuser}};
    ALTER SCHEMA public OWNER TO {{$itommonitoringsnfadminuser}};
    ALTER SCHEMA public RENAME TO monitoringsnfschema;
    REVOKE ALL ON SCHEMA monitoringsnfschema from public;
    GRANT ALL ON SCHEMA monitoringsnfschema to {{$itommonitoringsnfadminuser}};
    GRANT ALL PRIVILEGES ON DATABASE {{$itommonitoringsnf}} TO {{$itommonitoringsnfadminuser}};
    ALTER USER {{$itommonitoringsnfadminuser}} SET search_path TO monitoringsnfschema;

  {{- end }}

  {{- if (eq (include "opsb.enableHyperscaleObservability" .) "true") }}

  {{$btcd}}.sql: |
    CREATE USER {{$btcduser}} login PASSWORD '{{$btcdPassword}}';
    GRANT {{$btcduser}} TO {{$postgresadminuser}};
    CREATE DATABASE {{$btcd}} OWNER {{$btcduser}};
    \c {{$btcd}};
    GRANT ALL PRIVILEGES ON DATABASE {{$btcd}} TO {{$btcduser}};
    ALTER SCHEMA public OWNER TO {{$btcduser}};
    ALTER SCHEMA public RENAME TO baselinedbschema;
    REVOKE ALL ON SCHEMA baselinedbschema from public;
    GRANT ALL ON SCHEMA baselinedbschema to {{$btcduser}};
    GRANT ALL PRIVILEGES ON DATABASE {{$btcd}} TO {{$btcduser}};
    ALTER USER {{$btcduser}} SET search_path TO baselinedbschema;

  {{- end }}

{{- else if eq .Values.global.database.type "oracle" }}

  {{$idm}}.sql: |
    alter session set "_ORACLE_SCRIPT"=true;
    create user {{$idmuser}} identified by "{{$idmPassword}}";
    grant connect, resource, unlimited tablespace to {{$idmuser}};

  {{$autopass}}.sql: |
    alter session set "_ORACLE_SCRIPT"=true;
    CREATE USER {{$autopassuser}} IDENTIFIED BY "{{$autopassPassword}}" DEFAULT TABLESPACE USERS TEMPORARY TABLESPACE TEMP QUOTA UNLIMITED ON USERS;
    GRANT "CONNECT" TO {{$autopassuser}};
    GRANT CREATE SEQUENCE TO {{$autopassuser}};
    GRANT CREATE TABLE TO {{$autopassuser}};
    GRANT CREATE TRIGGER TO {{$autopassuser}};
    GRANT CREATE VIEW TO {{$autopassuser}};
    GRANT CREATE PROCEDURE TO {{$autopassuser}};
    GRANT CREATE TYPE TO {{$autopassuser}};
    ALTER USER {{$autopassuser}} DEFAULT ROLE ALL;

  {{- if or (eq (include "opsb.enableStakeholderDashboard" .) "true") (eq (include "opsb.enableHyperscaleObservability" .) "true") (eq (include "opsb.enableAgentlessMonitoring" .) "true") (eq (include "opsb.deployReporting" .) "true") (eq (include "opsb.enableAEC" .) "true") (eq (include "opsb.enableAnomalyDetection" .) "true") }}

  {{$bvd}}.sql: |
    alter session set "_ORACLE_SCRIPT"=true;
    CREATE USER {{$bvduser}} IDENTIFIED BY "{{$bvdPassword}}" DEFAULT TABLESPACE USERS TEMPORARY TABLESPACE  TEMP QUOTA UNLIMITED ON USERS;
    GRANT "CONNECT" TO {{$bvduser}};
    GRANT CREATE SEQUENCE TO {{$bvduser}};
    GRANT CREATE TABLE TO {{$bvduser}};
    GRANT CREATE TRIGGER TO {{$bvduser}};
    GRANT CREATE VIEW TO {{$bvduser}};
    GRANT CREATE PROCEDURE TO {{$bvduser}};
    GRANT CREATE TYPE TO {{$bvduser}};
    ALTER USER {{$bvduser}} DEFAULT ROLE ALL;

  {{- end }}

  {{- if eq (include "opsb.enableAEC" .) "true" }}
  {{$aec}}.sql: |
    alter session set "_ORACLE_SCRIPT"=true;
    CREATE USER {{$aecuser}} IDENTIFIED BY "{{$aecPassword}}" DEFAULT TABLESPACE USERS TEMPORARY TABLESPACE  TEMP QUOTA UNLIMITED ON USERS;
    GRANT "CONNECT" TO {{$aecuser}};
    GRANT CREATE SEQUENCE TO {{$aecuser}};
    GRANT CREATE TABLE TO {{$aecuser}};
    GRANT CREATE TRIGGER TO {{$aecuser}};
    GRANT CREATE VIEW TO {{$aecuser}};
    GRANT CREATE PROCEDURE TO {{$aecuser}};
    GRANT CREATE TYPE TO {{$aecuser}};
    ALTER USER {{$aecuser}} DEFAULT ROLE ALL;

  {{- end}}

  {{- if eq (include "opsb.enableOBM" .) "true" }}

  {{$obmevent}}.sql: |
    alter session set "_ORACLE_SCRIPT"=true;
    CREATE USER {{$obmeventuser}} IDENTIFIED BY "{{$obmeventPassword}}" DEFAULT TABLESPACE USERS TEMPORARY TABLESPACE TEMP QUOTA UNLIMITED ON USERS;
    GRANT "CONNECT" TO {{$obmeventuser}};
    GRANT CREATE SEQUENCE TO {{$obmeventuser}};
    GRANT CREATE TABLE TO {{$obmeventuser}};
    GRANT CREATE TRIGGER TO {{$obmeventuser}};
    GRANT CREATE VIEW TO {{$obmeventuser}};
    GRANT CREATE PROCEDURE TO {{$obmeventuser}};
    GRANT CREATE TYPE TO {{$obmeventuser}};
    ALTER USER {{$obmeventuser}} DEFAULT ROLE ALL;

  {{$obmmgmt}}.sql: |
    alter session set "_ORACLE_SCRIPT"=true;
    CREATE USER {{$obmmgmtuser}} IDENTIFIED BY "{{$obmmgmtPassword}}" DEFAULT TABLESPACE USERS TEMPORARY TABLESPACE TEMP QUOTA UNLIMITED ON USERS;
    GRANT "CONNECT" TO {{$obmmgmtuser}};
    GRANT CREATE SEQUENCE TO {{$obmmgmtuser}};
    GRANT CREATE TABLE TO {{$obmmgmtuser}};
    GRANT CREATE TRIGGER TO {{$obmmgmtuser}};
    GRANT CREATE VIEW TO {{$obmmgmtuser}};
    GRANT CREATE PROCEDURE TO {{$obmmgmtuser}};
    GRANT CREATE TYPE TO {{$obmmgmtuser}};
    ALTER USER {{$obmmgmtuser}} DEFAULT ROLE ALL;


  {{$rtsm}}.sql: |
    alter session set "_ORACLE_SCRIPT"=true;
    CREATE USER {{$rtsmuser}} IDENTIFIED BY "{{$rtsmPassword}}" DEFAULT TABLESPACE USERS TEMPORARY TABLESPACE TEMP QUOTA UNLIMITED ON USERS;
    GRANT "CONNECT" TO {{$rtsmuser}};
    GRANT CREATE SEQUENCE TO {{$rtsmuser}};
    GRANT CREATE TABLE TO {{$rtsmuser}};
    GRANT CREATE TRIGGER TO {{$rtsmuser}};
    GRANT CREATE VIEW TO {{$rtsmuser}};
    GRANT CREATE PROCEDURE TO {{$rtsmuser}};
    GRANT CREATE TYPE TO {{$rtsmuser}};
    ALTER USER {{$rtsmuser}} DEFAULT ROLE ALL;

  {{- end }}

  {{- if or (eq (include "opsb.enableHyperscaleObservability" .) "true") (eq (include "opsb.enableAgentlessMonitoring" .) "true") (eq (include "opsb.deployReporting" .) "true") }}

  {{$itomopsbridgemonitoringadmin}}.sql: |
    alter session set "_ORACLE_SCRIPT"=true;
    CREATE USER {{$itomopsbridgemonitoringadminuser}} IDENTIFIED BY "{{$itomopsbridgemonitoringadminPassword}}" DEFAULT TABLESPACE USERS TEMPORARY TABLESPACE TEMP QUOTA UNLIMITED ON USERS;
    GRANT "CONNECT" TO {{$itomopsbridgemonitoringadminuser}};
    GRANT CREATE SEQUENCE TO {{$itomopsbridgemonitoringadminuser}};
    GRANT CREATE TABLE TO {{$itomopsbridgemonitoringadminuser}};
    GRANT CREATE TRIGGER TO {{$itomopsbridgemonitoringadminuser}};
    GRANT CREATE VIEW TO {{$itomopsbridgemonitoringadminuser}};
    GRANT CREATE PROCEDURE TO {{$itomopsbridgemonitoringadminuser}};
    GRANT CREATE TYPE TO {{$itomopsbridgemonitoringadminuser}};
    ALTER USER {{$itomopsbridgemonitoringadminuser}} DEFAULT ROLE ALL;
    GRANT EXECUTE on SYS.DBMS_LOCK to {{$itomopsbridgemonitoringadminuser}};

  {{$credentialmanager}}.sql: |
    alter session set "_ORACLE_SCRIPT"=true;
    CREATE USER {{$credentialmanageruser}} IDENTIFIED BY "{{$credentialmanagerPassword}}" DEFAULT TABLESPACE USERS TEMPORARY TABLESPACE TEMP QUOTA UNLIMITED ON USERS;
    GRANT "CONNECT" TO {{$credentialmanageruser}};
    GRANT CREATE SEQUENCE TO {{$credentialmanageruser}};
    GRANT CREATE TABLE TO {{$credentialmanageruser}};
    GRANT CREATE TRIGGER TO {{$credentialmanageruser}};
    GRANT CREATE VIEW TO {{$credentialmanageruser}};
    GRANT CREATE PROCEDURE TO {{$credentialmanageruser}};
    GRANT CREATE TYPE TO {{$credentialmanageruser}};
    ALTER USER {{$credentialmanageruser}} DEFAULT ROLE ALL;

  {{- end }}

  {{- if or (eq (include "opsb.enableHyperscaleObservability" .) "true") (eq (include "opsb.deployReporting" .) "true") }}

  {{$itommonitoringsnf}}.sql: |
    alter session set "_ORACLE_SCRIPT"=true;
    CREATE USER {{$itommonitoringsnfadminuser}} IDENTIFIED BY "{{$itommonitoringsnfadminPassword}}" DEFAULT TABLESPACE USERS TEMPORARY TABLESPACE TEMP QUOTA UNLIMITED ON USERS;
    GRANT "CONNECT" TO {{$itommonitoringsnfadminuser}};
    GRANT CREATE SEQUENCE TO {{$itommonitoringsnfadminuser}};
    GRANT CREATE TABLE TO {{$itommonitoringsnfadminuser}};
    GRANT CREATE TRIGGER TO {{$itommonitoringsnfadminuser}};
    GRANT CREATE VIEW TO {{$itommonitoringsnfadminuser}};
    GRANT CREATE PROCEDURE TO {{$itommonitoringsnfadminuser}};
    GRANT CREATE TYPE TO {{$itommonitoringsnfadminuser}};
    ALTER USER {{$itommonitoringsnfadminuser}} DEFAULT ROLE ALL;

  {{- end }}

  {{- if (eq (include "opsb.enableHyperscaleObservability" .) "true") }}

  {{$btcd}}.sql: |
    alter session set "_ORACLE_SCRIPT"=true;
    CREATE USER {{$btcduser}} IDENTIFIED BY "{{$btcdPassword}}" DEFAULT TABLESPACE USERS TEMPORARY TABLESPACE TEMP QUOTA UNLIMITED ON USERS;
    GRANT "CONNECT" TO {{$btcduser}};
    GRANT CREATE SEQUENCE TO {{$btcduser}};
    GRANT CREATE TABLE TO {{$btcduser}};
    GRANT CREATE TRIGGER TO {{$btcduser}};
    GRANT CREATE VIEW TO {{$btcduser}};
    GRANT CREATE PROCEDURE TO {{$btcduser}};
    GRANT CREATE TYPE TO {{$btcduser}};
    ALTER USER {{$btcduser}} DEFAULT ROLE ALL;

  {{- end }}

{{- end }}

{{- end }}